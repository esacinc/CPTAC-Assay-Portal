{"version":1,"windowDimensions":{"x":0,"y":23,"width":1386,"height":772,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/kristennice/Desktop/cptac-docker/src/assays_import"],"buffers":[{"text":"","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":0,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":0,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","preferredLineEnding":"\n","deserializer":"TextBuffer","version":4},{"text":"<?php\n/**\n * @desc Import Assays: controller for importing protein and peptide data from Panorama, UniProt, and Entrez Gene.\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 2.0\n * @package cptac\n *\n */\n\n// Tweak some PHP configurations\nini_set('memory_limit','2048M'); // 2 GB\nini_set('max_execution_time', 66000); // 10 hours\n\nfunction import_panorama_protein_peptide( $import_log_id = false ) {\n  $app = \\Slim\\Slim::getInstance();\n  $env = $app->environment();\n  global $final_global_template_vars;\n  require_once $_SERVER[\"PATH_TO_CORE\"] . \"slim_framework/SWPG/models/XML2Array.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/assays.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_panorama_data.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_uniprot_data.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_entrez_genomic_context.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/kegg.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/labkey.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/user_account/models/user_account.class.php\";\n\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n  \n  $xml2array = new \\swpg\\models\\XML2Array();\n  $assay = new Assay( $db_resource );\n  $import = new ImportPanoramaData( $db_resource );\n  $import_uniprot_data = new ImportUniprotData( $db_resource );\n  $import_entrez = new ImportEntrezGenomicContext( $db_resource );\n  $kegg = new Kegg( $db_resource );\n  $labkey = new LabkeyApi(\n    $final_global_template_vars[\"labkey_config\"]\n    ,$final_global_template_vars[\"panorama_images_path\"]\n    ,$final_global_template_vars[\"panorama_images_storage_path\"]\n  );\n  $user_account = new UserAccount( $db_resource );\n \n\n\n  // Set test mode, which stops actual imports from executing.\n  $execute['test_mode'] = false;\n\n  // Panorama query columns\n  $panorama_query_columns = array(\n      'Sequence'\n    , 'PeptideModifiedSequence'\n    , 'RtCalculatorScore'\n    , 'StartIndex'\n    , 'EndIndex'\n    , 'CalcNeutralMass'\n    , 'PeptideGroupId/Label'\n    , 'PeptideGroupId/RunId'\n    , 'PeptideGroupId/RunId/Created'\n    , 'PeptideGroupId/RunId/File/FileName'\n    , 'PeptideGroupId/Description'\n  );\n\n  /*\n   * Check the import_log_id. Throw a 404 if it's not a valid ID.\n   */\n\n  // Get the laboratory metadata via the import_log_id GET variable.\n  $get = $assay->get_laboratory_by_import_log_id( $app->request->get(\"import_log_id\") );\n\n\n  write_log($get[\"import_log_id\"],'Import Panorama - all protein peptides');\n\n  // If get_laboratories() returns false, throw a 404\n  if(!$get) $app->notFound();\n\n  /*\n   * Backup the database.\n   */\n\n  $assay->backup_database(\"1\");\n\n  /*\n   * Log the import execution details to the database.\n   */\n\n\n  $log_data[\"import_log_id\"] = (int)$get[\"import_log_id\"];\n  $log_data[\"laboratory_id\"] = (int)$get[\"laboratory_id\"];\n  $log_data[\"executed_by_user_id\"] = (int)$app->request->get(\"account_id\");\n  $log_data[\"import_executed_status\"] = true;\n  $imports_executed_log_id = $import->insert_executed_imports( $log_data );\n\n  write_log($get[\"import_log_id\"],'Import logs updated');\n\n  /*\n   * Send an email to the site admin and end-user to notify that an import has been executed.\n   */\n\n  // Get the user's data, since we have no $_SESSION data at this point.\n  $user_data = $user_account->get_user_account_info( $log_data[\"executed_by_user_id\"], false );\n  \n  $test_import_subject = ( $app->request->get(\"test_import\") == 1 ) ? '[TEST RUN]' : '';\n  $email_subject = \"CPTAC Assay Portal: Import Started \".$test_import_subject.\", \".date('F j, Y h:i:s A').\" - \".$get['laboratory_name'];\n  $headers = $final_global_template_vars['message_parts']['headers'];\n  $headers .= 'From: CPTAC Assay Portal <noreply@'.$_SERVER[\"SERVER_NAME\"].'>' . \"\\r\\n\";\n  $test_import_notification = ( $app->request->get(\"test_import\") == 1 ) ? '<span style=\"color:red;\">[TEST RUN]</span>' : '';\n  $body_message = '\n    <h1>CPTAC Assay Portal: Import Started - '.$get['laboratory_name'].'</h1>'.\n    $final_global_template_vars['message_parts']['body_connector']\n    .'<p><strong>Date/Time:</strong> '.date('l, F jS, Y \\a\\t h:i:s A').'</p>\n    <p>'.$test_import_notification.' An import has been executed by the '.$get['laboratory_name'].' laboratory.</p>\n  ';\n  $message = $final_global_template_vars['message_parts']['body_header'].$body_message.$final_global_template_vars['message_parts']['body_footer'];\n\n  // Send the email\n  mail( $final_global_template_vars[\"superadmin_email_address\"].\", \".$user_data[\"email\"], $email_subject, $message, $headers );\n\n  write_log($get[\"import_log_id\"],'Admin notification sent');\n\n\n  // If we're not in test mode, go ahead and execute.\n  if(!$execute['test_mode']) {\n\n    /*\n     * Get the Panorama authentication cookie file.\n     */\n\n\n    $panorama_authentication_cookie = $labkey->get_panorama_authentication_cookie();\n\t\t\n\n    /*\n     * Query Panorama for all of the peptides.\n     */\n\n    write_log($get[\"import_log_id\"],'Getting all protein peptides');\n\n    $returned_peptide_data = $labkey->getAllPeptides(\n      $panorama_authentication_cookie\n      ,\"targetedms\"\n      ,\"Peptide\"\n      ,implode(',', $panorama_query_columns)\n      ,$get['laboratory_abbreviation']\n      ,$get['celllysate_path']\n      ,'ResponseCurve'\n    );\n\t\n\n    $peptide_data = false;\n    if( isset($returned_peptide_data->response) && !empty($returned_peptide_data->response) ) {\n      $peptide_data = json_decode($returned_peptide_data->response,true);\n    }\n\n\n\n\t\t // record this data for future examination\n     $sql = \"DELETE FROM import_initial_start_records WHERE import_log_id = :import_log_id\";\n     $statement = $db_resource->prepare($sql);\n     $statement->bindValue(\":import_log_id\", $get[\"import_log_id\"], PDO::PARAM_INT);\n     $statement->execute(); \n\n     $sql = \"INSERT INTO import_initial_start_records \n              (import_log_id,run_by_user_id,recieved_data,records_count) \n              VALUES \n              (:import_log_id,:run_by_user_id,:recieved_data,:records_count)\";\n     $statement = $db_resource->prepare($sql);\n     $statement->bindValue(\":import_log_id\", $get[\"import_log_id\"], PDO::PARAM_INT);\n     $statement->bindValue(\":run_by_user_id\", $app->request->get(\"account_id\"), PDO::PARAM_INT);\n     $statement->bindValue(\":recieved_data\", json_encode($peptide_data['rows']), PDO::PARAM_STR);\n     $statement->bindValue(\":records_count\", $peptide_data['rowCount'], PDO::PARAM_STR);\n     $statement->execute(); \n\n\n     write_log($get[\"import_log_id\"],'Received total peptides count: '.$peptide_data['rowCount']);\n\n\n    // If Panorama does not respond to this first query, display a message and email the super admin and end-user.\n    if( !$peptide_data ) {\n      mail(\n            $final_global_template_vars[\"superadmin_email_address\"].\", \".$user_data[\"email\"]\n          , \"CPTAC Import: Panorama, No Response - \".$get['laboratory_abbreviation']\n          , date('l F jS, Y h:i:s A').\"\\n\\nNo response from Panorama for an import executed by the '\".$get['laboratory_name'].\"' laboratory.\"\n        );\n      echo 'Panorama did not respond. Please try again. If this persists, please <a href=\"mailto:'.$final_global_template_vars[\"superadmin_email_address\"].'\">contact the site administrator</a>.';\n      \n       write_log($get[\"import_log_id\"],'Panorama did not respond. Please try again.');\n\n      die();\n    }\n\n\n\n\n    // If Panorama returns no data for this first query, display a message and email the super admin and end-user.\n    if( $peptide_data[\"rowCount\"] == 0 ) {\n      mail(\n            $final_global_template_vars[\"superadmin_email_address\"].\", \".$user_data[\"email\"]\n          , \"CPTAC Import: Panorama, No Data - \".$get['laboratory_abbreviation']\n          , date('l F jS, Y h:i:s A').\"\\n\\nNo data returned from Panorama for an import executed by the '\".$get['laboratory_name'].\"' laboratory. Please make sure Response Curve data is present out on Panorama. If this persists, please contact the site administrator at: \".$final_global_template_vars[\"superadmin_email_address\"].\".\"\n        );\n      echo 'No data returned from Panorama. Please make sure Response Curve data is present out on Panorama. If this persists, please <a href=\"mailto:'.$final_global_template_vars[\"superadmin_email_address\"].'\">contact the site administrator</a>.';\n      \n      write_log($get[\"import_log_id\"],'No data returned from Panorama. Please make sure Response Curve data is present out on Panorama.');\n\n      die();\n    }\n    \n   \n    // If Panorama does respond, process.\n    if($peptide_data[\"rowCount\"] > 0) {\n\n      $i = 0;\n      \n      write_log($get[\"import_log_id\"],'Preparing to pull data.');\n\n     // $peptide_data[\"rows\"] = $peptide_data[\"rowCount\"];\n      \n      /*\n       * If this is a test run, limit the record count to 5.\n       */\n\n   \n    \n      if( $app->request->get(\"test_import\") == 1 ) {\n        $subtract_amount = ($peptide_data[\"rowCount\"]-5);\n        $peptide_data[\"rows\"] = array_splice($peptide_data[\"rows\"], $subtract_amount);\n      }\n\n      ##############################\n\n       // $subtract_amount = ($peptide_data[\"rowCount\"]-1);\n       // $peptide_data[\"rows\"] = array_splice($peptide_data[\"rows\"], $subtract_amount);\n\n      ##############################\n\n      $data = array();\n      foreach($peptide_data[\"rows\"] as $row) {\n\n        // Parse the metadata for the id to query UniProt with.\n\n        // Get the UniProt ID.\n        $data[$i][\"uniprot_lookup_id\"] = false;\n\n        // Check to see if there is a \"tr\" value.\n        preg_match(\"/tr\\|(\\w*)/\", $row[\"PeptideGroupId/Label\"], $swiss_prot_label_matches_tr);\n        \n        // Check to see if there is a \"sp\" value.\n        preg_match(\"/sp\\|(\\w*)/\", $row[\"PeptideGroupId/Label\"], $swiss_prot_label_matches_sp);\n\n        // // Check to see if there is a ENSEMBL value.\n        // preg_match(\"/\\|ENSEMBL:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $ensembl_matches);\n        \n        // Check to see if there is a TREMBL value.\n        preg_match(\"/\\|TREMBL:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $trembl_matches);\n        \n        // Check to see if there is a SWISS-PROT value.\n        preg_match(\"/\\|SWISS-PROT:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $swiss_prot_matches);\n\n        if(isset($swiss_prot_label_matches_tr) && !empty($swiss_prot_label_matches_tr)) {\n          $data[$i][\"uniprot_lookup_id\"] = $swiss_prot_label_matches_tr[1];\n        }\n\t\t\t\t\n        if(isset($swiss_prot_label_matches_sp) && !empty($swiss_prot_label_matches_sp)) {\n          $data[$i][\"uniprot_lookup_id\"] = $swiss_prot_label_matches_sp[1];\n        }\n        // if(isset($ensembl_matches) && !empty($ensembl_matches)) {\n        //   $data[$i][\"uniprot_lookup_id\"] = $ensembl_matches[1];\n        // }\n        \n        if(isset($trembl_matches) && !empty($trembl_matches)) {\n          $data[$i][\"uniprot_lookup_id\"] = $trembl_matches[1];\n        }\n\t\t\t\t\n        if(isset($swiss_prot_matches) && !empty($swiss_prot_matches)) {\n          $data[$i][\"uniprot_lookup_id\"] = $swiss_prot_matches[1];\n        }\n\n\n\n        if(empty($data[$i][\"uniprot_lookup_id\"]) )\n        {\n\n          // // Check to see if there is a TREMBL value.\n          // preg_match(\"/\\|TREMBL:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $trembl_matches);\n        \n          //  // Check to see if there is a SWISS-PROT value.\n          // preg_match(\"/\\|SWISS-PROT:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $swiss_prot_matches);\n\n\n        }\n\n        write_log($get[\"import_log_id\"],'Getting Uniprot data for: '.$row[\"Sequence\"]);\n        \n        // Get the gene symbol from UniProt.\n        $uniprot = $assay->get_assay_by_uniprot_api(\n          $get[\"import_log_id\"]\n          , $data[$i][\"uniprot_lookup_id\"]\n          , $final_global_template_vars[\"uniprot_protein_api_url\"]\n          , $xml2array\n          , $final_global_template_vars[\"uniprot_regions_array\"]\n          , $row[\"Sequence\"]\n          , $row[\"PeptideGroupId/Description\"]\n          , $row[\"PeptideGroupId/Label\"]\n        );\n\n        $uniprot_result = ($uniprot)? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n        \n\n        write_log($get[\"import_log_id\"],'Uniprot data: '.$uniprot_result);\n\n        $data[$i][\"import_log_id\"] = $get[\"import_log_id\"];\n\n        if($uniprot) \n        {\n\n          $data[$i][\"gene_symbol\"] = $uniprot[\"gene_symbol\"];\n\n          // Get the modification_type from Panorama.\n          $data[$i][\"modification_type\"] = \"unmodified\";\n\n          $peptide_modification_type = $labkey->getModificationType(\n            $panorama_authentication_cookie\n            ,\"targetedms\"\n            ,\"ModificationType\"\n            ,$row[\"PeptideModifiedSequence\"]\n            ,$get['laboratory_abbreviation']\n            ,$get['celllysate_path']\n            ,'ChromatogramLibrary'\n          );\n          \n          $peptide_modification_type_result = ($peptide_modification_type) ? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n          write_log($get[\"import_log_id\"],'Getting modification type: '.$peptide_modification_type_result);\n\n\n\n          if( isset($peptide_modification_type->response) && !empty($peptide_modification_type->response) ) {\n            $modification_type = json_decode($peptide_modification_type->response,true);\n            //dump ($modification_type);\n            $modification_type['rowCount'] = isset($modification_type['rowCount']) ? $modification_type['rowCount'] : false;\n            if($modification_type['rowCount'] > 0) {\n              \n\t\t\t\t\t\t\tif(isset($modification_type['rows'][0][\"modificationType\"])) {\n                $data[$i][\"modification_type\"] = $modification_type['rows'][0][\"modificationType\"];\n              }\n\t\t\t\t\t\t\t\n              if(isset($modification_type['rows'][0][\"StructuralModId/name\"])) {\n                $data[$i][\"modification_type\"] = $modification_type['rows'][0][\"StructuralModId/name\"];\n              }\n            }\n          }\n\n          /*\n           * Query Panorama for the site of modification.\n           */\n\n          // https://daily.panoramaweb.org/labkey/query/CPTAC%20Assay%20Portal/JHU_DChan_HZhang_ZZhang/Serum_QExactive_GlycopeptideEnrichedPRM/ResponseCurve/getQuery.view?query.columns=PeptideId,PeptideId/PeptideModifiedSequence,PeptideId/Sequence,StructuralModId/Name,IndexAA,MassDiff&schemaName=targetedms&query.queryName=PeptideStructuralModification&query.PeptideId~eq=181120\n\n          // StructuralModId/Name\n\n          $returned_site_of_modification = $labkey->getSiteOfModification(\n            $panorama_authentication_cookie\n            ,\"targetedms\"\n            ,\"PeptideStructuralModification\"\n            ,$row[\"Id\"]\n            ,$get['laboratory_abbreviation']\n            ,$get['celllysate_path']\n            ,'ResponseCurve'\n          );\n\n          $returned_site_of_modification_result = ($returned_site_of_modification) ? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n          write_log($get[\"import_log_id\"],'Getting site of modification: '.$returned_site_of_modification_result);\n\n\n          // Set the \"site_of_modification_peptide\" to N/A first, then populate if data is returned by Panorama.\n          $data[$i][\"site_of_modification_peptide\"] = \"N/A\";\n\n          if( isset($returned_site_of_modification->response) && !empty($returned_site_of_modification->response) ) {\n            $site_of_modification_peptide = json_decode($returned_site_of_modification->response,true);\n            if($site_of_modification_peptide['rowCount'] > 0) {\n              $data[$i][\"site_of_modification_peptide\"] = $site_of_modification_peptide['rows'][0][\"IndexAA\"];\n            }\n          }\n\n          // Build out the rest of the data array.\n          $data[$i][\"import_log_id\"] = $get[\"import_log_id\"];\n          $data[$i][\"peptide_molecular_weight\"] = $row[\"CalcNeutralMass\"];\n          $data[$i][\"peptide_sequence\"] = $row[\"Sequence\"];\n          $data[$i][\"peptide_modified_sequence\"] = $row[\"PeptideModifiedSequence\"];\n          $data[$i][\"hydrophobicity\"] = $row[\"RtCalculatorScore\"];\n          $data[$i][\"panorama_peptide_url\"] = $row[\"_labkeyurl_Sequence\"];\n          $data[$i][\"panorama_protein_url\"] = $row[\"_labkeyurl_PeptideGroupId/Label\"];\n          $data[$i][\"peptide_start\"] = $row[\"StartIndex\"];\n          $data[$i][\"peptide_end\"] = $row[\"EndIndex\"];\n          $data[$i][\"panorama_created_date\"] = $row[\"PeptideGroupId/RunId/Created\"];\n\n        }\n        else\n        {\n\n          $data[$i][\"import_log_id\"] = $get[\"import_log_id\"];\n          $data[$i][\"peptide_molecular_weight\"] = $row[\"CalcNeutralMass\"];\n          $data[$i][\"peptide_sequence\"] = $row[\"Sequence\"];\n          $data[$i][\"peptide_modified_sequence\"] = $row[\"PeptideModifiedSequence\"];\n          $data[$i][\"hydrophobicity\"] = $row[\"RtCalculatorScore\"];\n          $data[$i][\"panorama_peptide_url\"] = $row[\"_labkeyurl_Sequence\"];\n          $data[$i][\"panorama_protein_url\"] = $row[\"_labkeyurl_PeptideGroupId/Label\"];\n          $data[$i][\"peptide_start\"] = $row[\"StartIndex\"];\n          $data[$i][\"peptide_end\"] = $row[\"EndIndex\"];\n          $data[$i][\"panorama_created_date\"] = $row[\"PeptideGroupId/RunId/Created\"];\n\n\n        }\n\n        $i++;\n\n      }\n\n      /*\n       * Loop through the data array and perform inserts.\n       */\n\n      // let's just insert protiens and peptides\n\n      write_log($get[\"import_log_id\"],'Creating initial local records');\n\n      $this_insert_row_count = 0;\n      foreach($data as $key)\n      {\n        \n        write_log($get[\"import_log_id\"],'Saving: '.$key['peptide_modified_sequence']);\n\n        $import->do_initial_inserts($key);\n        ++$this_insert_row_count;\n        \n        if( $app->request->get(\"test_import\") == 1 )\n        {  \n          if($this_insert_row_count >= 5) break;\n        }\n      }\n\n      write_log($get[\"import_log_id\"],'Initial DB write complete');\n      write_log($get[\"import_log_id\"],'Preparing to import asset data');\n\n      $this_record_count = 0;\n\n      foreach($data as $key)\n      {\n        \n        if( $key[\"uniprot_lookup_id\"] && isset($key[\"peptide_sequence\"]) )\n        {\n          /*\n          * Create the initial records in the protein and analyte_peptide tables.\n          */\n\n          //$import->create_initial_records( $key );\n          write_log($get[\"import_log_id\"],'Getting data for: '.$key[\"peptide_sequence\"]);\n\n           /*\n           * Get data from UniProt using the uniprot_lookup_id.\n           */\n\n          $uniprot_data = $assay->get_assay_by_uniprot_api(\n              $get[\"import_log_id\"]\n            , $key[\"uniprot_lookup_id\"]\n            , $final_global_template_vars[\"uniprot_protein_api_url\"]\n            , $xml2array\n            , $final_global_template_vars[\"uniprot_regions_array\"]\n            , $key[\"peptide_sequence\"]\n          );\n\n\n          write_log($get[\"import_log_id\"],'Getting Uniprot data for: '.$key[\"peptide_sequence\"]);\n\n\n          /*\n           * Get data from Entrez Gene: chromosome_start, chromosome_stop, and chromosome_number.\n           */\n\n            if( isset($uniprot_data['gene_symbol']) && ($uniprot_data['gene_symbol'] !== FALSE) )\n            {\n              \n              $import_entrez->import_entrez_gene_data(\n                $uniprot_data['gene_symbol']\n                ,$final_global_template_vars[\"entrez_api_url\"]\n                ,$xml2array\n                ,$user_data[\"email\"]\n              );\n            }\n\n            $this_gene_symbol = !empty($uniprot_data['gene_symbol']) ? $uniprot_data['gene_symbol'] : '<span class=\"import-error\">GENE SYMBOL MISSING</span>';\n            write_log($get[\"import_log_id\"],'Getting Entrez Gene data for: '.$this_gene_symbol);\n            usleep(500000);\n\n          /*\n           * Update the peptide_standard_label_type field in the database.\n           */\n        \n          // Query Panorama for the peptide_standard_label_type data.\n\n          $peptide_standard_label_type = $labkey->getPeptideIsotopeLabelModifications(\n            $panorama_authentication_cookie\n            ,$key[\"peptide_modified_sequence\"]\n            ,$get['laboratory_abbreviation']\n            ,$get['celllysate_path']\n            ,'ResponseCurve');\n\n\n          if( isset($peptide_standard_label_type->response) && !empty($peptide_standard_label_type->response) )\n          {\n            // Format into a PHP array.\n            $peptide_standard_label_type = json_decode($peptide_standard_label_type->response,true);\n            \n            // Update query.\n            if( isset($peptide_standard_label_type[\"rows\"][0][\"IsotopeModification\"]) && !empty($peptide_standard_label_type[\"rows\"][0][\"IsotopeModification\"]) )\n            {\n              $import->import_peptide_standard_label_type($key[\"peptide_sequence\"],$peptide_standard_label_type[\"rows\"][0][\"IsotopeModification\"]);\n            }\n\n          }\n          \n\n\n          if( isset($uniprot_data['protein_name']) )\n          {\n            /*\n             * Update the protein table in the database with data from UniProt.\n             */\n            $import_uniprot_data->import_uniprot_data( $uniprot_data );\n            \n            /*\n             * Insert splice junctions uniprot_data.\n             */\n            $import_uniprot_data->import_uniprot_splice_junctions( $uniprot_data[\"splice_junctions\"], $uniprot_data[\"uniprot_ac\"] );\n            \n            /*\n             * Insert SNPs data.\n             */\n            $import_uniprot_data->import_uniprot_snps( $uniprot_data[\"snps\"], $uniprot_data[\"uniprot_ac\"] );\n            \n            /*\n             * Insert isoforms data.\n             */\n            $import_uniprot_data->import_uniprot_isoforms( $uniprot_data[\"isoforms\"], $uniprot_data[\"uniprot_ac\"] );\n          }\n\n\n\n\n\n        } else {\n          // If UniProt lookup is unsuccessful, send an error report to the CPTAC Assay Portal Admin and the end-user.\n          $peptide_sequence = isset($key[\"peptide_sequence\"]) ? $key[\"peptide_sequence\"] : \"'unknown sequence'\";\n          mail(\n              $final_global_template_vars[\"superadmin_email_address\"].\",\".$user_data[\"email\"]\n            , \"CPTAC Import: UniProt lookup unsuccessful for '\".$peptide_sequence.\"'\"\n            , date('l F jS, Y h:i:s A').\"\\n\\nExecuted by: \".$get['laboratory_name'].\"\\n\\nError message: UniProt lookup unsuccessful for '\".$peptide_sequence.\"'\"\n          );\n        }\n\n      }\n\n    }\n\n  \n  \n\n    /*\n     * Check for missing UniProt data and attempt to import again.\n     */\n\n    write_log($get[\"import_log_id\"],'Running Uniprot fix');\n\n    $url = \"https://\".$_SERVER[\"SERVER_NAME\"].\"/assays_import/fix_uniprot_import/\".$get[\"import_log_id\"];\n    \n    $ch = curl_init($url);\n    curl_setopt($ch, CURLINFO_HEADER_OUT, 0);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_FRESH_CONNECT, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_exec( $ch );\n    curl_close( $ch );\n\n\n\n\n\n\n    /*\n     * Delete the Panorama cookie file from the filesystem.\n     */\n\n    if(is_file($panorama_authentication_cookie)) {\n      unlink($panorama_authentication_cookie);\n    }\n\n  } // Test mode ends.\n\n  /*\n   * Send an email to the site admin to notify that the executed import has finished.\n   */\n\n  $email_subject = \"CPTAC Assay Portal: Main Import Finished, \".date('F j, Y h:i:s A').\" - \".$get['laboratory_name'];\n  $headers = $final_global_template_vars['message_parts']['headers'];\n  $headers .= 'From: CPTAC Assay Portal <noreply@'.$_SERVER[\"SERVER_NAME\"].'>' . \"\\r\\n\";\n  $body_message = '\n    <h1>CPTAC Assay Portal: Main Import Finished - '.$get['laboratory_name'].'</h1>'.\n    $final_global_template_vars['message_parts']['body_connector']\n    .'<p><strong>Date/Time:</strong> '.date('l, F jS, Y \\a\\t h:i:s A').'</p>\n    <p>An import executed by the \"'.$get['laboratory_name'].'\" laboratory has finished. The Panorama images and data import has been executed.</p>\n  ';\n  $message = $final_global_template_vars['message_parts']['body_header'].$body_message.$final_global_template_vars['message_parts']['body_footer'];\n\n  // Send the email\n  mail( $final_global_template_vars[\"superadmin_email_address\"], $email_subject, $message, $headers );\n\n  /* \n   * Import From Panorama Into Portal Tables:\n   *\n   * panorama_chromatogram_images\n   * panorama_response_curve_images\n   * panorama_validation_sample_images\n   * panorama_validation_sample_data\n   * lod_loq_comparison\n   * response_curves_data\n   *\n   */\n\n  $test_import = ( $app->request->get(\"test_import\") == 1 ) ? \"&test_import=1\" : \"\";\n\n  $url = \"https://\".$_SERVER[\"SERVER_NAME\"].\"/assays_import/import_panorama_data/?import_log_id=\".$get[\"import_log_id\"]\n    .\"&imports_executed_log_id=\".$imports_executed_log_id\n    .\"&account_id=\".$log_data[\"executed_by_user_id\"]\n    .$test_import\n    .\"&uniquehash=\".uniqid();\n\n\t\t\n  $ch = curl_init( $url );\n  curl_setopt($ch, CURLINFO_HEADER_OUT, 0);\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);\n  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n  curl_setopt($ch, CURLOPT_FRESH_CONNECT, true);\n  curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n  curl_exec( $ch );\n  curl_close( $ch );\n\n  /* \n   * Output Message\n   */\n\n  // echo \"\\n\\n\".'Import ended on '.date('l jS \\of F Y h:i:s A').'. Panorama data has been successfully imported.'.\"\\n\\n\";\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":6,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":138,"column":38},"end":{"row":138,"column":52}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":3,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_protein_peptide.php","digestWhenLastPersisted":"635bd58ea82d0e7008abf359a07a85767d1a1ece","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":28,"softTabs":true,"firstVisibleScreenRow":134,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":29,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_protein_peptide.php","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"atom://find-and-replace/project-results","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-php","language-html","language-sql","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"getAllPeptides","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":[],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_protein_peptide.php":1454211053437},"metrics":{"sessionLength":108569},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/kristennice/Desktop/cptac-docker/src/assays_import":{"isExpanded":true,"entries":{"config":{"isExpanded":false,"entries":{}},"controllers":{"isExpanded":false,"entries":{}},"library":{"isExpanded":false,"entries":{}},"models":{"isExpanded":true,"entries":{}},"templates":{"isExpanded":false,"entries":{}}}}},"hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}