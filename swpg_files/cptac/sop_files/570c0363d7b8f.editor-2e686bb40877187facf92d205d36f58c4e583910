{"version":1,"windowDimensions":{"x":441,"y":23,"width":1534,"height":817,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/kristennice/Desktop/cptac-docker/src"],"buffers":[{"id":"c61ba360121454fb3acc0789b04e878c","text":"<?php\nclass Assay\n{\n  private $session_key = \"\";\n  public $db;\n\n  public function __construct($db_connection=false,$session_key=false) {\n    if($db_connection && is_object($db_connection)) {\n      $this->db = $db_connection;\n    }\n    global $final_global_template_vars;\n    $this->final_global_template_vars = $final_global_template_vars;\n    $this->session_key = $session_key;\n  }\n\n\n  public function browse_assays(\n    $sort_field = false\n    ,$sort_order = 'DESC'\n    ,$start_record = 0\n    ,$stop_record = 20\n    ,$search = false\n    ,$sortable_fields = false\n    ,$side_bar_filter = array())\n  {\n\n    $sort = \"\";\n    $search_sql = \" WHERE 1 = 1 \";\n    $pdo_params = array();\n    $limit_sql = \" LIMIT {$start_record}, {$stop_record} \";\n    $protein_interactions_select = '';\n    $protein_interactions_join = '';\n\n    if($sort_field){\n      switch($sort_field) {\n        case 'last_modified':\n          $sort = \" ORDER BY group.last_modified, analyte_peptide.peptide_sequence {$sort_order} \";\n          break;\n        default:\n          $sort = \" ORDER BY {$sort_field}, analyte_peptide.peptide_sequence {$sort_order} \";\n      }\n    }\n\n    if( $search ) {\n      $seach_stmt = array();\n      foreach($this->final_global_template_vars['datatables'][0]['search_fields'] as $key => $value) {\n        $pdo_params[] = '%'.$search.'%';\n        $seach_stmt[] = $value.\" LIKE ?\"; // '%\".$search.\"%'\n      }\n      $search_sql = \" WHERE (\" . implode(\" \\nOR \",$seach_stmt).\")\";\n    }\n\n    $side_bar_filter_where_sql = \"\";\n    $side_bar_filter_where_array = array();\n    if(!empty($side_bar_filter)){\n      foreach($side_bar_filter as $sidebar_key => $single_sidebar_filter){\n        if(!empty($single_sidebar_filter)){\n          switch($sidebar_key){\n            case \"species_filter\":\n              $placeholder = array();\n              foreach($single_sidebar_filter as $single_filter_value){\n                $placeholder[] = \"?\";\n                $pdo_params[] = $single_filter_value;\n              }\n              $side_bar_filter_where_array[\"species_filter\"] = \" AND protein_species.protein_species_id IN (\" . implode(\",\",$placeholder) . \") \";\n            break;\n            // case \"gene_ontology_filter\":\n            //   $placeholder = array();\n            //   foreach($single_sidebar_filter as $single_filter_value){\n            //     $placeholder[] = \"?\";\n            //     $pdo_params[] = $single_filter_value;\n            //   }\n            //   $side_bar_filter_where_array[\"gene_ontology_filter\"] = \" AND protein.gene_ontology_id IN (\" . implode(\",\",$placeholder) . \") \";\n            // break;\n\n            case \"kegg_pathways_filter\":\n              $placeholder = array();\n              if($single_sidebar_filter[0] != NULL) {\n                foreach($single_sidebar_filter as $single_filter_value) {\n                  foreach($single_filter_value as $single_filter_val) {\n                    $kegg_uniprot_ids = $this->get_uniprot_ids_from_kegg( (int)$single_filter_val );\n                    if($kegg_uniprot_ids) {\n                      foreach($kegg_uniprot_ids as $kegg_uniprot_id) {\n                        $placeholder[] = \"?\";\n                        $pdo_params[] = $kegg_uniprot_id[\"uniprot_accession_id\"];\n                      }\n                    }\n                  }\n                }\n                $side_bar_filter_having_array[\"kegg_pathways_filter\"] = \" AND protein.uniprot_accession_id IN (\" . implode(\",\",$placeholder) . \") \";\n              }\n            break;\n\n            case \"protein_interactions_filter\":\n              $placeholder = array();\n              foreach($single_sidebar_filter as $single_filter_value){\n                $genes = $this->get_protein_interactions( $single_filter_value );\n                foreach($genes as $gene) {\n                  $placeholder[] = \"?\";\n                  $pdo_params[] = $gene;\n                }\n              }\n              $side_bar_filter_having_array[\"protein_interactions_filter\"] = \" AND protein.gene_symbol IN (\" . implode(\",\",$placeholder) . \") \";\n              $protein_interactions_select = ' , external_data.protein_interactions_biogrid.official_symbol_interactor_a ';\n              $protein_interactions_join = ' LEFT JOIN external_data.protein_interactions_biogrid ON external_data.protein_interactions_biogrid.official_symbol_interactor_a = protein.gene_symbol ';\n            break;\n            case \"cromosome_filter\":\n              $placeholder = array();\n              foreach($single_sidebar_filter as $single_filter_value){\n                $placeholder[] = \"?\";\n                $pdo_params[] = (int)$single_filter_value;\n              }\n              $side_bar_filter_having_array[\"cromosome_filter\"] = \" AND protein.chromosome_number IN (\" . implode(\",\",$placeholder) . \") \";\n            break;\n            case \"cromosomal_location_start_filter\":\n                $single_sidebar_filter_int = (int)$single_sidebar_filter;\n                $side_bar_filter_having_array[\"cromosomal_location_start_filter\"] = \" AND ( protein.chromosome_start <= {$single_sidebar_filter_int} )\";\n            break;\n            break;\n            case \"cromosomal_location_stop_filter\":\n                $single_sidebar_filter_int = (int)$single_sidebar_filter;\n                $side_bar_filter_having_array[\"cromosomal_location_stop_filter\"] = \" AND ( protein.chromosome_stop >= {$single_sidebar_filter_int} ) \";\n            break;\n            case \"assay_type_filter\":\n              $placeholder = array();\n              foreach($single_sidebar_filter as $single_filter_value){\n                $placeholder[] = \"?\";\n                $pdo_params[] = $single_filter_value;\n              }\n              $side_bar_filter_having_array[\"assay_type_filter\"] = \" AND assay_parameters_new.assay_type IN (\" . implode(\",\",$placeholder) . \") \";\n            break;\n            // case \"reagent_type_filter\":\n            //   $placeholder = array();\n            //   foreach($single_sidebar_filter as $single_filter_value){\n            //     $placeholder[] = \"?\";\n            //     $pdo_params[] = $single_filter_value;\n            //   }\n            //   $side_bar_filter_where_array[\"reagent_type_filter\"] = \" AND assay_parameters_new.assay_type IN (\" . implode(\",\",$placeholder) . \") \";\n            // break;\n          }\n        }\n      }\n    }\n\n\n    if(!empty($side_bar_filter_where_array)){\n      $side_bar_filter_where_sql = implode(\"\", $side_bar_filter_where_array);\n    }\n    $side_bar_filter_having_sql = \"\";\n    if(!empty($side_bar_filter_having_array)){\n      $side_bar_filter_having_sql = implode(\"\", $side_bar_filter_having_array);\n    }\n\n\n    $comparison_array = array(\n      \"gt\" => \" > \"\n      ,\"gt_or_eq\" => \" >= \"\n      ,\"lt\" => \"<\"\n      ,\"lt_or_eq\" => \" <= \"\n      ,\"equals\" => \" = \"\n      ,\"contains\" => \"contains\"\n      ,\"not_contain\" => \"not_contain\"\n      ,\"start_with\" => \"start_with\"\n      ,\"end_with\" => \"end_with\"\n    );\n\n    $class_icon_plus_sign = '\"icon-collapse-alt\"';\n\n    $sql = \"SELECT SQL_CALC_FOUND_ROWS\n      protein.protein_id as manage\n      {$protein_interactions_select}\n      , kegg_uniprot_map.uniprot_accession_id as kegg_uniprot_accession_id\n      , protein.protein_id\n      , protein.cptac_id\n      , protein.gene_symbol as gene_symbol\n      , CONCAT('<i class=', {$class_icon_plus_sign}, '></i> ', protein.gene_symbol,' - UniProt Accession ID: ',protein.uniprot_accession_id) as gene\n      , protein.chromosome_number\n      , protein.chromosome_start\n      , protein.chromosome_stop\n      , protein.uniprot_accession_id as uniprot\n      , protein.uniprot_protein_name\n      , protein.protein_molecular_weight as protein_molecular_weight\n      , protein.homology\n      , assay_parameters_new.protein_species_label as protein_species_label\n      , analyte_peptide.peptide_sequence as peptide_sequence\n      , analyte_peptide.peptide_start as peptide_start\n      , analyte_peptide.peptide_end as peptide_end\n      , analyte_peptide.modification_type as modification\n      , (CASE WHEN analyte_peptide.site_of_modification_protein IS NULL THEN CONCAT('N/A') END) AS site_of_modification_protein\n      , assay_types.label as assay_type\n      , peptide_standard_purity_types.type as peptide_standard_purity\n      , peptide_standard_purity_types.peptide_standard_purity_types_id\n      , assay_parameters_new.instrument\n      , (CASE WHEN assay_parameters_new.endogenous_detected = '0' THEN CONCAT('no') ELSE CONCAT('yes') END) AS endogenous_detected\n      , assay_parameters_new.matrix\n      , analyte_peptide.hydrophobicity as hydrophobicity\n      -- , CONCAT(FORMAT( lod_loq_comparison.LOD,2 )) as lod\n      -- , CONCAT(FORMAT( lod_loq_comparison.LLOQ,2 )) as lloq\n      , group.name as laboratory_name\n      , panorama_validation_sample_data.med_total_CV\n      , analyte_peptide.analyte_peptide_id AS DT_RowId\n      FROM analyte_peptide\n      LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id\n      LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN peptide_standard_purity_types ON peptide_standard_purity_types.peptide_standard_purity_types_id = assay_parameters_new.peptide_standard_purity_types_id\n      LEFT JOIN assay_types on assay_types.assay_types_id = assay_parameters_new.assay_types_id\n      {$protein_interactions_join}\n      LEFT JOIN kegg_uniprot_map on kegg_uniprot_map.uniprot_accession_id = protein.uniprot_accession_id\n      -- LEFT JOIN lod_loq_comparison on lod_loq_comparison.analyte_peptide_id = analyte_peptide.analyte_peptide_id\n      LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n      LEFT JOIN panorama_validation_sample_data on panorama_validation_sample_data.analyte_peptide_id = analyte_peptide.analyte_peptide_id\n      {$search_sql}\n      {$side_bar_filter_where_sql}\n      AND protein.approval_status = 1\n      GROUP BY analyte_peptide.analyte_peptide_id\n      HAVING 1 = 1\n      {$side_bar_filter_having_sql}\n      {$sort}\n      {$limit_sql}\";\n    $statement = $this->db->prepare( $sql );\n    $statement->execute( $pdo_params );\n\n   \n    $data[\"aaData\"] = $statement->fetchAll(PDO::FETCH_ASSOC);\n\n    $statement = $this->db->prepare(\"SELECT FOUND_ROWS()\");\n    $statement->execute();\n    $count = $statement->fetch(PDO::FETCH_ASSOC);\n    $data[\"iTotalRecords\"] = $count[\"FOUND_ROWS()\"];\n    $data[\"iTotalDisplayRecords\"] = $count[\"FOUND_ROWS()\"];\n    return $data;\n  }\n\n  /*\n   * to be a successful api call, it requires the following values to be present:\n   * HGNC gene ID\n   * primary gene symbol\n   * uniprot ac\n   * source_taxon_id\n   * protein name\n   */\n  public function get_assay_by_uniprot_api($import_log_id = false,$uniprot_id = false,$uniprot_api_url,$xml2array,$uniprot_regions_array,$peptide_sequence = false,$PeptideGroupId_Description = false,$PeptideGroupId_Label = false)\n  {\n\n    $data = false;\n\n    // If the UniProt ID is missing, send an email to the super admin and kill the import.\n    if(!$uniprot_id) {\n\n      // // Send an email to the super admin.\n      // $email_body = 'Date: '.date('F j, Y h:i:s A').\"\\n\\n\".\n      //   'UniProt ID Missing'.\"\\n\\n\".\n      //   'Sequence: '.$peptide_sequence.\"\\n\\n\".\n      //   'PeptideGroupId/Description: '.$PeptideGroupId_Description.\"\\n\\n\".\n      //   'PeptideGroupId/Label: '.$PeptideGroupId_Label.\"\\n\\n\".\n      //   'Go look at preg_match() functions in: /assays_import/controllers/import_panorama_protein_peptide.php'.\"\\n\\n\".\n      //   'Labeled with the comment: \"// Get the UniProt ID\"';\n      // mail($this->final_global_template_vars[\"superadmin_email_address\"],'CPTAC Import: UniProt ID Missing - '.date('F j, Y h:i:s A'),$email_body);\n      // // Kill the import.\n      // die();\n\n      // If the UniProt ID is missing, log it in the database.\n      $this->log_missing_uniprot_ids(\n         $import_log_id\n        ,$peptide_sequence\n        ,$PeptideGroupId_Description\n        ,$PeptideGroupId_Label\n      );\n\n    } else {\n\n      // Check to see if UniProt is responding with \"HTTP/1.1 200 OK\" or \"HTTP/1.1 301 Moved Permanently\".\n      $uniprot_response = $this->checkUrl( $uniprot_api_url . $uniprot_id . \".xml\" );\n\n      if(($uniprot_response[\"headers\"][0] != \"HTTP/1.1 200 OK\") && ($uniprot_response[\"headers\"][0] != \"HTTP/1.1 301 Moved Permanently\")) {\n        // Send an email to the super admin.\n        mail(\n            $this->final_global_template_vars[\"superadmin_email_address\"]\n          , \"CPTAC Import: UniProt not responding, \".date('F j, Y h:i:s A')\n          , \"Date: \".date('l F jS, Y h:i:s A').\"\\n\\nURL: \".$uniprot_api_url.$uniprot_id.\".xml\".\"\\n\\ncURL Error Message: \".$uniprot_response[\"curl_error\"]\n          , 'From: CPTAC Assay Portal <noreply@'.$_SERVER['SERVER_NAME'].'>' . \"\\r\\n\"\n        );\n        // Kill the import script.\n        //die(\"UniProt is not responding.\");\n      }\n\n      if(!empty($uniprot_response[\"content\"])){\n\n        $uniprot_array = $xml2array->createArray( $uniprot_response[\"content\"] );\n\n        if(!empty($uniprot_array)\n        && !empty($uniprot_array[\"uniprot\"])\n        && !empty($uniprot_array[\"uniprot\"][\"entry\"])) {\n\n          $index = isset($uniprot_array[\"uniprot\"][\"entry\"][\"feature\"]) \n            ? $uniprot_array[\"uniprot\"][\"entry\"][\"feature\"] \n            : $uniprot_array[\"uniprot\"][\"entry\"];\n\n            // Get the Splice Junctions data\n            $data[\"splice_junctions\"] = false;\n            for($i = 0; $i < count($index); $i++) {\n              if ( isset($index[$i][\"@attributes\"][\"type\"]) \n                    && in_array($index[$i][\"@attributes\"][\"type\"], $uniprot_regions_array) ) {\n                $data[\"splice_junctions\"][$i][\"start\"] = $index[$i][\"location\"][\"begin\"][\"@attributes\"][\"position\"];\n                $data[\"splice_junctions\"][$i][\"stop\"] = $index[$i][\"location\"][\"end\"][\"@attributes\"][\"position\"];\n                $data[\"splice_junctions\"][$i][\"type\"] = $index[$i][\"@attributes\"][\"type\"];\n                $data[\"splice_junctions\"][$i][\"description\"] = isset($index[$i][\"@attributes\"][\"description\"])\n                  ? $index[$i][\"@attributes\"][\"description\"] : false;\n                $data[\"splice_junctions\"][$i][\"status\"] = isset($index[$i][\"@attributes\"][\"status\"])\n                  ? $index[$i][\"@attributes\"][\"status\"] : false;\n              }\n            }\n            // Reindex the array\n            if($data[\"splice_junctions\"]) {\n              $data[\"splice_junctions\"] = array_values($data[\"splice_junctions\"]);\n            }\n\n            // Get the SNPs data\n            $data[\"snps\"] = false;\n            for($i = 0; $i < count($index); $i++) {\n              if ( isset($index[$i][\"location\"][\"position\"][\"@attributes\"][\"position\"]) ) {\n                if($index[$i][\"@attributes\"][\"type\"] == \"sequence variant\") {\n                  $data[\"snps\"][$i][\"position\"] = $index[$i][\"location\"][\"position\"][\"@attributes\"][\"position\"];\n                  $data[\"snps\"][$i][\"original\"] = isset($index[$i][\"original\"]) ? $index[$i][\"original\"] : \"\";\n                  $data[\"snps\"][$i][\"variation\"] = isset($index[$i][\"variation\"]) ? $index[$i][\"variation\"] : \"\";\n                }\n              }\n            }\n            // Reindex the array\n            if($data[\"snps\"]) {\n              $data[\"snps\"] = array_values($data[\"snps\"]);\n            }\n\n\n            // Get the isoforms data\n            $data['isoforms'] = false;\n            if( isset($uniprot_array[\"uniprot\"][\"entry\"][\"comment\"]) ) {\n              for($i = 0; $i < count($uniprot_array[\"uniprot\"][\"entry\"][\"comment\"]); $i++) {\n                if ( isset($uniprot_array[\"uniprot\"][\"entry\"][\"comment\"][$i]['isoform']) ) {\n                  $data['isoforms'] = $uniprot_array[\"uniprot\"][\"entry\"][\"comment\"][$i]['isoform'];\n                }\n              }\n            }\n            // Get and parse each fasta file and then get the sequence and length of each isoform sequence\n            if( $data['isoforms'] && !empty($data['isoforms']) ) {\n              $i = 0;\n              foreach($data['isoforms'] as $isoform) {\n                if( $isoform['id'] && !empty($isoform['id']) && !is_array($isoform['id']) ) {\n\n                  // Create a stream\n                  $opts = array(\n                    'http'=>array(\n                      'method'=>\"GET\",\n                      'header' => \"User-Agent:assays.cancer.gov/1.0\\r\\n\",\n                      'timeout' => 10\n                    )\n                  );\n                  $context = stream_context_create($opts);\n\n                  $isoform_file = @file_get_contents($uniprot_api_url . $isoform['id'] . \".fasta\", false, $context);\n\n                    ##############\n                   \n                    ###############\n\n\n\n\n\n                  $isoform_parts = explode(\"\\n\",$isoform_file);\n                  array_shift($isoform_parts);\n                  $isoform_sequence = implode('',$isoform_parts);\n                  $isoform_sequence = preg_replace(\"/[[:cntrl:]]/\", \"\", $isoform_sequence);\n                  $data['isoforms'][$i]['sequence'] = $isoform_sequence;\n                  $data['isoforms'][$i]['sequence_length'] = strlen($isoform_sequence);\n                }\n                $i++;\n              }\n              // Remove the first 'canonical' isoform\n              array_shift($data['isoforms']);\n            }\n\n            // Parse out the gene symbol\n            $gene_name_data = !empty($uniprot_array[\"uniprot\"][\"entry\"][\"gene\"][\"name\"]) \n              ? $uniprot_array[\"uniprot\"][\"entry\"][\"gene\"][\"name\"] \n              : false;\n            if(is_array($gene_name_data) && empty($gene_name_data[0])){\n              $gene_name_data = array($gene_name_data); //freakin uniprot returning differently formatted data\n            }\n\n            $data[\"gene_synonym\"] = array();\n            if($gene_name_data) {\n              foreach($gene_name_data as $single_gene_data){\n                if(!empty($single_gene_data[\"@attributes\"]) && !empty($single_gene_data[\"@attributes\"][\"type\"]) && !empty($single_gene_data[\"@value\"])){\n                  if($single_gene_data[\"@attributes\"][\"type\"] == \"primary\"){\n                    $data[\"gene_symbol\"] = $single_gene_data[\"@value\"];\n                  }elseif($single_gene_data[\"@attributes\"][\"type\"] == \"synonym\"){\n                    $data[\"gene_synonym\"][] = $single_gene_data[\"@value\"];\n                  }\n                }\n              }\n            }\n\n            if(empty($data[\"gene_symbol\"])) {\n              $data[\"gene_symbol\"] = false;\n            }\n\n            // Parse out gene id\n            foreach($uniprot_array[\"uniprot\"][\"entry\"][\"dbReference\"] as $single_property){\n              if(!empty($single_property[\"@attributes\"]) && !empty($single_property[\"@attributes\"][\"type\"]) && !empty($single_property[\"@attributes\"][\"id\"])){\n                if($single_property[\"@attributes\"][\"type\"] == \"HGNC\"){\n                  $gene_id_array = explode(\":\",$single_property[\"@attributes\"][\"id\"]);\n                  $data[\"hgnc_gene_id\"] = (!empty($gene_id_array[1])) ? $gene_id_array[1] : false;\n                }\n              }\n            }\n            if(empty($data[\"hgnc_gene_id\"])){\n              //return false;\n            }\n\n            $data[\"uniprot_ac\"] = $uniprot_id;\n            $data[\"uniprot_kb\"] = isset($uniprot_array[\"uniprot\"][\"entry\"][\"name\"])\n              ? $uniprot_array[\"uniprot\"][\"entry\"][\"name\"] : \"\";\n\n            // So many ways UniProt returns the protein's full name, will we ever get to the bottom of it?\n            if(isset($uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"recommendedName\"][\"fullName\"])) {\n              $data[\"protein_name\"] = $uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"recommendedName\"][\"fullName\"];\n            }\n            if(isset($uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"submittedName\"][\"fullName\"]) &&\n              !is_array($uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"submittedName\"][\"fullName\"])) {\n              $data[\"protein_name\"] = $uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"submittedName\"][\"fullName\"];\n            }\n            if(isset($uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"submittedName\"][\"fullName\"]) &&\n               is_array($uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"submittedName\"][\"fullName\"])) {\n              $data[\"protein_name\"] = $uniprot_array[\"uniprot\"][\"entry\"][\"protein\"][\"submittedName\"][\"fullName\"][\"@value\"];\n            }\n\n            if($uniprot_array[\"uniprot\"][\"entry\"][\"organism\"][\"dbReference\"][\"@attributes\"][\"type\"] == \"NCBI Taxonomy\"){\n              $data[\"source_taxon_id\"] = $uniprot_array[\"uniprot\"][\"entry\"][\"organism\"][\"dbReference\"][\"@attributes\"][\"id\"];\n            }\n            if(empty($data[\"source_taxon_id\"])){\n              //return false;\n            }\n\n            if(!empty($uniprot_array[\"uniprot\"][\"entry\"][\"sequence\"]) && !empty($uniprot_array[\"uniprot\"][\"entry\"][\"sequence\"][\"@value\"])){\n              $data[\"sequence\"] = $uniprot_array[\"uniprot\"][\"entry\"][\"sequence\"][\"@value\"];\n              $data[\"sequence_raw\"] = preg_replace(array(\"/\\r\\n/\", \"/\\n/\"),\"\",$data['sequence']);\n              $data[\"sequence_length\"] = $uniprot_array[\"uniprot\"][\"entry\"][\"sequence\"][\"@attributes\"][\"length\"];\n              $data[\"mass\"] = $uniprot_array[\"uniprot\"][\"entry\"][\"sequence\"][\"@attributes\"][\"mass\"];\n              $data[\"peptide_sequence\"] = $peptide_sequence;\n              // In case Panorama data returned no peptide_start and peptide_end,\n              // calculate the start and end of the peptide sequence in relation to the full sequence.\n              if($peptide_sequence) {\n                $peptide_start = strpos($data[\"sequence_raw\"], $peptide_sequence);\n                $data[\"peptide_start\"] = ($peptide_start + 1);\n                $data[\"peptide_end\"] = $peptide_start + strlen($peptide_sequence);\n              }\n            }\n\n        }\n      }\n\n    }\n\n    return $data;\n  }\n\n\n  public function log_missing_uniprot_ids(\n     $import_log_id\n    ,$sequence\n    ,$PeptideGroupId_Description\n    ,$PeptideGroupId_Label\n  ) {\n    $statement = $this->db->prepare(\"\n      INSERT INTO missing_uniprot_ids\n        (import_log_id, sequence, PeptideGroupId_Description, PeptideGroupId_Label, created_date )\n      VALUES ( :import_log_id, :sequence, :PeptideGroupId_Description, :PeptideGroupId_Label, NOW() )\");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->bindValue(\":sequence\", $sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":PeptideGroupId_Description\", $PeptideGroupId_Description, PDO::PARAM_STR);\n    $statement->bindValue(\":PeptideGroupId_Label\", $PeptideGroupId_Label, PDO::PARAM_STR);\n    $statement->execute();\n\n  }\n\n\n  public function checkUrl( $url ) {\n\n    /* \n     * 2014-12-04\n     * file_get_contents sucks for http requests.\n     * Do it the right way, and use cURL.\n     * $content = file_get_contents($url, false, $context);\n     */\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_VERBOSE, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 1);\n    $response = curl_exec($ch);\n    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    $header = substr($response, 0, $header_size);\n    $body = substr($response, $header_size);\n    $http_response_header = http_parse_headers($header);\n\n    if($response === FALSE) {\n      return array(\n        'headers' => false,\n        'content' => false,\n        'curl_error' => curl_error($ch)\n      );\n    } else {\n      return array(\n        'headers' => $http_response_header,\n        'content' => $body,\n        'curl_error' => false\n      );\n    }\n    \n  }\n\n\n  public function get_entrez_gene_data( $gene_symbol, $entrez_api_url, $xml2array ) {\n\n    // References\n    // http://www.ncbi.nlm.nih.gov/gene/2064\n    // http://www.ncbi.nlm.nih.gov/books/NBK25500/#chapter1.ESearch\n\n    // Get the gene record\n    // http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=gene&term=ERBB2[gene]+AND+Homo+sapiens[Organism]\n\n    // Use the returned id to query for the full info of the target gene\n    // http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=gene&id=2064&retmode=xml\n\n    $data = false;\n    $entrez_gene_id = false;\n\n    $entrez_gene_query = @file_get_contents($entrez_api_url.'esearch.fcgi?db=gene&term='.$gene_symbol.'[gene]+AND+Homo+sapiens[Organism]');\n\n    if( !empty($entrez_gene_query) ) {\n      $entrez_gene_query_array = $xml2array->createArray($entrez_gene_query);\n      // If an array of \"Id\"s is returned, match the returned gene name with the intended local target gene name\n      if( !isset($entrez_gene_query_array[\"eSearchResult\"][\"IdList\"][\"Id\"])) return;\n      \n      if( is_array($entrez_gene_query_array[\"eSearchResult\"][\"IdList\"][\"Id\"]) ) {\n        foreach($entrez_gene_query_array[\"eSearchResult\"][\"IdList\"][\"Id\"] as $entrez_gene_id) {\n          $gene_data = @file_get_contents($entrez_api_url.'esummary.fcgi?db=gene&id='.$entrez_gene_id.'&retmode=xml');\n          if( !empty($gene_data) ) {\n            $gene_data_array = $xml2array->createArray( $gene_data );\n            if( $gene_data_array ) {\n              $returned_gene_symbol = $gene_data_array[\"eSummaryResult\"][\"DocSum\"][\"Item\"][0][\"@value\"];\n              if( $returned_gene_symbol == $gene_symbol ) {\n                $entrez_gene_id = $gene_data_array[\"eSummaryResult\"][\"DocSum\"][\"Id\"];\n              }\n            }\n          }\n        }\n      } else {\n        // If an array of IDs is not returned, then just use the \"Id\"\n        $entrez_gene_id = $entrez_gene_query_array[\"eSearchResult\"][\"IdList\"][\"Id\"];\n      }\n\n      $all_gene_data = @file_get_contents($entrez_api_url.'esummary.fcgi?db=gene&id='.$entrez_gene_id.'&retmode=xml');\n\n      if(!empty($all_gene_data)){\n        $gene_data_array = $xml2array->createArray( $all_gene_data );\n        if(!empty($gene_data_array[\"eSummaryResult\"][\"DocSum\"][\"Item\"])) {\n          foreach($gene_data_array[\"eSummaryResult\"][\"DocSum\"][\"Item\"] as $item) {\n            // Get gene aliases\n            if($item[\"@attributes\"][\"Name\"] == \"OtherAliases\") {\n              $data[\"gene_synonyms\"] = $item[\"@value\"];\n              $data[\"entrez_gene_id\"] = $entrez_gene_id;\n            }\n          }\n        }\n      }\n\n    }\n\n    return $data;\n  }\n\n\n  public function formatSequenceHTML( $sequence = false, $peptide_sequence_array = false, $assay_data = array() )\n  {\n    if(empty($sequence)){\n      return false;\n    }\n    $increment = 10;\n    $columns = 5; // dynamic?\n    $char_count = 0;\n    $sequence_chunk = array();\n    $chunk = array();\n    $sequence = chop($sequence);\n    $sequence = preg_replace(array(\"/\\r\\n/\", \"/\\n/\",\"/\\s\\s+/\"),\"\",$sequence);\n    $sequence = str_split($sequence);\n\n    // 20150715 lossm\n    // create a pop-up menu to support multiple/duplicate sequences\n    $seq_array = array();\n    foreach($peptide_sequence_array as $seq) $seq_array[] = $seq['peptide_sequence'];\n    $sequence_counts = array_count_values($seq_array);\n\n    \n\n    $pop_up_menu_output = array();\n    $close_div = '<button type=\"button\" rel=\"tooltip\" title=\"Close&nbsp;Details\" class=\"close\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>';\n    \n    foreach($peptide_sequence_array as $start_end) {\n\n\n      // HACK! ($start_end['start']-1) and ($start_end['end']-1) HACK!\n      // Had to do this after CPTAC Working Group noticed that the start and end values were 1 off (less), so...\n      // data was modified in the database (increased every value by 1), then red sequences were off\n      \n\n      $pop_up_menu = false;\n      for( $i = ($start_end['start']-1); $i <= ($start_end['end']-1); $i++ ) {\n\n        // create a pop-up menu to support multiple/duplicate sequences\n        if($sequence_counts[$start_end['peptide_sequence']] > 1)\n        {\n            \n         \n\n            $pop_up_menu = array();\n            foreach($peptide_sequence_array as $pop_up_data)\n            {\n              if($pop_up_data['peptide_sequence'] == $start_end['peptide_sequence'])\n              {\n                $pop_up_menu[] = 'CPTAC-'.$pop_up_data['id'].': View additional <span class=\"peptide_detail_link '.$pop_up_data['peptide_sequence'].'-'.$pop_up_data['id'].'\">'.$pop_up_data['peptide_modified_sequence'].'</span> data<br/>';\n              }\n            }\n            $pop_up_menu_output[$start_end['peptide_sequence']] = '<div style=\"display:none;\" class=\"sequence_table_shadow detail-modal all-details-'.$start_end['peptide_sequence'].'\">'.$close_div.implode(\"\\n\",$pop_up_menu).'</div>';\n        }\n        else\n        {\n          $pop_up_menu_output[$start_end['peptide_sequence']] = '<div style=\"display:none;\" class=\"sequence_table_shadow detail-modal all-details-'.$start_end['peptide_sequence'].'\">'.$close_div.'CPTAC-'.$start_end['id'].': View additional <span class=\"peptide_detail_link '.$start_end['peptide_sequence'].'-'.$start_end['id'].'\">'.$start_end['peptide_modified_sequence'].'</span> data</div>';\n        }\n\n        // class=\"'.$start_end['peptide_sequence'].'-'.$start_end['id'].'\" rel=\"tooltip\" title=\"\"\n        $sequence[$i] = '<span class=\"peptide_highlight seq-'.$start_end['peptide_sequence'].'\">'.$sequence[$i].'</span>';\n      }\n    }\n\n    $pop_up_menu_output = implode(\"\\n\",$pop_up_menu_output);\n\n    ////////////////////////////\n    \n\n    $sequence = array_chunk($sequence,$increment);\n\n    foreach($sequence as &$a_single_chunk){\n      $a_single_chunk = implode('',$a_single_chunk);\n    }\n\n    $sequence = array_chunk($sequence, $columns);\n\n    $table[] = '<table class=\"sequence\">';\n    $total = 0;\n    $total_count = 0;\n\n    foreach($sequence as $key => $columns)\n    {\n      $table[] = '<tr>';\n\n      foreach($columns as $c => $count)\n      {\n        $char_count = strlen(strip_tags($count));\n        $total_count = ($total_count + $char_count);\n        $table[] = '<td class=\"sequence_char_count\">'.$total_count.'</td>';\n      }\n\n      $table[] = '</tr>';\n      $table[] = '<tr>';\n\n      foreach($columns as $k => $value)\n      {\n        $char = str_split($value);\n        $total = $total + count($char);\n        $table[] = '<td>'.$value.'</td>';\n      }\n      $table[] = '</tr>';\n    }\n\n    $table[] = '</table>';\n    $table = implode(\"\\n\",$table);\n\n    return $pop_up_menu_output.\"\\n\".$table;\n  }\n\n  public function get_details( $assay_id = false, $gene_symbol = false, $uniprot_id = false ) {\n\n    $pdo_params = array();\n    $assay_id_sql = \"\";\n    $gene_symbol_sql = \"\";\n    $uniprot_id_sql = \"\";\n\n    // Query by assay id\n    if( $assay_id ) {\n      $assay_id_sql = \" AND analyte_peptide.analyte_peptide_id = ? \";\n      $pdo_params[] = $assay_id;\n    }\n    // Query by gene symbol\n    if( $gene_symbol ) {\n      $assay_id_sql = \" AND protein.gene_symbol = ? \";\n      $pdo_params[] = $gene_symbol;\n    }\n    // Query by uniprot id\n    if( $uniprot_id ) {\n      $assay_id_sql = \" AND protein.uniprot_accession_id = ? \";\n      $pdo_params[] = $uniprot_id;\n    }\n\n    $statement = $this->db->prepare(\"SELECT\n      protein.protein_id as manage\n      , protein.gene_symbol as gene\n      , protein.uniprot_accession_id as uniprot\n      , protein.uniprot_accession_id as uniprot_ac\n      , CONCAT('http://www.uniprot.org/uniprot/',protein.uniprot_accession_id ) as uniprot_link\n      , protein.chromosome_number\n      , protein.chromosome_start\n      , protein.chromosome_stop\n      , protein.uniprot_gene_synonym\n      , protein.uniprot_hgnc_gene_id\n      , protein.uniprot_kb\n      , protein.uniprot_source_taxon_id\n      , protein.uniprot_sequence\n      , protein.uniprot_sequence_raw\n      , protein.uniprot_sequence_length\n      , protein.uniprot_protein_name\n      , protein.protein_molecular_weight as protein_molecular_weight\n      , protein.approval_status \n      , @status_display := IF(protein.approval_status = 1,'Approved',protein.approval_status) as status_display\n      , @status_display := IF(protein.approval_status = 2,'Pending',@status_display) as status_display\n      , @status_display := IF(protein.approval_status = 0,'Disapproved',@status_display) as status_display\n      , @status_display := IF(protein.approval_status = 3,'Hidden',@status_display) as status_display\n      , analyte_peptide.peptide_sequence as peptide_sequence\n      , analyte_peptide.peptide_modified_sequence as peptide_modified_sequence\n      , analyte_peptide.peptide_start as peptide_start\n      , analyte_peptide.peptide_end as peptide_end\n      , analyte_peptide.peptide_molecular_weight as peptide_molecular_weight\n      , analyte_peptide.modification_type as modification\n      , analyte_peptide.cptc_catalog_id as cptc_catalog_id\n      , assay_parameters_new.matrix\n      , assay_parameters_new.data_type\n      , assay_parameters_new.enrichment_method\n      , assay_parameters_new.fractionation_approach\n      , assay_types.label as assay_type\n      FROM analyte_peptide\n      LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id \n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN assay_types on assay_types.assay_types_id = assay_parameters_new.assay_types_id\n      WHERE 1=1\n      AND protein.approval_status <> 3\n      {$assay_id_sql}\");\n      $statement->execute($pdo_params);\n \n      return $statement->fetch(PDO::FETCH_ASSOC);\n  }\n\n  public function getAllGenes( $gene_symbol ) {\n\n    $sql = \"SELECT\n        protein.protein_id as manage\n      , protein.gene_symbol as gene\n      , protein.uniprot_accession_id as uniprot\n      , analyte_peptide.analyte_peptide_id\n      , analyte_peptide.peptide_sequence\n      , analyte_peptide.peptide_modified_sequence\n      , analyte_peptide.peptide_start\n      , analyte_peptide.peptide_end\n      , analyte_peptide.peptide_molecular_weight\n      , analyte_peptide.modification_type as modification\n      , analyte_peptide.site_of_modification_peptide\n      , analyte_peptide.panorama_peptide_url\n      , analyte_peptide.panorama_protein_url\n      , analyte_peptide.peptide_standard_label_type\n      , analyte_peptide.cptc_catalog_id as cptc_catalog_id\n      , assay_parameters_new.instrument\n      , assay_parameters_new.internal_standard     \n      , peptide_standard_purity_types.type as peptide_standard_purity\n      , peptide_standard_purity_types.peptide_standard_purity_types_id\n      , assay_parameters_new.lc\n      , assay_parameters_new.column_packing\n      , assay_parameters_new.column_dimensions\n      , assay_parameters_new.flow_rate\n      , assay_parameters_new.matrix\n      , assay_parameters_new.protein_species_label as species\n      , assay_parameters_new.celllysate_path\n      , assay_types.label as assay_type\n      , group.group_id as laboratories_id\n      , group.name as laboratory_name\n      , group.abbreviation as laboratory_abbreviation\n      , group.primary_contact_name\n      , group.primary_contact_email_address\n      , group.disclaimer\n      , publications.publication_citation\n      , publications.publication_url\n      , import_log.import_log_id\n      FROM analyte_peptide\n      LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id AND protein.approval_status NOT IN (0)\n      LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN peptide_standard_purity_types ON peptide_standard_purity_types.peptide_standard_purity_types_id = assay_parameters_new.peptide_standard_purity_types_id\n      LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n      LEFT JOIN assay_types on assay_types.assay_types_id = assay_parameters_new.assay_types_id\n      LEFT JOIN publications ON publications.import_log_id = import_log.import_log_id\n      WHERE protein.gene_symbol = :gene_symbol\n\n      ORDER BY group.name, analyte_peptide.peptide_sequence ASC\";\n      $statement = $this->db->prepare($sql);\n      $statement->bindValue(\":gene_symbol\", $gene_symbol, PDO::PARAM_STR);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n      return $data;\n  }\n\n  public function getAllPeptideSequences( $gene_symbol = false ) {\n\n    $all_data = array();\n\n    $statement = $this->db->prepare(\"\n      SELECT group_closure_table.descendant as laboratories_id\n      FROM group_closure_table\n      LEFT JOIN `group` ON group.group_id = group_closure_table.descendant\n      WHERE group_closure_table.ancestor = 6\n      AND group_closure_table.pathlength = 1\n    \");\n    $statement->execute();\n    $laboratories = $statement->fetchAll(PDO::FETCH_ASSOC);\n\n    foreach($laboratories as $laboratory) {\n        $statement = $this->db->prepare(\"SELECT\n          protein.protein_id\n          ,analyte_peptide.peptide_modified_sequence as peptide_sequence\n          ,analyte_peptide.peptide_sequence as orig_peptide_sequence\n          ,analyte_peptide.peptide_start\n          ,analyte_peptide.peptide_end\n          ,group.name as submitting_laboratory\n          FROM analyte_peptide\n          LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id AND protein.approval_status NOT IN (0)\n          LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n          LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n          LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n          WHERE protein.gene_symbol = :gene_symbol\n          AND group.group_id = :laboratory_id\n        \");\n        $statement->bindValue(\":gene_symbol\", $gene_symbol, PDO::PARAM_STR);\n        $statement->bindValue(\":laboratory_id\", $laboratory['laboratories_id'], PDO::PARAM_STR);\n        $statement->execute();\n        $data[] = $statement->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    $results = array();\n    foreach($data as $key => $value)\n    {\n      if(!empty($value))\n      {\n        foreach($value as $k => $v)\n        {\n          $results[$v['orig_peptide_sequence']][] = $v['peptide_sequence'];\n        }\n      }\n    }\n\n    $data['total_sequences'] = count($results);\n\n    return $data;\n  }\n\n  public function getProteinSpecies() {\n    $statement = $this->db->prepare(\"\n      SELECT DISTINCT protein_species_label\n      FROM assay_parameters_new\n      LIMIT 1\n    \");\n    $statement->execute();\n    return $statement->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function getAssayTypes() {\n    $statement = $this->db->prepare(\"\n      SELECT DISTINCT(assay_type)\n      FROM assay_parameters\n    \");\n    $statement->execute();\n    return $statement->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function get_all_genes() {\n    $statement = $this->db->prepare(\"\n      SELECT DISTINCT(gene_symbol), uniprot_accession_id\n      FROM protein\n    \");\n    $statement->execute();\n    return $statement->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function get_uniprot_ids_from_kegg( $kegg_id = false ) {\n    $data = false;\n    $statement = $this->db->prepare(\"\n      SELECT real_kegg_id\n      FROM kegg\n      WHERE kegg_id = :kegg_id\n    \");\n    $statement->bindValue(\":kegg_id\", $kegg_id, PDO::PARAM_INT);\n    $statement->execute();\n    $kegg_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n    if($kegg_data[\"real_kegg_id\"] != NULL) {\n      $statement = $this->db->prepare(\"\n        SELECT uniprot_accession_id\n        FROM kegg_uniprot_map\n        WHERE kegg_id = :real_kegg_id\n      \");\n      $statement->bindValue(\":real_kegg_id\", $kegg_data[\"real_kegg_id\"], PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    }\n    return $data;\n  }\n\n  public function get_protein_interactions( $gene_symbol = false ) {\n    $data = array();\n    if($gene_symbol) {\n      $statement = $this->db->prepare(\"\n        SELECT DISTINCT(official_symbol_interactor_b)\n        FROM external_data.protein_interactions_biogrid\n        WHERE official_symbol_interactor_a = :gene_symbol\n      \");\n      $statement->bindValue(\":gene_symbol\", $gene_symbol, PDO::PARAM_STR);\n      $statement->execute();\n      $genes = $statement->fetchAll(PDO::FETCH_ASSOC);\n      foreach($genes as $gene) {\n        $data[] = $gene['official_symbol_interactor_b'];\n      }\n    }\n    return $data;\n  }\n\n  public function getChromosomeNumbers() {\n    return range(1, 22);\n  }\n\n  public function curl( $url ) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    $data = curl_exec($ch);\n    curl_close($ch);\n    return $data;\n  }\n\n  public function scrape_between( $data, $start, $end ) {\n    $data = stristr($data, $start); // Stripping all data from before $start\n    $data = substr($data, strlen($start));  // Stripping $start\n    $stop = stripos($data, $end);   // Getting the position of the $end of the data to scrape\n    $data = substr($data, 0, $stop);    // Stripping all data from after and including the $end of the data to scrape\n    return $data;   // Returning the scraped data from the function\n  }\n\n  public function insert_google_analytics( $total_visits ) {\n    $statement = $this->db->prepare(\"\n      INSERT INTO google_analytics_data\n        (total_visits)\n      VALUES ( :total_visits )\");\n    $statement->bindValue(\":total_visits\", $total_visits, PDO::PARAM_INT);\n    $statement->execute();\n  }\n\n  public function getDistinctPeptideSequences() {\n\n    $statement = $this->db->prepare(\"\n      SELECT DISTINCT(peptide_sequence)\n      FROM analyte_peptide\n    \");\n    $statement->execute();\n    return $statement->fetchAll(PDO::FETCH_ASSOC);\n\n  }\n\n  /*\n   * For panorama imports. Break-out into an import-based class?\n   *\n   */\n\n  public function getPeptideSequences( $import_log_id = false ) {\n\n    //  -- ,analyte_peptide.peptide_sequence\n\n    $statement = $this->db->prepare(\"\n      SELECT \n         protein.cptac_id\n        ,analyte_peptide.analyte_peptide_id       \n        ,analyte_peptide.peptide_modified_sequence AS peptide_sequence\n        ,analyte_peptide.peptide_modified_sequence\n        ,group.group_id as laboratories_id\n        ,group.name as laboratory_name\n        ,group.abbreviation as laboratory_abbreviation\n        ,assay_parameters_new.celllysate_path\n        ,import_log.import_log_id\n      FROM analyte_peptide\n      LEFT JOIN protein ON protein.protein_id = analyte_peptide.protein_id\n      LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n      WHERE import_log.import_log_id = :import_log_id\n      GROUP BY analyte_peptide.analyte_peptide_id\n    \");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->execute();\n    return $statement->fetchAll(PDO::FETCH_ASSOC);\n\n  }\n\n  public function getPeptideSequenceBySequence( $peptide_sequence = false ) {\n\n    $statement = $this->db->prepare(\"\n      SELECT \n        analyte_peptide.analyte_peptide_id\n        ,analyte_peptide.peptide_modified_sequence AS peptide_sequence\n        ,analyte_peptide.peptide_modified_sequence\n        ,group.group_id as laboratories_id\n        ,group.name as laboratory_name\n        ,group.abbreviation as laboratory_abbreviation\n        ,assay_parameters_new.celllysate_path\n      FROM analyte_peptide\n      LEFT JOIN protein ON protein.protein_id = analyte_peptide.protein_id\n      LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n      WHERE analyte_peptide.peptide_sequence = :peptide_sequence\n    \");\n    $statement->bindValue(\":peptide_modified_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->execute();\n    return $statement->fetchAll(PDO::FETCH_ASSOC);\n\n  }\n\n  /*\n   * For panorama imports ends.\n   *\n   */\n\n  public function get_lod_loq_comparison_data( $peptide, $laboratory_id,$manage_id = false) {\n    $statement = $this->db->prepare(\"\n      SELECT\n        blank_low_conc_LOD\n        ,blank_low_conc_LOQ\n        ,blank_only_LOD\n        ,blank_only_LOQ\n        ,rsd_limit_LOD\n        ,rsd_limit_LOQ\n        ,peptide\n        ,transition\n        ,transition_id\n        ,lod_loq_units\n      FROM lod_loq_comparison\n      LEFT JOIN analyte_peptide ON analyte_peptide.analyte_peptide_id = lod_loq_comparison.analyte_peptide_id\n      RIGHT JOIN protein ON protein.protein_id = analyte_peptide.protein_id AND protein.approval_status NOT IN (0)\n      WHERE lod_loq_comparison.peptide = :peptide\n      AND lod_loq_comparison.laboratory_id = :laboratory_id\n      AND protein.protein_id = :manage_id\n      \n      ORDER BY transition ASC\n    \");\n    $statement->bindValue(\":peptide\", $peptide, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->bindValue(\":manage_id\", $manage_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    \n    return $data;\n  }\n\n\n\n  public function get_response_curves_data( $peptide, $laboratory_id, $manage_id = false) {\n    $statement = $this->db->prepare(\"\n      SELECT\n        peptide\n        ,transition_id\n        ,ROUND(Slope, 2) as Slope\n        ,ROUND(Intercept, 2) as Intercept\n        ,ROUND(RSquare, 2) as RSquare\n      FROM response_curves_data\n      LEFT JOIN analyte_peptide ON analyte_peptide.analyte_peptide_id = response_curves_data.analyte_peptide_id\n      WHERE response_curves_data.peptide = :peptide\n      AND response_curves_data.laboratory_id = :laboratory_id\n      AND analyte_peptide.protein_id = :manage_id\n      ORDER BY transition DESC\n    \");\n    $statement->bindValue(\":peptide\", $peptide, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->bindValue(\":manage_id\", $manage_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function get_chromatogram_images( $analyte_peptide_id = false, $laboratory_id = false ) {\n\n    $data = false;\n\n    if( $analyte_peptide_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT sequence, file_name\n        FROM panorama_chromatogram_images\n        WHERE analyte_peptide_id = :analyte_peptide_id\n        AND laboratory_id = :laboratory_id\");\n      $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n      $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    return $data;\n  }\n\n  public function get_response_curve_images( $sequence = false, $analyte_peptide_id = false, $laboratory_id = false ) {\n\n    $data = false;\n\n    if( $sequence && $analyte_peptide_id && $laboratory_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT sequence, file_name\n        FROM panorama_response_curve_images\n        WHERE sequence = :sequence\n        AND analyte_peptide_id = :analyte_peptide_id\n        AND laboratory_id = :laboratory_id\");\n      $statement->bindValue(\":sequence\", $sequence, PDO::PARAM_STR);\n      $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n      $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    return $data;\n  }\n\n  public function get_validation_sample_image( $sequence = false, $analyte_peptide_id = false, $laboratory_id = false ) {\n\n    $data = false;\n\n    if( $sequence ) {\n      $statement = $this->db->prepare(\"\n        SELECT sequence, file_name\n        FROM panorama_validation_sample_images\n        WHERE sequence = :sequence\n        AND analyte_peptide_id = :analyte_peptide_id\n        AND laboratory_id = :laboratory_id\");\n      $statement->bindValue(\":sequence\", $sequence, PDO::PARAM_STR);\n      $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n      $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetch(PDO::FETCH_ASSOC);\n    }\n    \n    return $data;\n  }\n\n  public function get_validation_sample_images_data( $sequence = false, $analyte_peptide_id = false, $laboratory_id = false, $import_log_id = false, $manage_id = false ) {\n    $data = false;\n\n    if( $sequence ) {\n      $statement = $this->db->prepare(\"\n        SELECT \n          fragment_ion\n          ,low_intra_CV\n          ,med_intra_CV\n          ,high_intra_CV\n          ,low_inter_CV\n          ,med_inter_CV\n          ,high_inter_CV\n          ,low_total_CV\n          ,med_total_CV\n          ,high_total_CV\n          ,low_count\n          ,med_count\n          ,high_count\n          ,protein.protein_id as manage_id\n        FROM panorama_validation_sample_data\n        LEFT JOIN analyte_peptide ON analyte_peptide.analyte_peptide_id = panorama_validation_sample_data.analyte_peptide_id\n        LEFT JOIN protein ON protein.protein_id = analyte_peptide.protein_id\n        WHERE panorama_validation_sample_data.sequence = :sequence\n        AND panorama_validation_sample_data.analyte_peptide_id = :analyte_peptide_id\n        AND panorama_validation_sample_data.laboratory_id = :laboratory_id\n        AND panorama_validation_sample_data.import_log_id = :import_log_id\");\n\n      $statement->bindValue(\":sequence\", $sequence, PDO::PARAM_STR);\n      $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n      $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n      $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n\n    }\n\n    return $data;\n  }\n\n  public function get_uniprot_splice_junctions( $uniprot_accession_id = false ) {\n\n    $data = false;\n\n    if( $uniprot_accession_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT *\n        FROM uniprot_splice_junctions\n        WHERE uniprot_accession_id = :uniprot_accession_id\");\n      $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    return $data;\n  }\n\n  public function get_uniprot_snps( $uniprot_accession_id = false ) {\n\n    $data = false;\n\n    if( $uniprot_accession_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT *\n        FROM uniprot_snps\n        WHERE uniprot_accession_id = :uniprot_accession_id\");\n      $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    }\n    \n    return $data;\n  }\n\n  public function get_uniprot_isoforms( $uniprot_accession_id = false ) {\n\n    $data = false;\n\n    if( $uniprot_accession_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT id, sequence, note, sequence_length\n        FROM uniprot_isoforms\n        WHERE uniprot_accession_id = :uniprot_accession_id\");\n      $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    }\n    \n    return $data;\n  }\n\n  public function get_sop_files( $import_log_id = false ) {\n\n    $data = false;\n    if( $import_log_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT sop_files.sop_files_id, sop_files.file_name, sop_files.internal_file_name, sop_files.file_type, sop_files.file_size\n        FROM sop_files\n        LEFT JOIN sop_files_join on sop_files_join.sop_files_id = sop_files.sop_files_id\n        WHERE sop_files_join.import_log_id = :import_log_id\n        AND sop_files.is_deleted = 0\");\n      $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n      \n      // Replace the file extension so the file name extension returns as \n      // the same file name extension it will be converted to.\n      if($data) {\n        $i=0;\n        foreach($data as $single_data) {\n          //$file_name_without_extension = preg_replace('/\\\\.[^.\\\\s]{3,4}$/', '', $single_data[\"file_name\"]);\n          $data[$i][\"file_name\"] = $single_data[\"file_name\"]; //$file_name_without_extension.\".pdf\";\n          $i++;\n        }\n      }\n\n    }\n    return $data;\n  }\n\n  public function download_file( $sop_files_id = false )\n  {\n    $data = false;\n\n    if( $sop_files_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT\n        file_name,\n        internal_file_name,\n        file_type,\n        file_size\n        FROM sop_files\n        WHERE sop_files_id = :sop_files_id\n      \");\n      $statement->bindValue(\":sop_files_id\", $sop_files_id, PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetch(PDO::FETCH_ASSOC);\n    }\n\n    return $data;\n  }\n\n  public function get_laboratories( $laboratories_id = false ) {\n\n    $data = false;\n    $and = '';\n\n    if($laboratories_id) {\n      $and = \"AND group.group_id = \".(int)$laboratories_id;\n    }\n\n    $statement = $this->db->prepare(\"\n      SELECT group_closure_table.descendant as laboratories_id\n      FROM group_closure_table\n      LEFT JOIN `group` ON group.group_id = group_closure_table.descendant\n      WHERE group_closure_table.ancestor = 6\n      AND group_closure_table.pathlength = 1\n      {$and}\n    \");\n    $statement->execute();\n    $data = $laboratories_id ? $statement->fetch(PDO::FETCH_ASSOC) : $statement->fetchAll(PDO::FETCH_ASSOC);\n    \n    return $data;\n  }\n\n  public function get_laboratory_id_by_abbreviation( $laboratory_abbreviation = false ) {\n    $data = false;\n    if( $laboratory_abbreviation ) {\n      $statement = $this->db->prepare(\"\n        SELECT group_closure_table.descendant as laboratories_id\n        FROM group_closure_table\n        LEFT JOIN `group` ON group.group_id = group_closure_table.descendant\n        WHERE group.abbreviation = :laboratory_abbreviation\");\n      $statement->bindValue(\":laboratory_abbreviation\", $laboratory_abbreviation, PDO::PARAM_STR);\n      $statement->execute();\n      $result = $statement->fetch(PDO::FETCH_ASSOC);\n      $data = $result['laboratories_id'];\n    }\n    return $data;\n  }\n\n  public function get_laboratory_by_import_log_id( $import_log_id = false ) {\n    $data = false;\n    if( $import_log_id ) {\n      $statement = $this->db->prepare(\"\n        SELECT\n            import_log.import_log_id\n          , group.group_id as laboratory_id\n          , group.name as laboratory_name\n          , group.abbreviation as laboratory_abbreviation\n          , assay_parameters_new.celllysate_path\n          , assay_parameters_new.quantification_units\n        FROM import_log\n        LEFT JOIN `group` ON group.group_id = import_log.laboratory_id\n        LEFT JOIN assay_parameters_new ON assay_parameters_new.import_log_id = import_log.import_log_id\n        WHERE import_log.import_log_id = :import_log_id\n      \");\n      $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n      $statement->execute();\n      $data = $statement->fetch(PDO::FETCH_ASSOC);\n    }\n    return $data;\n  }\n\n  public function get_directory_listing_of_directories( $base_directory = false, $add_to_blacklist = '' ) {\n    $data = false;\n    if( $base_directory ) {\n      // Loop through the directory\n      if($handle = opendir($base_directory)) {\n        $directories = array();\n        $blacklist = array('.', '..', '_test', $add_to_blacklist);\n        while (false !== ($file = readdir($handle))) {\n          if (!in_array($file, $blacklist)) {\n            $data[] = $file;\n          }\n        }\n        closedir($handle);\n      }\n    }\n    return $data;\n  }\n\n  public function get_hutch_interlab_sequences( $base_directory = false, $lod_loq_comparisons_directory_name = false) {\n\n    $data = false;\n\n    if( $base_directory ) {\n      // Loop through the directory\n      if($handle = opendir($base_directory)) {\n        $directories = array();\n        $blacklist = array('.', '..', '_test', 'Broad_Carr', 'SNU_KIST_Kim');\n        while (false !== ($file = readdir($handle))) {\n          if (!in_array($file, $blacklist)) {\n            $file_data[] = $file;\n          }\n        }\n        closedir($handle);\n      }\n    }\n    $csv_laboratories_directory = $file_data[0];\n\n    // Get the laboratory_id by the abbreviation (directory)\n    $laboratory_id = $this->get_laboratory_id_by_abbreviation( $csv_laboratories_directory );\n\n    $csv_files = $this->get_directory_listing_of_interlab_files( $base_directory.'/'.$csv_laboratories_directory.'/'.$lod_loq_comparisons_directory_name );\n\n    foreach( $csv_files as $csv_file ) {\n      $rows = new SplFileObject( $base_directory.'/'.$csv_laboratories_directory.'/'.$lod_loq_comparisons_directory_name.'/'.$csv_file );\n      $rows->setFlags(SplFileObject::READ_CSV);\n\n      $i=0;\n      foreach( $rows as $row )\n      {\n        // Skip the first line, which are the column names\n        if($i > 0) {\n\n          // Skip empty lines\n          if($row[0] != NULL) {\n\n            // Strip the modified sequence of the string --> [+57]\n            $replacements = array();\n            $patterns = array();\n            $replacements[0] = '';\n            $patterns[0] = '/[\\[\\+\\d+\\]]/';\n            $data[] = preg_replace($patterns, $replacements, $row[1]);\n\n          }\n        }\n        $i++;\n        // if($i > 4) break;\n      }\n    }\n\n    return $data;\n  }\n\n  public function get_directory_listing_of_files( $directory = false ) {\n    $data = false;\n    if( $directory ) {\n      // Loop through the directory\n      if ($handle = opendir($directory)) {\n        $entries = array();\n        while (false !== ($file = readdir($handle))) {\n          if(($file != '.') && ($file != '..')) {\n            $data[] = $file;\n          }\n        }\n        closedir($handle);\n      }\n    }\n    return $data;\n  }\n\n  public function get_directory_listing_of_interlab_files( $directory = false ) {\n    $data = false;\n    if( $directory ) {\n      // Loop through the directory\n      if ($handle = opendir($directory)) {\n        $entries = array();\n        while (false !== ($file = readdir($handle))) {\n          if(($file != '.') && ($file != '..') ) {\n            if(stristr($file, 'Interlab') !== FALSE) {\n              $data[] = $file;\n            }\n            \n          }\n        }\n        closedir($handle);\n      }\n    }\n    return $data;\n  }\n\n  public function delete_data_from_tables( $table_name = false, $field_name = false, $id = false ) {\n\n    // Make sure all variables are true before deleting crap\n    if( $table_name && $field_name && $id ) {\n\n      $statement = $this->db->prepare(\"SET foreign_key_checks = 0\");\n      $statement->execute();\n\n      $statement = $this->db->prepare(\"\n        SET foreign_key_checks = 0;\n        DELETE FROM `{$table_name}`\n        WHERE `{$field_name}` = :id;\n        SET foreign_key_checks = 1;\");\n      $statement->bindValue(\":id\", $id, PDO::PARAM_INT);\n      $statement->execute();\n\n      $statement = $this->db->prepare(\"SET foreign_key_checks = 1\");\n      $statement->execute();\n\n    } else {\n      die('!!!!!!!!!!!!!!!!!!!!! SOMETHING RETURNED FALSE !!!!!!!!!!!!!!!!!!!!!');\n    }\n\n  }\n\n  public function backup_database( $number ) {\n    $user = $this->final_global_template_vars[\"db_connection\"][\"user\"];\n    $pass = $this->final_global_template_vars[\"db_connection\"][\"password\"];\n    $host = $this->final_global_template_vars[\"db_connection\"][\"host\"];\n    $database = $this->final_global_template_vars[\"db_connection\"][\"name\"];\n    $path_and_file_name = $this->final_global_template_vars[\"database_backup_path\"].date('Ymd_his').\"_\".$database.\"_\".$number.\".sql\";\n    $mysql_dump = \"mysqldump --user={$user} --password={$pass} --host={$host} {$database} > {$path_and_file_name}\";\n    $var = shell_exec($mysql_dump);\n  }\n\n  public function set_status_to_do_not_display( $file_name ) {\n\n    $not_found = array();\n    $rows = new SplFileObject('/mnt/webrepo/fr-s-swpg-cpt-d/'.$file_name);\n    $rows->setFlags(SplFileObject::READ_CSV);\n\n    $i=0;\n    foreach( $rows as $row ) {\n      // Skip the first line, which are the column names\n      if($i > 0) {\n        // Skip empty lines\n        if($row[0] != NULL) {\n\n          if($row[0]) {\n            \n            $statement = $this->db->prepare(\"\n              SELECT analyte_peptide.protein_id\n              FROM analyte_peptide\n              LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id\n              LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n              LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n              LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n              WHERE analyte_peptide.peptide_sequence = :peptide_sequence\n              -- AND import_log.laboratory_id = :laboratory_id\n            \");\n            $statement->bindValue(\":peptide_sequence\", $row[0], PDO::PARAM_STR);\n            $statement->bindValue(\":laboratory_id\", $row[2], PDO::PARAM_INT);\n            $statement->execute();\n            $data = $statement->fetch(PDO::FETCH_ASSOC);\n\n            if($data) {\n              // Set the approval_status to 3 in the protein table\n              $statement = $this->db->prepare(\"\n                UPDATE protein\n                SET approval_status = 3\n                WHERE protein.protein_id = \".(int)$data['protein_id']);\n              $statement->execute();\n            } else {\n              // Collect all of the records not found\n              $not_found[] = $row;\n            }\n            \n          }\n\n        }\n      }\n      $i++;\n    }\n\n    // Create a CSV of all assays not found in the database, therefore approval_status not set to 3\n    $fp = fopen('/mnt/webrepo/fr-s-swpg-cpt-d/assays_not_found_'.date('Ymd_his').'.csv', 'w');\n    fputcsv($fp, array('cptac_id','peptide_sequence','gene_symbol','laboratory_id','redo'));\n    foreach ($not_found as $fields) {\n      fputcsv($fp, $fields);\n    }\n    fclose($fp);\n\n  }\n\n  public function get_all_sequences_on_dev() {\n    $statement = $this->db->prepare(\"SELECT \n          protein_id\n        , peptide_sequence \n      FROM analyte_peptide \n      GROUP BY peptide_sequence ASC\");\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    foreach($data as $single) {\n      $data_array[] = $single[\"peptide_sequence\"];\n    }\n    return $data_array;\n  }\n\n  public function get_all_sequences_on_prod() {\n    $statement = $this->db->prepare(\"SELECT \n          cptac.analyte_peptide.protein_id\n        , cptac.analyte_peptide.peptide_sequence \n      FROM cptac.analyte_peptide \n      GROUP BY cptac.analyte_peptide.peptide_sequence ASC\");\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    foreach($data as $single) {\n      $data_array[] = $single[\"peptide_sequence\"];\n    }\n    return $data_array;\n  }\n\n  public function get_protein_ids_for_records_not_in_prod( $peptide_sequences = false ) {\n    $statement = $this->db->prepare(\"SELECT \n          protein_id\n      FROM analyte_peptide \n      WHERE peptide_sequence IN(\".$peptide_sequences.\")\");\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    foreach($data as $single) {\n      $data_array[] = $single[\"protein_id\"];\n    }\n    return $data_array;\n  }\n\n  // For Jeff's CSV\n  public function get_fields_for_jeffs_csv() {\n    $sql_with_cvs = \"SELECT SQL_CALC_FOUND_ROWS\n        protein.cptac_id\n        , protein.gene_symbol\n        , analyte_peptide.peptide_sequence\n        , protein.approval_status\n        , group.abbreviation as laboratory_abbreviation\n        , panorama_validation_sample_data.low_intra_CV\n        , panorama_validation_sample_data.med_intra_CV\n        , panorama_validation_sample_data.high_intra_CV\n        , panorama_validation_sample_data.low_inter_CV\n        , panorama_validation_sample_data.med_inter_CV\n        , panorama_validation_sample_data.high_inter_CV\n        , panorama_validation_sample_data.low_total_CV\n        , panorama_validation_sample_data.med_total_CV\n        , panorama_validation_sample_data.high_total_CV\n        FROM analyte_peptide\n        LEFT JOIN assay_parameters on assay_parameters.analyte_peptide_id = analyte_peptide.analyte_peptide_id\n        LEFT JOIN `group` ON assay_parameters.laboratories_id = group.group_id\n        LEFT JOIN panorama_validation_sample_data on panorama_validation_sample_data.analyte_peptide_id = analyte_peptide.analyte_peptide_id\n        LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id\";\n\n    $sql_without_cvs = \"SELECT SQL_CALC_FOUND_ROWS\n        protein.cptac_id\n        , protein.gene_symbol\n        , analyte_peptide.peptide_sequence\n        , protein.approval_status\n        , group.abbreviation as laboratory_abbreviation\n        FROM analyte_peptide\n        LEFT JOIN assay_parameters on assay_parameters.analyte_peptide_id = analyte_peptide.analyte_peptide_id\n        LEFT JOIN `group` ON assay_parameters.laboratories_id = group.group_id\n        LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id\";\n  }\n\n\n  public function getPrevNextAssay($current_assay = false)\n  {\n    $data = array();\n\n    $sql = \"SELECT analyte_peptide.protein_id \n            FROM analyte_peptide\n            RIGHT JOIN protein on analyte_peptide.protein_id = protein.protein_id -- AND protein.approval_status = 1\n            WHERE analyte_peptide.protein_id < :current_assay \n            ORDER BY analyte_peptide.protein_id DESC\n            LIMIT 1\";\n    \n    $statement = $this->db->prepare($sql);\n    $statement->bindValue(\":current_assay\", $current_assay, PDO::PARAM_INT);\n    $statement->execute();\n    $previous = $statement->fetch(PDO::FETCH_ASSOC);\n    $data[\"previous\"] = !empty($previous['protein_id']) ? 'CPTAC-'.$previous['protein_id'] : false;\n\n    $sql = \"SELECT analyte_peptide.protein_id \n        FROM analyte_peptide\n        RIGHT JOIN protein on analyte_peptide.protein_id = protein.protein_id -- AND protein.approval_status = 1\n        WHERE analyte_peptide.protein_id > :current_assay \n        ORDER BY analyte_peptide.protein_id ASC\n        LIMIT 1\";\n\n    $statement = $this->db->prepare($sql);\n    $statement->bindValue(\":current_assay\", $current_assay, PDO::PARAM_INT);\n    $statement->execute();\n    $next = $statement->fetch(PDO::FETCH_ASSOC);\n    $data[\"next\"] = !empty($next['protein_id']) ? 'CPTAC-'.$next['protein_id'] : false;\n\n    // go to first record\n    if(!$data['next'])\n    {\n      $sql = \"SELECT analyte_peptide.protein_id \n            FROM analyte_peptide\n            RIGHT JOIN protein on analyte_peptide.protein_id = protein.protein_id -- AND protein.approval_status = 1\n            WHERE analyte_peptide.protein_id < :current_assay \n            ORDER BY analyte_peptide.protein_id ASC\n            LIMIT 1\";\n    \n      $statement = $this->db->prepare($sql);\n      $statement->bindValue(\":current_assay\", $current_assay, PDO::PARAM_INT);\n      $statement->execute();\n      $next = $statement->fetch(PDO::FETCH_ASSOC);\n      $data[\"next\"] = !empty($next['protein_id']) ? 'CPTAC-'.$next['protein_id'] : false;\n    }\n\n     // go to last record\n    if(!$data['previous'])\n    {\n      $sql = \"SELECT analyte_peptide.protein_id \n        FROM analyte_peptide\n        RIGHT JOIN protein on analyte_peptide.protein_id = protein.protein_id -- AND protein.approval_status = 1\n        WHERE analyte_peptide.protein_id > :current_assay \n        ORDER BY analyte_peptide.protein_id DESC\n        LIMIT 1\";\n\n      $statement = $this->db->prepare($sql);\n      $statement->bindValue(\":current_assay\", $current_assay, PDO::PARAM_INT);\n      $statement->execute();\n      $previous = $statement->fetch(PDO::FETCH_ASSOC);\n      $data[\"previous\"] = !empty($previous['protein_id']) ? 'CPTAC-'.$previous['protein_id'] : false;\n    }\n\n    return $data;\n  }\n\n\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":1146,"column":18},"end":{"row":1146,"column":45}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":5,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/assays.class.php","digestWhenLastPersisted":"00606d9b70496714304f91713cce3803b2aeeda5","preferredLineEnding":null,"nextMarkerId":54,"deserializer":"TextBuffer","version":5},{"id":"46d8ee603f87292aaa24fa75970cc54d","text":"<?php\n/**\n * @desc Import data from Panorama into CPTAC's Assay Portal database\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 2.0\n * @package cptac\n *\n */\n\nclass ImportPanoramaData\n{\n\n  public $db;\n\n  public function __construct( $db_connection=false ) {\n    if( $db_connection && is_object($db_connection) ) {\n      $this->db = $db_connection;\n    }\n    global $final_global_template_vars;\n    $this->final_global_template_vars = $final_global_template_vars;\n  }\n\n\n  public function db_error($handle)\n  {\n    die(\"DB ERROR\");\n  }\n\n\n  public function truncate_all() {\n    $statement = $this->db->prepare(\"SET foreign_key_checks = 0\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE protein\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"SET foreign_key_checks = 1\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"SET foreign_key_checks = 0\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE analyte_peptide\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"SET foreign_key_checks = 1\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE uniprot_isoforms\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE uniprot_snps\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE uniprot_splice_junctions\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE lod_loq_comparison\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE response_curves_data\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE uniprot_splice_junctions\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE panorama_chromatogram_images\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE panorama_response_curve_images\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE panorama_validation_sample_data\");\n    $statement->execute();\n    $statement = $this->db->prepare(\"TRUNCATE TABLE panorama_validation_sample_images\");\n    $statement->execute();\n  }\n\n\n\n\n  public function do_initial_inserts($data = false)\n  {\n\n      $statement = $this->db->prepare(\"\n          INSERT INTO protein\n          ( gene_symbol, import_log_id, uniprot_accession_id, guidance_document_version, created_date )\n          VALUES ( :gene_symbol, :import_log_id, :uniprot_accession_id, :guidance_document_version, NOW() )\");\n        \n\n        $data[\"gene_symbol\"] = !empty($data[\"gene_symbol\"]) ? $data[\"gene_symbol\"] : false;\n\n        $statement->bindValue(\":gene_symbol\", $data[\"gene_symbol\"], PDO::PARAM_STR);\n        $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":uniprot_accession_id\", $data[\"uniprot_lookup_id\"], PDO::PARAM_STR);\n        $statement->bindValue(\":guidance_document_version\", \"1.0\", PDO::PARAM_STR);\n        $statement->execute();\n\n        $last_inserted_protein_id = $this->db->lastInsertId();\n        \n        // Update, adding the cptac_id, using the last inserted id as the numeric base.\n        $statement = $this->db->prepare(\"\n          UPDATE protein\n          SET cptac_id = :cptac_id\n          WHERE protein_id = :protein_id\");\n        $statement->bindValue(\":cptac_id\", \"CPTAC-\".$last_inserted_protein_id, PDO::PARAM_STR);\n        $statement->bindValue(\":protein_id\", $last_inserted_protein_id, PDO::PARAM_INT);\n        $statement->execute();\n        \n     \n\n        $analyte_peptide_db_array = array(\n              'protein_id'\n            , 'import_log_id'\n            , 'peptide_molecular_weight'\n            , 'peptide_start'\n            , 'peptide_end'\n            , 'modification_type'\n            , 'site_of_modification_peptide'\n            , 'peptide_sequence'\n            , 'peptide_modified_sequence'\n            , 'hydrophobicity'\n            , 'panorama_peptide_url'\n            , 'panorama_protein_url'\n            , 'panorama_created_date' \n          );\n\n          $analyte_peptide_columns = implode(\", \", $analyte_peptide_db_array);\n          $analyte_peptide_placeholders = \":\".implode(\", :\", $analyte_peptide_db_array);\n          foreach($analyte_peptide_db_array as $single_column) {\n            $analyte_peptide_update[] = $single_column.\" = :\".$single_column;\n          }\n\n\n        // Insert into the analyte_peptide table.\n        $statement = $this->db->prepare(\"\n          INSERT INTO analyte_peptide\n          (\".$analyte_peptide_columns.\")\n          VALUES (\".$analyte_peptide_placeholders.\")\n        \");\n\n        \n        $data[\"peptide_molecular_weight\"] = isset($data[\"peptide_molecular_weight\"]) ? $data[\"peptide_molecular_weight\"] : false;\n        $data[\"peptide_start\"] = isset($data[\"peptide_start\"]) ? $data[\"peptide_start\"] : false;\n        $data[\"peptide_end\"] = isset($data[\"peptide_end\"]) ? $data[\"peptide_end\"] : false;\n        $data[\"modification_type\"] = isset($data[\"modification_type\"]) ? $data[\"modification_type\"] : false;\n        $data[\"site_of_modification_peptide\"] = isset($data[\"site_of_modification_peptide\"]) ? $data[\"site_of_modification_peptide\"] : false;\n        $data[\"peptide_sequence\"] = isset($data[\"peptide_sequence\"]) ? $data[\"peptide_sequence\"] : false;\n        $data[\"peptide_modified_sequence\"] = isset($data[\"peptide_modified_sequence\"]) ? $data[\"peptide_modified_sequence\"] : false;\n        $data[\"hydrophobicity\"] = isset($data[\"hydrophobicity\"]) ? $data[\"hydrophobicity\"] : false;\n        $data[\"panorama_peptide_url\"] = isset($data[\"panorama_peptide_url\"]) ? $data[\"panorama_peptide_url\"] : false;\n        $data[\"panorama_created_date\"] = isset($data[\"panorama_created_date\"]) ? $data[\"panorama_created_date\"] : false;\n\n        $statement->bindValue(\":protein_id\", $last_inserted_protein_id, PDO::PARAM_INT);\n        $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":peptide_molecular_weight\", $data[\"peptide_molecular_weight\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_start\", $data[\"peptide_start\"], PDO::PARAM_INT);\n        $statement->bindValue(\":peptide_end\", $data[\"peptide_end\"], PDO::PARAM_INT);\n        $statement->bindValue(\":modification_type\", $data[\"modification_type\"], PDO::PARAM_STR);\n        $statement->bindValue(\":site_of_modification_peptide\", $data[\"site_of_modification_peptide\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_modified_sequence\", $data[\"peptide_modified_sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":hydrophobicity\", $data[\"hydrophobicity\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_peptide_url\", $data[\"panorama_peptide_url\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_protein_url\", $data[\"panorama_protein_url\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_created_date\", $data[\"panorama_created_date\"], PDO::PARAM_STR);\n        $statement->execute();\n\n\n\n  }\n\n\n\n  public function create_initial_records( $data = false ) {\n\n    $analyte_peptide_db_array = array(\n        'protein_id'\n      , 'import_log_id'\n      , 'peptide_molecular_weight'\n      , 'peptide_start'\n      , 'peptide_end'\n      , 'modification_type'\n      , 'site_of_modification_peptide'\n      , 'peptide_sequence'\n      , 'peptide_modified_sequence'\n      , 'hydrophobicity'\n      , 'panorama_peptide_url'\n      , 'panorama_protein_url'\n      , 'panorama_created_date' \n    );\n\n    $analyte_peptide_columns = implode(\", \", $analyte_peptide_db_array);\n    $analyte_peptide_placeholders = \":\".implode(\", :\", $analyte_peptide_db_array);\n    foreach($analyte_peptide_db_array as $single_column) {\n      $analyte_peptide_update[] = $single_column.\" = :\".$single_column;\n    }\n\n    // Remove the protein_id and import_log_id for updates.\n    unset($analyte_peptide_update[0], $analyte_peptide_update[1]);\n\n    if( $data ) {\n      \n      // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n      $statement = $this->db->prepare(\"\n        SELECT protein.protein_id, protein.gene_symbol, analyte_peptide.peptide_sequence\n        FROM protein\n        LEFT JOIN analyte_peptide ON analyte_peptide.protein_id = protein.protein_id\n        WHERE protein.uniprot_accession_id = :uniprot_accession_id\n        AND analyte_peptide.peptide_sequence = :peptide_sequence\n        AND protein.import_log_id = :import_log_id\n        \");\n      $statement->bindValue(\":uniprot_accession_id\", $data[\"uniprot_lookup_id\"], PDO::PARAM_STR);\n      $statement->bindValue(\":peptide_sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n      $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n      $statement->execute();\n\n      $existing_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n      // If no record is found, insert a new record.\n      // Otherwise, update the existing record.\n      if(!$existing_data) {\n\n        // Insert into the protein table.\n        $statement = $this->db->prepare(\"\n          INSERT INTO protein\n          ( gene_symbol, import_log_id, uniprot_accession_id, guidance_document_version, created_date )\n          VALUES ( :gene_symbol, :import_log_id, :uniprot_accession_id, :guidance_document_version, NOW() )\");\n        $statement->bindValue(\":gene_symbol\", $data[\"gene_symbol\"], PDO::PARAM_STR);\n        $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":uniprot_accession_id\", $data[\"uniprot_lookup_id\"], PDO::PARAM_STR);\n        $statement->bindValue(\":guidance_document_version\", \"1.0\", PDO::PARAM_STR);\n        $statement->execute();\n\n        $last_inserted_protein_id = $this->db->lastInsertId();\n        \n        // Update, adding the cptac_id, using the last inserted id as the numeric base.\n        $statement = $this->db->prepare(\"\n          UPDATE protein\n          SET cptac_id = :cptac_id\n          WHERE protein_id = :protein_id\");\n        $statement->bindValue(\":cptac_id\", \"CPTAC-\".$last_inserted_protein_id, PDO::PARAM_STR);\n        $statement->bindValue(\":protein_id\", $last_inserted_protein_id, PDO::PARAM_INT);\n        $statement->execute();\n\n        // Insert into the analyte_peptide table.\n        $statement = $this->db->prepare(\"\n          INSERT INTO analyte_peptide\n          (\".$analyte_peptide_columns.\")\n          VALUES (\".$analyte_peptide_placeholders.\")\n        \");\n\n        $statement->bindValue(\":protein_id\", $last_inserted_protein_id, PDO::PARAM_INT);\n        $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":peptide_molecular_weight\", $data[\"peptide_molecular_weight\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_start\", $data[\"peptide_start\"], PDO::PARAM_INT);\n        $statement->bindValue(\":peptide_end\", $data[\"peptide_end\"], PDO::PARAM_INT);\n        $statement->bindValue(\":modification_type\", $data[\"modification_type\"], PDO::PARAM_STR);\n        $statement->bindValue(\":site_of_modification_peptide\", $data[\"site_of_modification_peptide\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_modified_sequence\", $data[\"peptide_modified_sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":hydrophobicity\", $data[\"hydrophobicity\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_peptide_url\", $data[\"panorama_peptide_url\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_protein_url\", $data[\"panorama_protein_url\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_created_date\", $data[\"panorama_created_date\"], PDO::PARAM_STR);\n        $statement->execute();\n\n      } else {\n        // Update the protein table.\n        $statement = $this->db->prepare(\"\n          UPDATE protein\n          SET uniprot_accession_id = :uniprot_accession_id\n          WHERE protein.protein_id = \".$existing_data[\"protein_id\"].\"\n        \");\n        $statement->bindValue(\":uniprot_accession_id\", $data[\"uniprot_lookup_id\"], PDO::PARAM_STR);\n        $statement->execute();\n\n        $statement = $this->db->prepare(\"\n          UPDATE analyte_peptide\n          SET \".implode(\", \", $analyte_peptide_update).\"\n          WHERE analyte_peptide.protein_id = \".$existing_data[\"protein_id\"].\"\n        \");\n\n      \n        $data[\"modification_type\"] = isset($data[\"modification_type\"]) ? $data[\"modification_type\"] : false;\n\n\n        $statement->bindValue(\":peptide_molecular_weight\", $data[\"peptide_molecular_weight\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_start\", $data[\"peptide_start\"], PDO::PARAM_INT);\n        $statement->bindValue(\":peptide_end\", $data[\"peptide_end\"], PDO::PARAM_INT);\n        $statement->bindValue(\":modification_type\", $data[\"modification_type\"], PDO::PARAM_STR);\n        $statement->bindValue(\":site_of_modification_peptide\", $data[\"site_of_modification_peptide\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":peptide_modified_sequence\", $data[\"peptide_modified_sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":hydrophobicity\", $data[\"hydrophobicity\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_peptide_url\", $data[\"panorama_peptide_url\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_protein_url\", $data[\"panorama_protein_url\"], PDO::PARAM_STR);\n        $statement->bindValue(\":panorama_created_date\", $data[\"panorama_created_date\"], PDO::PARAM_STR);\n        $statement->execute();\n\n\n      }\n    }\n\n  }\n\n  public function import_chromatogram_images( $data = false ) {\n    \n    if( $data[\"file_name\"] && $data[\"sequence\"] ) {\n\n      // Hack. Uniform naming, fail.\n      $data[\"peptide_sequence\"] = $data[\"sequence\"];\n\n      // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n      $existing_data = $this->get_single_image_data(\n        'panorama_chromatogram_images'\n        ,$data\n      );\n\n      if(!$existing_data) {\n        // Insert into the database\n        $statement = $this->db->prepare(\"\n          INSERT INTO panorama_chromatogram_images\n          ( import_log_id, analyte_peptide_id, laboratory_id, sequence, file_name, created_date )\n          VALUES ( :import_log_id, :analyte_peptide_id, :laboratory_id, :sequence, :file_name, NOW() )\n        \");\n        $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":analyte_peptide_id\", $data[\"analyte_peptide_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":laboratory_id\", $data[\"laboratory_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":sequence\", $data[\"sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":file_name\", $data[\"file_name\"], PDO::PARAM_STR);\n        $statement->execute();\n      } else {\n        // Update the table.\n        $statement = $this->db->prepare(\"\n          UPDATE panorama_chromatogram_images\n          SET file_name = :file_name\n          WHERE panorama_chromatogram_images_id = :panorama_chromatogram_images_id\n        \");\n        $statement->bindValue(\":panorama_chromatogram_images_id\", $existing_data[\"panorama_chromatogram_images_id\"], PDO::PARAM_STR);\n        $statement->bindValue(\":file_name\", $data[\"file_name\"], PDO::PARAM_STR);\n        $statement->execute();\n      }\n\n    }\n\n  }\n\n  public function import_response_curve_images( $data = false ) {\n\n      if($data[\"response_curve_image_linear\"]) {\n        // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n        $existing_data = $this->get_single_image_data(\n          'panorama_response_curve_images'\n          ,$data\n        );\n\n        if(!$existing_data) {\n          // Insert linear plot into the database\n          $statement = $this->db->prepare(\"\n            INSERT INTO panorama_response_curve_images\n            ( import_log_id, analyte_peptide_id, laboratory_id, sequence, file_name, created_date )\n            VALUES ( :import_log_id, :analyte_peptide_id, :laboratory_id, :sequence, :file_name, NOW() )\n          \");\n          $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":analyte_peptide_id\", $data[\"analyte_peptide_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":laboratory_id\", $data[\"laboratory_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n          $statement->bindValue(\":file_name\", $data[\"response_curve_image_linear\"], PDO::PARAM_STR);\n          $statement->execute();\n        } else {\n          // Update the table.\n          $statement = $this->db->prepare(\"\n            UPDATE panorama_response_curve_images\n            SET file_name = :file_name\n            WHERE response_curve_images_id = :response_curve_images_id\n          \");\n          $statement->bindValue(\":file_name\", $data[\"response_curve_image_linear\"], PDO::PARAM_STR);\n          $statement->bindValue(\":response_curve_images_id\", $existing_data[\"response_curve_images_id\"], PDO::PARAM_STR);\n          $statement->execute();\n        }\n      }\n\n      if($data[\"response_curve_image_log\"]) {\n        // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n        $existing_data = $this->get_single_image_data(\n          'panorama_response_curve_images'\n          ,$data\n        );\n\n        if(!$existing_data) {\n          // Insert log plot into the database\n          $statement = $this->db->prepare(\"\n            INSERT INTO panorama_response_curve_images\n            ( import_log_id, analyte_peptide_id, laboratory_id, sequence, file_name, created_date )\n            VALUES ( :import_log_id, :analyte_peptide_id, :laboratory_id, :sequence, :file_name, NOW() )\n          \");\n          $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":analyte_peptide_id\", $data[\"analyte_peptide_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":laboratory_id\", $data[\"laboratory_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n          $statement->bindValue(\":file_name\", $data[\"response_curve_image_log\"], PDO::PARAM_STR);\n          $statement->execute();\n        } else {\n          // Update the table.\n          $statement = $this->db->prepare(\"\n            UPDATE panorama_response_curve_images\n            SET file_name = :file_name\n            WHERE response_curve_images_id = :response_curve_images_id\n          \");\n          $statement->bindValue(\":file_name\", $data[\"response_curve_image_log\"], PDO::PARAM_STR);\n          $statement->bindValue(\":response_curve_images_id\", $existing_data[\"response_curve_images_id\"], PDO::PARAM_STR);\n          $statement->execute();\n        }\n      }\n\n      if($data[\"response_curve_image_residual\"]) {\n        // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n        $existing_data = $this->get_single_image_data(\n          'panorama_response_curve_images'\n          ,$data\n        );\n\n        if(!$existing_data) {\n          // Insert residual plot into the database\n          $statement = $this->db->prepare(\"\n            INSERT INTO panorama_response_curve_images\n            ( import_log_id, analyte_peptide_id, laboratory_id, sequence, file_name, created_date )\n            VALUES ( :import_log_id, :analyte_peptide_id, :laboratory_id, :sequence, :file_name, NOW() )\");\n          $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":analyte_peptide_id\", $data[\"analyte_peptide_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":laboratory_id\", $data[\"laboratory_id\"], PDO::PARAM_INT);\n          $statement->bindValue(\":sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n          $statement->bindValue(\":file_name\", $data[\"response_curve_image_residual\"], PDO::PARAM_STR);\n          $statement->execute();\n        } else {\n          // Update the table.\n          $statement = $this->db->prepare(\"\n            UPDATE panorama_response_curve_images\n            SET file_name = :file_name\n            WHERE response_curve_images_id = :response_curve_images_id\n          \");\n          $statement->bindValue(\":file_name\", $data[\"response_curve_image_residual\"], PDO::PARAM_STR);\n          $statement->bindValue(\":response_curve_images_id\", $existing_data[\"response_curve_images_id\"], PDO::PARAM_STR);\n          $statement->execute();\n        }\n      }\n\n  }\n\n  public function import_validation_sample_images( $data = false ) {\n\n    if($data[\"analyte_peptide_id\"] && $data[\"laboratory_id\"] && $data[\"file_name\"] && $data[\"sequence\"]) {\n\n      // Hack. Uniform naming, fail.\n      $data[\"peptide_sequence\"] = $data[\"sequence\"];\n\n      // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n      $existing_data = $this->get_single_image_data(\n        'panorama_validation_sample_images'\n        ,$data\n      );\n\n      if(!$existing_data) {\n        // Insert validation sample image data into the database\n        $statement = $this->db->prepare(\"\n          INSERT INTO panorama_validation_sample_images\n          ( import_log_id, analyte_peptide_id, laboratory_id, sequence, file_name, created_date )\n          VALUES ( :import_log_id, :analyte_peptide_id, :laboratory_id, :sequence, :file_name, NOW() )\");\n        $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":analyte_peptide_id\", $data[\"analyte_peptide_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":laboratory_id\", $data[\"laboratory_id\"], PDO::PARAM_INT);\n        $statement->bindValue(\":sequence\", $data[\"sequence\"], PDO::PARAM_STR);\n        $statement->bindValue(\":file_name\", $data[\"file_name\"], PDO::PARAM_STR);\n        $statement->execute();\n      } else {\n        // Update the table.\n        $statement = $this->db->prepare(\"\n          UPDATE panorama_validation_sample_images\n          SET file_name = :file_name\n          WHERE validation_sample_images_id = :validation_sample_images_id\n        \");\n        $statement->bindValue(\":file_name\", $data[\"file_name\"], PDO::PARAM_STR);\n        $statement->bindValue(\":validation_sample_images_id\", $existing_data[\"validation_sample_images_id\"], PDO::PARAM_STR);\n        $statement->execute();\n      }\n    }\n  }\n\n  public function slice_image( $panorama_images_storage_path, $name, $imageFileName, $crop_width, $crop_height ) {\n\n    $fileName = $panorama_images_storage_path . $imageFileName;\n\n    $img = new Imagick($fileName);\n    $imgHeight = $img->getImageHeight();\n    $imgWidth = $img->getImageWidth();\n\n    $crop_width_num_times = ceil($imgWidth/$crop_width);\n    $crop_height_num_times = ceil($imgHeight/$crop_height);\n    for($i = 0; $i < $crop_width_num_times; $i++) {\n      for($j = 0; $j < $crop_height_num_times; $j++) {\n        $img = new Imagick($fileName);\n        $x = ($i * $crop_width);\n        $y = ($j * $crop_height);\n        $img->cropImage($crop_width, $crop_height, $x, $y);\n        $data = $img->getImageBlob();\n\n        $newFileName = $panorama_images_storage_path . $name . \"_\" . $x . \"_\" . $y . \".jpg\";\n        $result = file_put_contents ($newFileName, $data);\n      }\n    }\n  }\n\n  public function import_validation_sample_images_data( $data = false ) {\n\n    if($data) {\n\n      foreach($data as $value) {\n\n        // Massage the horkd data\n        $insert = implode(\"','\", $value);\n        $insert = str_replace('\"', '', $insert);\n        $insert = \"'\".$insert.\"'\";\n\n        // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n        $statement = $this->db->prepare(\"\n          SELECT panorama_validation_sample_data_id, sequence\n          FROM panorama_validation_sample_data\n          WHERE fragment_ion = '\".str_replace('\"', '', $value[0]).\"'\n          AND sequence = '\".str_replace('\"', '', $value[13]).\"'\n          AND analyte_peptide_id = '\".str_replace('\"', '', $value[14]).\"'\n          AND laboratory_id = '\".str_replace('\"', '', $value[15]).\"'\n        \");\n        $statement->execute();\n        $existing_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n        if($existing_data) {\n          // Update the table.\n          $statement = $this->db->prepare(\"\n            UPDATE panorama_validation_sample_data\n            SET\n                fragment_ion = '\".str_replace('\"', '', $value[0]).\"'\n              , low_intra_CV = '\".str_replace('\"', '', $value[1]).\"'\n              , med_intra_CV = '\".str_replace('\"', '', $value[2]).\"'\n              , high_intra_CV = '\".str_replace('\"', '', $value[3]).\"'\n              , low_inter_CV = '\".str_replace('\"', '', $value[4]).\"'\n              , med_inter_CV = '\".str_replace('\"', '', $value[5]).\"'\n              , high_inter_CV = '\".str_replace('\"', '', $value[6]).\"'\n              , low_total_CV = '\".str_replace('\"', '', $value[7]).\"'\n              , med_total_CV = '\".str_replace('\"', '', $value[8]).\"'\n              , high_total_CV = '\".str_replace('\"', '', $value[9]).\"'\n              , low_count = '\".str_replace('\"', '', $value[10]).\"'\n              , med_count = '\".str_replace('\"', '', $value[11]).\"'\n              , high_count = '\".str_replace('\"', '', $value[12]).\"'\n            WHERE panorama_validation_sample_data_id = \".$existing_data[\"panorama_validation_sample_data_id\"]);\n          $statement->execute();\n        } else {\n          // Insert validation sample image data into the database\n          $statement = $this->db->prepare(\"INSERT INTO\n            panorama_validation_sample_data\n              (fragment_ion\n              ,low_intra_CV\n              ,med_intra_CV\n              ,high_intra_CV\n              ,low_inter_CV\n              ,med_inter_CV\n              ,high_inter_CV\n              ,low_total_CV\n              ,med_total_CV\n              ,high_total_CV\n              ,low_count\n              ,med_count\n              ,high_count\n              ,sequence\n              ,analyte_peptide_id\n              ,laboratory_id\n              ,import_log_id\n              ,created_date)\n            VALUES (\".$insert.\", NOW() )\");\n          $statement->execute();\n        }\n        \n      }\n\n    }\n\n  }\n\n  public function panorama_chromatogram_images_failed(\n      $import_log_id = false\n    , $type = false\n    , $analyte_peptide_id = false\n    , $peptide_sequence = false\n    , $modified_peptide_sequence = false\n    , $laboratory_name = false\n    , $laboratory_abbreviation = false\n    , $error_response = false\n    , $panorama_url = false\n  ) {\n\n    $statement = $this->db->prepare(\"\n      INSERT INTO panorama_chromatogram_images_failed\n      ( import_log_id, type, analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date )\n      VALUES ( :import_log_id, :type, :analyte_peptide_id, :peptide_sequence, :modified_peptide_sequence, :laboratory_name, :laboratory_abbreviation, :error_response, :panorama_url, NOW() )\");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->bindValue(\":type\", $type, PDO::PARAM_STR);\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":peptide_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":modified_peptide_sequence\", $modified_peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_name\", $laboratory_name, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_abbreviation\", $laboratory_abbreviation, PDO::PARAM_STR);\n    $statement->bindValue(\":error_response\", $error_response, PDO::PARAM_STR);\n    $statement->bindValue(\":panorama_url\", $panorama_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function panorama_response_curve_images_failed(\n      $import_log_id = false\n    , $curve_type = false\n    , $analyte_peptide_id = false\n    , $peptide_sequence = false\n    , $modified_peptide_sequence = false\n    , $laboratory_name = false\n    , $laboratory_abbreviation = false\n    , $error_response = false\n    , $panorama_url = false\n  ) {\n\n    $statement = $this->db->prepare(\"\n      INSERT INTO panorama_response_curve_images_failed\n      ( import_log_id, curve_type, analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date )\n      VALUES ( :import_log_id, :curve_type, :analyte_peptide_id, :peptide_sequence, :modified_peptide_sequence, :laboratory_name, :laboratory_abbreviation, :error_response, :panorama_url, NOW() )\");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->bindValue(\":curve_type\", $curve_type, PDO::PARAM_STR);\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":peptide_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":modified_peptide_sequence\", $modified_peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_name\", $laboratory_name, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_abbreviation\", $laboratory_abbreviation, PDO::PARAM_STR);\n    $statement->bindValue(\":error_response\", $error_response, PDO::PARAM_STR);\n    $statement->bindValue(\":panorama_url\", $panorama_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function panorama_validation_sample_images_failed(\n      $import_log_id = false\n    , $analyte_peptide_id = false\n    , $peptide_sequence = false\n    , $modified_peptide_sequence = false\n    , $laboratory_name = false\n    , $laboratory_abbreviation = false\n    , $error_response = false\n    , $panorama_url = false\n  ) {\n\n    $statement = $this->db->prepare(\"\n      INSERT INTO panorama_validation_sample_images_failed\n      ( import_log_id, analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date )\n      VALUES ( :import_log_id, :analyte_peptide_id, :peptide_sequence, :modified_peptide_sequence, :laboratory_name, :laboratory_abbreviation, :error_response, :panorama_url, NOW() )\");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":peptide_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":modified_peptide_sequence\", $modified_peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_name\", $laboratory_name, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_abbreviation\", $laboratory_abbreviation, PDO::PARAM_STR);\n    $statement->bindValue(\":error_response\", $error_response, PDO::PARAM_STR);\n    $statement->bindValue(\":panorama_url\", $panorama_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function panorama_validation_sample_data_failed(\n      $import_log_id = false\n    , $analyte_peptide_id = false\n    , $peptide_sequence = false\n    , $modified_peptide_sequence = false\n    , $laboratory_name = false\n    , $laboratory_abbreviation = false\n    , $error_response = false\n    , $panorama_url = false\n  ) {\n\n    $statement = $this->db->prepare(\"\n      INSERT INTO panorama_validation_sample_data_failed\n      ( import_log_id, analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date )\n      VALUES ( :import_log_id, :analyte_peptide_id, :peptide_sequence, :modified_peptide_sequence, :laboratory_name, :laboratory_abbreviation, :error_response, :panorama_url, NOW() )\");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":peptide_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":modified_peptide_sequence\", $modified_peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_name\", $laboratory_name, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_abbreviation\", $laboratory_abbreviation, PDO::PARAM_STR);\n    $statement->bindValue(\":error_response\", $error_response, PDO::PARAM_STR);\n    $statement->bindValue(\":panorama_url\", $panorama_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function lod_loq_comparison_data_failed(\n      $import_log_id = false\n    , $analyte_peptide_id = false\n    , $peptide_sequence = false\n    , $modified_peptide_sequence = false\n    , $laboratory_name = false\n    , $laboratory_abbreviation = false\n    , $error_response = false\n    , $panorama_url = false\n  ) {\n\n    $statement = $this->db->prepare(\"\n      INSERT INTO lod_loq_comparison_data_failed\n      ( import_log_id, analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date )\n      VALUES ( :import_log_id, :analyte_peptide_id, :peptide_sequence, :modified_peptide_sequence, :laboratory_name, :laboratory_abbreviation, :error_response, :panorama_url, NOW() )\");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":peptide_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":modified_peptide_sequence\", $modified_peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_name\", $laboratory_name, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_abbreviation\", $laboratory_abbreviation, PDO::PARAM_STR);\n    $statement->bindValue(\":error_response\", $error_response, PDO::PARAM_STR);\n    $statement->bindValue(\":panorama_url\", $panorama_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function curve_fit_data_failed(\n      $import_log_id = false\n    , $analyte_peptide_id = false\n    , $peptide_sequence = false\n    , $modified_peptide_sequence = false\n    , $laboratory_name = false\n    , $laboratory_abbreviation = false\n    , $error_response = false\n    , $panorama_url = false\n  ) {\n\n    $statement = $this->db->prepare(\"\n      INSERT INTO response_curves_data_failed\n      ( import_log_id, analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date )\n      VALUES ( :import_log_id, :analyte_peptide_id, :peptide_sequence, :modified_peptide_sequence, :laboratory_name, :laboratory_abbreviation, :error_response, :panorama_url, NOW() )\");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":peptide_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":modified_peptide_sequence\", $modified_peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_name\", $laboratory_name, PDO::PARAM_STR);\n    $statement->bindValue(\":laboratory_abbreviation\", $laboratory_abbreviation, PDO::PARAM_STR);\n    $statement->bindValue(\":error_response\", $error_response, PDO::PARAM_STR);\n    $statement->bindValue(\":panorama_url\", $panorama_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function check_for_duplicate( $table = false, $filename = false ) {\n\n    $data = false;\n\n    if($table && $filename) {\n      $statement = $this->db->prepare(\"SELECT file_name FROM `\".$table.\"` WHERE file_name = '\".$filename.\"'\");\n      $statement->execute();\n      $data = $statement->fetch(PDO::FETCH_ASSOC);\n    }\n\n    return $data;\n\n  }\n\n  public function import_panorama_peptide_url( $analyte_peptide_id = false, $panorama_peptide_url = false ) {\n    $statement = $this->db->prepare(\"\n      UPDATE analyte_peptide\n      SET panorama_peptide_url = :panorama_peptide_url\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":panorama_peptide_url\", $panorama_peptide_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function import_panorama_protein_url( $analyte_peptide_id = false, $panorama_protein_url = false ) {\n    $statement = $this->db->prepare(\"\n      UPDATE analyte_peptide\n      SET panorama_protein_url = :panorama_protein_url\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":panorama_protein_url\", $panorama_protein_url, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function import_peptide_standard_label_type( $peptide_sequence = false, $peptide_standard_label_type = false ) {\n    $statement = $this->db->prepare(\"\n      UPDATE analyte_peptide\n      SET peptide_standard_label_type = :peptide_standard_label_type\n      WHERE peptide_sequence = :peptide_sequence\");\n    $statement->bindValue(\":peptide_sequence\", $peptide_sequence, PDO::PARAM_STR);\n    $statement->bindValue(\":peptide_standard_label_type\", $peptide_standard_label_type, PDO::PARAM_STR);\n    $statement->execute();\n  }\n\n  public function check_for_missed_chromatograms( $analyte_peptide_id = false, $laboratory_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT\n       panorama_chromatogram_images_id\n      ,analyte_peptide_id\n      ,sequence as peptide_sequence\n      ,laboratory_id\n      FROM panorama_chromatogram_images\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function check_for_missed_response_curves( $analyte_peptide_id = false, $laboratory_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT\n         response_curve_images_id\n        ,analyte_peptide_id\n        ,sequence as peptide_sequence\n        ,laboratory_id\n      FROM panorama_response_curve_images\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function check_for_missed_validation_samples( $analyte_peptide_id = false, $laboratory_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT\n         validation_sample_images_id\n        ,analyte_peptide_id\n        ,sequence as peptide_sequence\n        ,laboratory_id\n      FROM panorama_validation_sample_images\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  // public function check_for_missed_validation_sample_tabular_data( $analyte_peptide_id = false, $laboratory_id = false ) {\n  //   $statement = $this->db->prepare(\"\n  //     SELECT\n  //        panorama_validation_sample_data_id\n  //       ,analyte_peptide_id\n  //       ,sequence as peptide_sequence\n  //       ,laboratory_id\n  //     FROM panorama_validation_sample_data\n  //     WHERE analyte_peptide_id = :analyte_peptide_id\n  //     AND laboratory_id = :laboratory_id\");\n  //   $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n  //   $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n  //   $statement->execute();\n  //   $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n  //   return $data;\n  // }\n\n  public function get_all_chromatogram_image_file_names( $laboratory_id = false, $import_log_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT \n          panorama_chromatogram_images.file_name\n        , analyte_peptide.analyte_peptide_id\n        , CONCAT('CPTAC-',analyte_peptide.analyte_peptide_id) as cptac_id\n        , analyte_peptide.peptide_sequence\n        , analyte_peptide.peptide_modified_sequence\n        , group.group_id as laboratories_id\n        , group.name as laboratory_name\n        , group.abbreviation as laboratory_abbreviation\n        , assay_parameters_new.celllysate_path\n        , protein.import_log_id\n      FROM panorama_chromatogram_images\n      LEFT JOIN analyte_peptide ON analyte_peptide.analyte_peptide_id = panorama_chromatogram_images.analyte_peptide_id\n      \n      LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id\n      LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n      \n      WHERE panorama_chromatogram_images.laboratory_id = :laboratory_id\n      AND panorama_chromatogram_images.import_log_id = :import_log_id\n      ORDER BY import_log_id, sequence ASC\");\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function get_all_response_curve_image_file_names( $laboratory_id = false, $import_log_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT \n          panorama_response_curve_images.file_name\n        , analyte_peptide.analyte_peptide_id\n        , CONCAT('CPTAC-',analyte_peptide.analyte_peptide_id) as cptac_id\n        , analyte_peptide.peptide_sequence\n        , analyte_peptide.peptide_modified_sequence\n        , group.group_id as laboratories_id\n        , group.name as laboratory_name\n        , group.abbreviation as laboratory_abbreviation\n        , assay_parameters_new.celllysate_path\n        , protein.import_log_id\n      FROM panorama_response_curve_images\n      LEFT JOIN analyte_peptide ON analyte_peptide.analyte_peptide_id = panorama_response_curve_images.analyte_peptide_id\n      \n      LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id\n      LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n\n      WHERE panorama_response_curve_images.laboratory_id = :laboratory_id\n      AND panorama_response_curve_images.import_log_id = :import_log_id\n      ORDER BY import_log_id, sequence ASC\");\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function get_all_repeatability_image_file_names( $laboratory_id = false, $import_log_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT \n          panorama_validation_sample_images.file_name\n        , analyte_peptide.analyte_peptide_id\n        , CONCAT('CPTAC-',analyte_peptide.analyte_peptide_id) as cptac_id\n        , analyte_peptide.peptide_sequence\n        , analyte_peptide.peptide_modified_sequence\n        , group.group_id as laboratories_id\n        , group.name as laboratory_name\n        , group.abbreviation as laboratory_abbreviation\n        , assay_parameters_new.celllysate_path\n        , protein.import_log_id\n      FROM panorama_validation_sample_images\n      LEFT JOIN analyte_peptide ON analyte_peptide.analyte_peptide_id = panorama_validation_sample_images.analyte_peptide_id\n\n      LEFT JOIN protein on analyte_peptide.protein_id = protein.protein_id\n      LEFT JOIN import_log ON import_log.import_log_id = protein.import_log_id\n      LEFT JOIN assay_parameters_new on assay_parameters_new.import_log_id = protein.import_log_id\n      LEFT JOIN `group` ON import_log.laboratory_id = group.group_id\n\n      WHERE panorama_validation_sample_images.laboratory_id = :laboratory_id\n      AND panorama_validation_sample_images.import_log_id = :import_log_id\n      ORDER BY import_log_id, sequence ASC\");\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function get_images_data( $table = false, $analyte_peptide_id = false, $laboratory_id = false ) {\n\n    // Hack... because I failed in naming the column names correctly.\n    $id_column_name = ($table == \"panorama_chromatogram_images\") ? \"panorama_chromatogram_images_id\" : str_replace(\"panorama_\", \"\", $table).\"_id\";\n\n    $statement = $this->db->prepare(\"\n      SELECT \".$id_column_name.\", file_name\n      FROM `\".$table.\"`\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function get_single_image_data( $table = false, $data = false ) {\n\n    // Hack... because I failed in naming the column names correctly.\n    $id_column_name = ($table == \"panorama_chromatogram_images\") ? \"panorama_chromatogram_images_id\" : str_replace(\"panorama_\", \"\", $table).\"_id\";\n\n    if(isset($data[\"file_name\"])) {\n      $file_name = $data[\"file_name\"];\n    }\n    if(isset($data[\"response_curve_image_linear\"])) {\n      $file_name = $data[\"response_curve_image_linear\"];\n    }\n    if(isset($data[\"response_curve_image_log\"])) {\n      $file_name = $data[\"response_curve_image_log\"];\n    }\n    if(isset($data[\"response_curve_image_residual\"])) {\n      $file_name = $data[\"response_curve_image_residual\"];\n    }\n    \n    $statement = $this->db->prepare(\"\n      SELECT\n          \".$id_column_name.\"\n        , analyte_peptide_id\n        , laboratory_id\n        , sequence\n        , file_name\n      FROM `\".$table.\"`\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\n      AND sequence = :sequence\n      AND file_name = :file_name\");\n    $statement->bindValue(\":analyte_peptide_id\", $data[\"analyte_peptide_id\"], PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $data[\"laboratory_id\"], PDO::PARAM_INT);\n    $statement->bindValue(\":sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n    $statement->bindValue(\":file_name\", $file_name, PDO::PARAM_STR);\n    $statement->execute();\n    $data = $statement->fetch(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function check_for_missed_images( $laboratory_id = false, $import_log_id = false, $all_sequences = false ) {\n\n    $sequences = false;\n    $sequences[\"chromatograms\"] = array();\n    $sequences[\"response_curves\"] = array();\n    $sequences[\"validation_samples\"] = array();\n\n    $path = $this->final_global_template_vars[\"panorama_images_storage_path\"];\n\n    /*\n     * Chromatogram image checks\n     */\n    \n    $missed_sequences = array();\n\n    // Check for missing Chromatogram images in the database, but not in the filesystem.\n    $chromatogram_images_data = $this->get_all_chromatogram_image_file_names( $laboratory_id, $import_log_id );\n    $i=1;\n    foreach($chromatogram_images_data as $file_data) {\n      if ( !file_exists($path.$file_data['file_name']) || (filesize($path.$file_data['file_name']) < '5808') ) {\n        $sequences[\"chromatograms\"][] = $file_data;\n        $i++;\n      }\n    }\n\n    // Get all of the missed chromatogram images in the database.\n    foreach($all_sequences as $sequence) {\n      $missed[\"chromatograms\"] = $this->check_for_missed_chromatograms( $sequence[\"analyte_peptide_id\"], $sequence[\"laboratories_id\"] );\n      if( count($missed[\"chromatograms\"]) < 3 ) {\n        $missed_sequences[] = $sequence;\n      }\n    }\n\n    $sequences[\"chromatograms\"] = array_merge($missed_sequences, $sequences[\"chromatograms\"]);\n\n    // Add chromatogram image errors from Panorama to the array.\n    $i=0;\n    foreach($sequences[\"chromatograms\"] as $single) {\n      $sequences[\"chromatograms\"][$i][\"error\"] = $this->get_panorama_chromatogram_images_failed( $single[\"analyte_peptide_id\"] );\n      $i++;\n    }\n    $i=0;\n    foreach($sequences[\"chromatograms\"] as $sequence) {\n      if(isset($sequence[\"error\"]) && !empty($sequence[\"error\"])) {\n        foreach($sequence[\"error\"] as $error) {\n          if(isset($error[\"error_response\"]) && !empty($error[\"error_response\"])) {\n            $stripped = strip_tags(json_encode($error[\"error_response\"]));\n            $sequences[\"chromatograms\"][$i][\"error_response\"] = trim(json_decode($stripped));\n            $sequences[\"chromatograms\"][$i][\"cptac_id\"] = \"CPTAC-\".$sequence[\"analyte_peptide_id\"];\n          }\n        }\n      }\n      $i++;\n    }\n\n    /*\n     * Response Curve image checks\n     */\n\n    $missed_sequences = array();\n\n    // Check for missing Response Curve images in the database, but not in the filesystem.\n    $response_curve_images_data = $this->get_all_response_curve_image_file_names( $laboratory_id, $import_log_id );\n    $i=1;\n    foreach($response_curve_images_data as $file_data) {\n      if ( !file_exists($path.$file_data['file_name']) || (filesize($path.$file_data['file_name']) < '5808') ) {\n        $sequences[\"response_curves\"][] = $file_data;\n        $i++;\n      }\n    }\n\n    // Get all of the missed response curve images in the database.\n    foreach($all_sequences as $sequence) {\n      $missed[\"response_curves\"] = $this->check_for_missed_response_curves( $sequence[\"analyte_peptide_id\"], $sequence[\"laboratories_id\"] );\n      if( count($missed[\"response_curves\"]) < 3 ) {\n        $missed_sequences[] = $sequence;\n      }\n    }\n\n    $sequences[\"response_curves\"] = array_merge($missed_sequences, $sequences[\"response_curves\"]);\n\n    // Add response curve errors from Panorama to the array.\n    $i=0;\n    foreach($sequences[\"response_curves\"] as $single) {\n      $sequences[\"response_curves\"][$i][\"error\"] = $this->get_panorama_response_curve_images_failed( $single[\"analyte_peptide_id\"] );\n      $i++;\n    }\n\n    $i=0;\n    foreach($sequences[\"response_curves\"] as $sequence) {\n      if(isset($sequence[\"error\"]) && !empty($sequence[\"error\"])) {\n        foreach($sequence[\"error\"] as $error) {\n          if(isset($error[\"error_response\"]) && !empty($error[\"error_response\"])) {\n            $stripped = strip_tags(json_encode($error[\"error_response\"]));\n            $sequences[\"response_curves\"][$i][\"error_response\"] = trim(json_decode($stripped));\n            $sequences[\"response_curves\"][$i][\"cptac_id\"] = \"CPTAC-\".$sequence[\"analyte_peptide_id\"];\n          }\n        }\n      }\n      $i++;\n    }\n\n    /*\n     * Validation Sample image checks\n     */\n\n    $missed_sequences = array();\n\n    // Check for missing Validation Sample (Repeatability) images in the database, but not in the filesystem.\n    $repeatability_images_data = $this->get_all_repeatability_image_file_names( $laboratory_id, $import_log_id );\n\n    $i=1;\n    foreach($repeatability_images_data as $file_data) {\n      if ( !file_exists($path.$file_data['file_name']) || (filesize($path.$file_data['file_name']) < '5808') ) {\n        $sequences[\"validation_samples\"][] = $file_data;\n        $i++;\n      }\n    }\n\n    // Get all of the missed validation sample images in the database.\n    foreach($all_sequences as $sequence) {\n      $missed[\"validation_samples\"] = $this->check_for_missed_validation_samples( $sequence[\"analyte_peptide_id\"], $sequence[\"laboratories_id\"] );\n      if( count($missed[\"validation_samples\"]) < 1 ) {\n        $missed_sequences[] = $sequence;\n      }\n    }\n\n    $sequences[\"validation_samples\"] = array_merge($missed_sequences, $sequences[\"validation_samples\"]);\n\n    // Add validation sample errors from Panorama to the array.\n    $i=0;\n    foreach($sequences[\"validation_samples\"] as $single) {\n      $sequences[\"validation_samples\"][$i][\"error\"] = $this->get_validation_sample_images_failed( $single[\"analyte_peptide_id\"], $sequence[\"cptac_id\"] );\n      $i++;\n    }\n\n    $missed_sequences = array();\n\n    return $sequences;\n\n  }\n\n  public function check_for_missed_lod_loq_data( $analyte_peptide_id = false, $laboratory_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT \n         lod_loq_comparison_id\n        ,analyte_peptide_id\n        ,peptide as peptide_sequence\n        ,laboratory_id\n      FROM lod_loq_comparison\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function check_for_missed_response_curves_data( $analyte_peptide_id = false, $laboratory_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT\n         response_curves_data_id\n        ,analyte_peptide_id\n        ,peptide as peptide_sequence\n        ,laboratory_id\n      FROM response_curves_data\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function check_for_missed_validation_samples_data( $analyte_peptide_id = false, $laboratory_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT \n         panorama_validation_sample_data_id\n        ,analyte_peptide_id\n        ,sequence as peptide_sequence\n        ,laboratory_id\n      FROM panorama_validation_sample_data\n      WHERE analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $laboratory_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function check_for_missed_images_data( $laboratory_id = false, $import_log_id = false, $all_sequences = false ) {\n\n    $sequences = false;\n    $sequences[\"lod_loq_data\"] = array();\n    $sequences[\"response_curves_data\"] = array();\n    $sequences[\"validation_samples_data\"] = array();\n\n    if($laboratory_id && $import_log_id) {\n\n      /*\n       * LOD/LOQ data checks\n       */\n\n      $missed_sequences = array();\n\n      // Get all of the failed LOD/LOQ data images data.\n      $i=0;\n      foreach($all_sequences as $sequence) {\n        $missed[\"lod_loq_data\"] = $this->check_for_missed_lod_loq_data( $sequence[\"analyte_peptide_id\"], $sequence[\"laboratories_id\"] );\n        if( count($missed[\"lod_loq_data\"]) < 1 ) {\n          $missed_sequences[$i] = $sequence;\n        }\n        $i++;\n      }\n\n      // Add all of the failed LOD/LOQ errors from Panorama to the array.\n      $i=0;\n      foreach($all_sequences as $sequence) {\n        $data = $this->get_lod_loq_comparison_data_failed( $sequence[\"analyte_peptide_id\"], $sequence[\"cptac_id\"] );\n        if($data) {\n          unset($missed_sequences[$i]);\n          $sequences[\"lod_loq_data\"][$i] = $data;\n        }\n        $i++;\n      }\n\n      $sequences[\"lod_loq_data\"] = array_merge($missed_sequences, $sequences[\"lod_loq_data\"]);\n\n      // Massage the data a bit.\n      $i=0;\n      foreach($sequences[\"lod_loq_data\"] as $sequence) {\n        if(isset($sequence[\"error_response\"]) && !empty($sequence[\"error_response\"])) {\n          $stripped = strip_tags(json_encode($sequence[\"error_response\"]));\n          $sequences[\"lod_loq_data\"][$i][\"error_response\"] = trim(json_decode($stripped));\n          $sequences[\"lod_loq_data\"][$i][\"laboratories_id\"] = $laboratory_id;\n          $sequences[\"lod_loq_data\"][$i][\"import_log_id\"] = $import_log_id;\n          $sequences[\"lod_loq_data\"][$i][\"celllysate_path\"] = $all_sequences[0][\"celllysate_path\"];\n        } else {\n          $sequences[\"lod_loq_data\"][$i][\"error_response\"] = false;\n          $sequences[\"lod_loq_data\"][$i][\"panorama_url\"] = false;\n        }\n        $i++;\n      }\n\n      /*\n       * Response Curves (Curve Fit) data checks\n       */\n\n      $missed_sequences = array();\n\n      // Get all of the failed Response Curves (Curve Fit) data images data.\n      $i=0;\n      foreach($all_sequences as $sequence) {\n        $missed[\"response_curves_data\"] = $this->check_for_missed_response_curves_data( $sequence[\"analyte_peptide_id\"], $sequence[\"laboratories_id\"] );\n        if( count($missed[\"response_curves_data\"]) < 1 ) {\n          $missed_sequences[$i] = $sequence;\n        }\n        $i++;\n      }\n\n      // Add all of the failed Response Curves (Curve Fit) errors from Panorama to the array.\n      $i=0;\n      foreach($all_sequences as $sequence) {\n        $data = $this->get_response_curves_data_failed( $sequence[\"analyte_peptide_id\"], $sequence[\"cptac_id\"] );\n        if($data) {\n          unset($missed_sequences[$i]);\n          $sequences[\"response_curves_data\"][$i] = $data;\n        }\n        $i++;\n      }\n\n      $sequences[\"response_curves_data\"] = array_merge($missed_sequences, $sequences[\"response_curves_data\"]);      \n\n      // Massage the data a bit.\n      $i=0;\n      foreach($sequences[\"response_curves_data\"] as $sequence) {\n        if(isset($sequence[\"error_response\"]) && !empty($sequence[\"error_response\"])) {\n          $stripped = strip_tags(json_encode($sequence[\"error_response\"]));\n          $sequences[\"response_curves_data\"][$i][\"error_response\"] = trim(json_decode($stripped));\n          $sequences[\"response_curves_data\"][$i][\"laboratories_id\"] = $laboratory_id;\n          $sequences[\"response_curves_data\"][$i][\"import_log_id\"] = $import_log_id;\n          $sequences[\"response_curves_data\"][$i][\"celllysate_path\"] = $all_sequences[0][\"celllysate_path\"];\n        } else {\n          $sequences[\"response_curves_data\"][$i][\"error_response\"] = false;\n          $sequences[\"response_curves_data\"][$i][\"panorama_url\"] = false;\n        }\n        $i++;\n      }\n\n      \n\n      /*\n       * Repeatability (Validation Sample) data checks\n       */\n\n      $missed_sequences = array();\n\n      // Get all of the failed Repeatability (Validation Sample) data.\n      $i=0;\n      foreach($all_sequences as $sequence) {\n        $missed[\"validation_samples_data\"] = $this->check_for_missed_validation_samples_data( $sequence[\"analyte_peptide_id\"], $sequence[\"laboratories_id\"] );\n        if( count($missed[\"validation_samples_data\"]) < 1 ) {\n          $missed_sequences[$i] = $sequence;\n        }\n        $i++;\n      }\n\n      // Add all of the failed Repeatability (Validation Sample) errors from Panorama to the array.\n      $i=0;\n      foreach($all_sequences as $sequence) {\n        $data = $this->get_validation_sample_data_failed( $sequence[\"analyte_peptide_id\"], $sequence[\"cptac_id\"] );\n        if($data) {\n          unset($missed_sequences[$i]);\n          $sequences[\"validation_samples_data\"][$i] = $data;\n        }\n        $i++;\n      }\n\n      $sequences[\"validation_samples_data\"] = array_merge($missed_sequences, $sequences[\"validation_samples_data\"]);\n\n      // Massage the data a bit.\n      $i=0;\n      foreach($sequences[\"validation_samples_data\"] as $sequence) {\n        if(isset($sequence[\"error_response\"]) && !empty($sequence[\"error_response\"])) {\n          $stripped = strip_tags(json_encode($sequence[\"error_response\"]));\n          $sequences[\"validation_samples_data\"][$i][\"error_response\"] = trim(json_decode($stripped));\n          $sequences[\"validation_samples_data\"][$i][\"laboratories_id\"] = $laboratory_id;\n          $sequences[\"validation_samples_data\"][$i][\"import_log_id\"] = $import_log_id;\n          $sequences[\"validation_samples_data\"][$i][\"celllysate_path\"] = $all_sequences[0][\"celllysate_path\"];\n        } else {\n          $sequences[\"validation_samples_data\"][$i][\"error_response\"] = false;\n          $sequences[\"validation_samples_data\"][$i][\"panorama_url\"] = false;\n        }\n        $i++;\n      }\n\n    }\n\n    return $sequences;\n\n  }\n\n  public function get_panorama_chromatogram_images_failed( $analyte_peptide_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT type, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date\n      FROM panorama_chromatogram_images_failed\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function get_panorama_response_curve_images_failed( $analyte_peptide_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT curve_type, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date\n      FROM panorama_response_curve_images_failed\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function get_lod_loq_comparison_data_failed( $analyte_peptide_id = false, $cptac_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date\n      FROM lod_loq_comparison_data_failed\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetch(PDO::FETCH_ASSOC);\n    if($data) {\n      $data[\"cptac_id\"] = $cptac_id;\n      return $data;\n    }\n  }\n\n  public function get_response_curves_data_failed( $analyte_peptide_id = false, $cptac_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date\n      FROM response_curves_data_failed\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetch(PDO::FETCH_ASSOC);\n    if($data) {\n      $data[\"cptac_id\"] = $cptac_id;\n      return $data;\n    }\n  }\n\n  public function get_validation_sample_images_failed( $analyte_peptide_id = false, $cptac_id = false ) {\n    $data = false;\n    $statement = $this->db->prepare(\"\n      SELECT analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date\n      FROM panorama_validation_sample_images_failed\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetch(PDO::FETCH_ASSOC);\n    if($data) {\n      $data[\"cptac_id\"] = $cptac_id;\n      return $data;\n    }\n  }\n\n  public function get_validation_sample_data_failed( $analyte_peptide_id = false, $cptac_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT analyte_peptide_id, peptide_sequence, modified_peptide_sequence, laboratory_name, laboratory_abbreviation, error_response, panorama_url, created_date\n      FROM panorama_validation_sample_data_failed\n      WHERE analyte_peptide_id = :analyte_peptide_id\");\n    $statement->bindValue(\":analyte_peptide_id\", $analyte_peptide_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetch(PDO::FETCH_ASSOC);\n    if($data) {\n      $data[\"cptac_id\"] = $cptac_id;\n    }\n    return $data;\n  }\n\n  public function purge_error_logs( $table = false, $import_log_id = false ) {\n    if($table && $import_log_id) {\n      $statement = $this->db->prepare(\"\n        DELETE\n        FROM `\".$table.\"`\n        WHERE `import_log_id` = \" . (int)$import_log_id );\n      $statement->execute();\n      // Reset the auto increment to the highest value in the ID field.\n      $statement = $this->db->prepare(\"ALTER TABLE `\".$table.\"` AUTO_INCREMENT = 1\");\n      $statement->execute();\n    }\n  }\n\n  public function insert_executed_imports( $data = false ) {\n    $statement = $this->db->prepare(\"INSERT INTO imports_executed_log \n      (import_log_id, laboratory_id, import_executed_date, executed_by_user_id)\n      VALUES (:import_log_id, :laboratory_id, NOW(), :executed_by_user_id)\n    \");\n    $statement->bindValue(\":import_log_id\", $data[\"import_log_id\"], PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $data[\"laboratory_id\"], PDO::PARAM_INT);\n    $statement->bindValue(\":executed_by_user_id\", $data[\"executed_by_user_id\"], PDO::PARAM_STR);\n    $statement->execute();\n    //return $this->db->lastInsertId();\n\n    //run update_executed_import_end_date to complete test import.  RG\n    $imports_executed_log_id = $this->db->lastInsertId();\n    $this->update_executed_import_end_date($imports_executed_log_id);\n    return $imports_executed_log_id;\n  }\n\n  public function update_executed_import_end_date( $imports_executed_log_id = false ) {\n    if($imports_executed_log_id) {\n\n      // Get the total number of records imported.\n      $statement = $this->db->prepare(\"SELECT SQL_CALC_FOUND_ROWS protein_id\n        FROM protein\n        LEFT JOIN imports_executed_log ON imports_executed_log.import_log_id = protein.import_log_id\n        WHERE imports_executed_log.imports_executed_log_id = :imports_executed_log_id\");\n      $statement->bindValue(\":imports_executed_log_id\", $imports_executed_log_id, PDO::PARAM_INT);\n      $statement->execute();\n      $statement = $this->db->prepare(\"SELECT FOUND_ROWS()\");\n      $statement->execute();\n      $count = $statement->fetch(PDO::FETCH_ASSOC);\n\n      // Update the 'number_of_records' and 'import_end_date' fields in the 'imports_executed_log' table.\n      $statement = $this->db->prepare(\"UPDATE imports_executed_log\n        SET number_of_records = \".$count[\"FOUND_ROWS()\"].\"\n          , import_end_date = NOW()\n          , import_in_progress = 0\n        WHERE imports_executed_log_id = :imports_executed_log_id\n      \");\n      $statement->bindValue(\":imports_executed_log_id\", $imports_executed_log_id, PDO::PARAM_INT);\n      $statement->execute();\n    }\n  }\n\n  public function update_reimport_in_progress( $data = false ) {\n    // Update the 'reimport_in_progress' fields in the 'imports_executed_log' table.\n    $statement = $this->db->prepare(\"UPDATE imports_executed_log \n      SET reimport_in_progress = :reimport_in_progress\n      WHERE imports_executed_log_id = :imports_executed_log_id\n    \");\n    $statement->bindValue(\":reimport_in_progress\", $data[\"reimport_in_progress\"], PDO::PARAM_INT);\n    $statement->bindValue(\":imports_executed_log_id\", $data[\"imports_executed_log_id\"], PDO::PARAM_INT);\n    $statement->execute();\n  }\n\n  public function delete_data( $table = false, $id = false ) {\n\n    // Hack... because I failed in naming the column names correctly.\n    $id_column_name = ($table == \"panorama_chromatogram_images\") ? \"panorama_chromatogram_images_id\" : str_replace(\"panorama_\", \"\", $table).\"_id\";\n\n    $statement = $this->db->prepare(\"\n      DELETE\n      FROM `\".$table.\"`\n      WHERE \".$id_column_name.\" = \" . (int)$id );\n    $statement->execute();\n  }\n\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_panorama_data.class.php","digestWhenLastPersisted":"ca7bac5fda2f336fdc080f57f72eb3609c47f802","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"561e02cb5503f7983ee814627d89a2ee","text":"<?php\n  /*\n * Env Settings\n */\n\nerror_reporting(false);\n\nswitch($_SERVER[\"SERVER_NAME\"]) {\n\n  case \"fr-s-swpg-dev-3.ncifcrf.gov\":\n  case \"dev3.ncifcrf.gov\":\n    $db_conn = array(\n      \"name\" => \"cptac_assays_esac\"\n      ,\"host\" => \"sqldb1.abcc.ncifcrf.gov\"\n      ,\"user\" => \"cptac_db1_admin\"\n      ,\"password\" => \"G7Ffz3VMtTFBD\"\n      ,\"die_on_connection_failure\" => true\n      ,\"connection_error_message\" => \"The system is currently not accessible.\"\n      ,\"email_on_connection_failure\" => true\n      ,\"admin_emails\" => \"swpgabcc@gmail.com\"\n    );\n    $google_analytics_key = false;\n    $google_analytics_key_sitename = false;\n  break;\n  case \"ares.esacinc.com\":\n    $db_conn = array(\n       \"name\" => \"cptac_assay\"\n      ,\"host\" => \"192.168.99.100\"\n      ,\"user\" => \"cptac_assay\"\n      ,\"password\" => \"Changeme\"\n      ,\"die_on_connection_failure\" => true\n      ,\"connection_error_message\" => \"The system is currently not accessible.\"\n      ,\"email_on_connection_failure\" => true\n      ,\"admin_emails\" => \"swpgabcc@gmail.com\"\n    );\n    $google_analytics_key = false;\n    $google_analytics_key_sitename = false;\n  break;\n\n  default:\n  $db_conn = array(\n     \"name\" => \"cptac_assay\"\n    ,\"host\" => \"192.168.99.100\"\n    ,\"user\" => \"cptac_assay\"\n    ,\"password\" => \"Changeme\"\n    ,\"die_on_connection_failure\" => true\n    ,\"connection_error_message\" => \"The system is currently not accessible.\"\n    ,\"email_on_connection_failure\" => true\n    ,\"admin_emails\" => \"swpgabcc@gmail.com\"\n  );\n  $google_analytics_key = false;\n  $google_analytics_key_sitename = false;\n  break;\n}\n\n/**\n * Base Application Settings\n */\n\n$multipart_separator = '-----'.md5(time()).'-----';\n\n$panorama_paths = array(\n  \"server_raw\" => \"https://panoramaweb.org\"\n  ,\"server\" => \"https://panoramaweb.org/labkey\"\n  ,\"query_path\" => \"/query/CPTAC%20Assay%20Portal/\"\n  ,\"targetedms_query_path\" => \"/targetedms/CPTAC%20Assay%20Portal/\"\n  ,\"project_query_path\" => \"/project/CPTAC%20Assay%20Portal/\"\n);\n\n$swpg_global_settings = array(\n  \"site_name\" => \"CPTAC Assay Portal\"\n  ,\"superadmin_email_address\" => \"lossm@mail.nih.gov\"\n  ,\"force_ssl\" => ( ($_SERVER[\"SCRIPT_NAME\"] == '/assays/index.php') || ($_SERVER[\"REQUEST_URI\"] == '/') || ( stristr($_SERVER[\"REQUEST_URI\"], 'CPTAC') ) ) ? false : true\n  ,\"site_logo\" => \"/path/to/site/logo\"\n  ,\"core_type\" => $_SERVER[\"CORE_TYPE\"]\n  ,\"session_key\" => \"cptac_session_key\"\n  ,\"logout_url\" => \"/authenticate/logout\"\n  ,\"login_url\" => \"/authenticate\"\n  ,\"access_denied_url\" => \"/authenticate/access_denied\"\n  ,\"log_page_load\" => true\n  ,\"landing_page\" => \"/modules/\"\n  ,\"redirect_cookie_key\" => \"swpg_redirect\"\n  ,\"hide_public_site\" => true\n  ,\"google_analytics_key_new\" => $google_analytics_key\n  ,\"google_analytics_key_new_sitename\" => $google_analytics_key_sitename\n  ,\"module_icon_path\" => \"/modules/library/images/module_default_icon.png\"\n  ,\"db_connection\" => $db_conn\n  ,\"user_account_db_connection\" => $db_conn\n  ,\"db_connection_antibodies\" => false\n  ,\"core_templates\" => $_SERVER[\"PATH_TO_CORE\"] . \"slim_framework/SWPG/templates/swpg_bootstrap\"\n  ,\"menu_template_name\" => \"swpg_bootstrap_side_nav.html\"\n  ,\"layout_template_name\" => \"swpg_bootstrap_admin.html\"\n  ,\"site_templates\" => $_SERVER[\"DOCUMENT_ROOT\"] . \"/site/templates\"\n  ,\"default_site_module\" => $_SERVER[\"DOCUMENT_ROOT\"] . \"/site\"\n  ,\"site_footer\" => \"/assays/templates/footer.php\"\n  ,\"support_form_url\" => \"/support/\"\n  ,\"import_log_location\" => \"/assays_import/library/import_logs\"\n  // ,\"additional_header_links\" => array(\n  //  \"/faq\" => array(\n  //    \"text\" => \"FAQ\"\n  //  )\n  // )\n  ,\"current_user_roles_session_key\" => \"user_role_list\" //a list of all the roles a user is assigned to.  This does not take into account groups.  If a user is an admin for two groups, and an author for another, this will be ['admin','author'].  This will be used for displayed pages on the side nav\n  ,\"default_role_id\" => 5 //when a user logs in for the first time, the default role they will be given is this\n  //make sure that this is associative, so when module includes are merged, it will cascade properly\n  ,\"js_includes\" => array(\n    'admin_js' => '/site/library/js/javascript.js'\n  )\n  ,\"css_includes\" => array(\n  )\n  ,\"server_name\" => $_SERVER[\"SERVER_NAME\"]\n  ,\"request_uri\" => $_SERVER[\"REQUEST_URI\"]\n  ,\"upload_directory\"=> $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/sop_files/\"\n  ,\"sop_file_upload_directory\" => $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/sop_files/\"\n  // Google Oauth Keys\n  ,\"google_client_id\" => \"[google_client_id HERE]\"\n  ,\"google_client_secret\" => \"[google_client_secret HERE]\"\n\n  // For importing data from UniProt\n  ,\"uniprot_regions_array\" => array(\n    'topological domain'\n    ,'transmembrane region'\n    ,'intramembrane region'\n    ,'domain'\n    ,'repeat'\n    ,'calcium binding'\n    ,'zinc finger'\n    ,'dna binding'\n    ,'nucleotide phosphate-binding region'\n    ,'region of interest'\n    ,'coiled coil'\n    ,'motif'\n    ,'compositional bias'\n  )\n  ,\"files_directory\"=> \"/assays/library/images/\"\n  ,\"panorama_images_storage_path\"=> $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/panorama_test/\"\n  ,\"panorama_images_path\"=> \"/swpg_files/cptac/panorama_test/\"\n  ,\"sop_files_path\" => $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/sop_files/\"\n  ,\"database_backup_path\" => $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/database_backups/\"\n  ,\"temp_directory_path\" => $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/temp/\"\n  ,\"temp_directory_path_via_http\" => $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/temp/\"\n  ,\"disqus_shortname\" => ($_SERVER[\"SERVER_NAME\"] == 'assaysdev.cancer.gov') ? 'cptacdevswpg' : 'cptacswpg'\n  // Panorama / Labkey settings.\n  ,\"labkey_config\" => array(\n    \"email\" => \"lossm@mail.nih.gov\"\n    ,\"password\" => \"swpgtrident\"\n    ,\"server_raw\" => $panorama_paths[\"server_raw\"]\n    ,\"server\" => $panorama_paths[\"server\"]\n    ,\"query_endpoint_live\" => $panorama_paths[\"server\"].$panorama_paths[\"query_path\"]\n    ,\"targetedms_query_path\" => $panorama_paths[\"server\"].$panorama_paths[\"targetedms_query_path\"]\n    ,\"project_endpoint_live\" => $panorama_paths[\"server\"].$panorama_paths[\"project_query_path\"]\n  )\n  // Panorama Import error report email recipients.\n  ,\"panorama_errors_email_recipients_ids\" => array(\n     \"1\" // Michael Loss\n    //,\"65169\" // Jeffrey Whiteaker\n  )\n  ,\"google_analytics_config\" => array(\n    \"id\" => \"ga:78611517\"\n    ,\"path_to_key_file\" => $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/ga_key_file/74f850cf5d875f69aa9732e5b11acf7e58bfd9be-privatekey.p12\"\n    ,\"email_address\" => \"685467335384-goaoe9n23ufd0l3u1tpbsbtm2ahjmmhv@developer.gserviceaccount.com\"\n    ,\"client_id\" => \"685467335384-g4g9sfr6ij8btag15tkdigu67u9jg5rs.apps.googleusercontent.com\"\n    ,\"start_date\" => \"2013-11-01\"\n    ,\"end_date\" => date('Y-m-d') // Today\n  )\n  ,\"uniprot_protein_api_url\" => \"http://www.uniprot.org/uniprot/\"\n  ,\"entrez_api_url\" => \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"\n  ,\"panorama_url\" => \"https://daily.panoramaweb.org/\"\n  ,\"biodbnet_api_url\" => \"http://biodbnet.abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json\"\n  ,\"linkout_assays_ftp\" => array(\n      \"host\" => \"ftp-private.ncbi.nlm.nih.gov\"\n    , \"username\" => \"assaysnci\"\n    , \"password\" => \"dbs55GaQ\"\n    , \"linkout_provider_id\" => \"8855\"\n    , \"target_url\" => \"https://assays.cancer.gov\"\n  )\n  ,\"linkout_antibodies_ftp\" => array(\n      \"host\" => \"ftp-private.ncbi.nlm.nih.gov\"\n    , \"username\" => \"antibodynci\"\n    , \"password\" => \"sn79aRuf\"\n    , \"linkout_provider_id\" => \"8467\"\n    , \"target_url\" => \"http://antibodies.cancer.gov\"\n  )\n  /**** role based PERMISSIONS *****/\n  ,\"role_permissions\" => array(\n    //groups related permissions\n    \"group\" => array(\n      \"browse_access\" => array(4)\n      ,\"manage_access\" => array(4)\n    )\n    //user account related permissions\n    ,\"user_account\" => array(\n      \"browse_access\" => array(3,4)\n      ,\"manage_access\" => array(3,4)\n      ,\"delete\" => array(4)\n      ,\"modify_own_account\" => array(4)\n      ,\"assign_to_any_group\" => array(4)\n    )\n    //support related permissions\n    ,\"support\" => array(\n      \"browse_access\" => array(3,4)\n      ,\"manage_access\" => array(3,4)\n      ,\"settings_access\" => array(3,4)\n    )\n    // Assay Approval permissions\n    ,\"assay_approval\" => array(\n      \"manage_access\" => array(1,4)\n    )\n    // Assay Preview permissions\n    ,\"assay_preview\" => array(\n      \"browse_access\" => array(1,2,4,6)\n    )\n    // Assay Import permissions\n    ,\"import\" => array(\n      \"submit_access\" => array(1,2,4)\n    )\n    // Tutorials\n    ,\"tutorials\" => array(\n       \"access_tutorials\" => array(1,2,3,4,5)\n    )\n  )\n  // Email template parts\n  ,\"message_parts\" => array(\n    'headers' => 'MIME-Version: 1.0' . \"\\r\\n\" . 'Content-type: text/html; charset=iso-8859-1' . \"\\r\\n\",\n    // 'multipart_separator' => $multipart_separator,\n    // 'headers' => 'Content-type: multipart/alternative; boundary=\"'.$multipart_separator.'\"' . \"\\r\\n\"\n    // . $multipart_separator . \"\\r\\n\" . 'Content-Type: text/html; charset=iso-8859-1;' . \"\\r\\n\" . 'Content-Transfer-Encoding: 7bit' . \"\\r\\n\",\n    'body_header' => '\n    <html>\n    <head>\n      <title>New Comment</title>\n    <style>\n    #wrapper {\n      width: 100%;\n    }\n    body {\n      background-color: #FFFFFF;\n      color: #444444;\n      font: 12px/1.7em \"Open Sans\",\"trebuchet ms\",arial,sans-serif;\n    }\n    hr {\n      margin: 20px 0;\n      border: 0;\n      border-top: 1px dotted #CCCCCC;\n      border-bottom: 1px dotted #ffffff;\n    }\n    #content {\n      background-color: #FFFFFF;\n      margin-left: 20px;\n      margin-right: 20px;\n      padding: 0 16px 16px 16px;\n      position: relative;\n      top: 10px;\n      width: auto;\n      z-index: 15;\n    }\n    #contentHeader {\n      border-bottom: 1px dotted #CCCCCC;\n      margin-bottom: 10px;\n      padding: 20px 0 20px 0;\n      position: relative;\n      width: auto;\n    }\n    #contentHeader h1 {\n      color: #333333;\n      font-size: 28px;\n      font-weight: normal;\n      line-height: 34px;\n      position: relative;\n      top: 20px;\n    }\n    .container:after {\n      clear: both;\n    }\n    .container:after {\n      content: \"\";\n      display: table;\n    }\n    .container {\n      margin: 0 auto;\n      position: relative;\n      width: 100%;\n    }\n    .container p {\n      font-size: 1.2em;\n    }\n    .container .grid-24 {\n      width: auto;\n    }\n    .container [class^=\"grid-\"] {\n      margin-bottom: 2em;\n      margin-left: 20px;\n      margin-right: 20px;\n    }\n    #logo {\n      clear: both;\n      width: 111px;\n      height: 101px;\n      margin: 0 0 20px 0;\n    }\n    .view-post {\n      font-size: 1.2em;\n    }\n    #footer {\n      clear: both;\n      background-color: #FFFFFF;\n      border-top: 1px dotted #CCCCCC;\n      color: #999999;\n      padding: 12px 0 0 0;\n      text-align: center;\n      width: auto;\n    }\n    #footer p {\n      font-size: 1em;\n    }\n    </style>\n    </head>\n    <body>\n      <div id=\"wrapper\">\n        <div id=\"content\">\n          <div id=\"contentHeader\">\n            <div id=\"logo\">\n              <a href=\"http://'.$_SERVER[\"SERVER_NAME\"].'/\"><img src=\"http://assays.cancer.gov/site/library/images/CPTAC_certified_seal_101x101.gif\" width=\"101\" height=\"101\" alt=\"CPTAC Qualified Assay seal\"></a>\n            </div>\n    ',\n    'body_connector' => '\n            </div>\n            <div class=\"container\">\n              <div class=\"grid-24\">\n    ',\n    'body_footer' => '\n            </div>\n            <div id=\"footer\">\n              <p><em>This is an operational email from the CPTAC Assay Portal sent by the <a href=\"http://'.$_SERVER[\"SERVER_NAME\"].'/\">CPTAC Assay Portal web server</a>. Please do not reply to this email.</em></p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </body>\n    </html>\n    '\n  )\n);\n\nif (!function_exists('http_parse_headers'))\n{\n    function http_parse_headers($raw_headers)\n    {\n        $headers = array();\n        $key = '';\n\n        foreach(explode(\"\\n\", $raw_headers) as $i => $h)\n        {\n            $h = explode(':', $h, 2);\n\n            if (isset($h[1]))\n            {\n                if (!isset($headers[$h[0]]))\n                    $headers[$h[0]] = trim($h[1]);\n                elseif (is_array($headers[$h[0]]))\n                {\n                    $headers[$h[0]] = array_merge($headers[$h[0]], array(trim($h[1])));\n                }\n                else\n                {\n                    $headers[$h[0]] = array_merge(array($headers[$h[0]]), array(trim($h[1])));\n                }\n\n                $key = $h[0];\n            }\n            else\n            {\n                if (substr($h[0], 0, 1) == \"\\t\")\n                    $headers[$key] .= \"\\r\\n\\t\".trim($h[0]);\n                elseif (!$key)\n                    $headers[0] = trim($h[0]);\n            }\n        }\n\n        return $headers;\n    }\n}\n?>\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":136,"column":4},"end":{"row":136,"column":24}},"properties":{"type":"selection","autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/swpg_global_settings.php","digestWhenLastPersisted":"dd7f6e361880327cc934fc4280998d2f1b64f465","preferredLineEnding":null,"nextMarkerId":4,"deserializer":"TextBuffer","version":5},{"id":"5f8956a0150200b09c32d9abd17cac22","text":"<?php\n/**\n * @desc LabKey/Panorama API for importing data into the CPTAC Assay Portal database\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - Goran Halusa\n * @version 1.3\n * @package cptac\n *\n */\n\nclass LabkeyApi {\n\n  protected $email;\n  protected $password;\n  protected $endpoint;\n  protected $responseHeaders;\n\n  function __construct( $labkey_config = false, $panorama_images_path = false, $panorama_images_storage_path = false, $import_log_id = false ) {\n    $this->panorama_images_path = $panorama_images_path;\n    $this->panorama_images_storage_path = $panorama_images_storage_path;\n    $this->labkey_config = $labkey_config;\n    $this->import_log_id = $import_log_id;\n  }\n\n  /*\n   * Get All Peptides\n   */\n\n  // https://daily.panoramaweb.org/labkey/query/CPTAC%20Assay%20Portal/JHU_DChan_HZhang_ZZhang/Serum_QExactive_GlycopeptideEnrichedPRM/ResponseCurve/selectRows.api?schemaName=targetedms&query.queryName=Peptide&query.columns=Sequence%2CPeptideModifiedSequence%2CRtCalculatorScore%2CStartIndex%2CEndIndex%2CCalcNeutralMass%2CPeptideGroupId%2FLabel%2CPeptideGroupId%2FRunId%2CPeptideGroupId%2FRunId%2FCreated%2CPeptideGroupId%2FRunId%2FFile%2FFileName%2CPeptideGroupId%2FDescription\n\n  public function getAllPeptides( \n    $panorama_authentication_cookie = false\n    , $schemaName\n    , $queryName\n    , $queryColumns\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.columns' => $queryColumns\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get Peptide\n   */\n\n  public function getPeptide( \n    $panorama_authentication_cookie = false\n    , $schemaName\n    , $queryName\n    , $peptideSequence\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.PeptideModifiedSequence~eq' => $peptideSequence\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get Peptide Data\n   */\n\n  public function getPeptideData( \n    $panorama_authentication_cookie = false\n    , $schemaName\n    , $queryName\n    , $peptideId\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    return $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.Id~eq' => $peptideId\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n  }\n\n  /*\n   * Get Precursor Data\n   */\n\n  public function getPrecursorData(\n      $panorama_authentication_cookie = false\n      , $schemaName\n      , $queryName\n      , $sequence\n      , $laboratory_abbreviation = false\n      , $celllysate_path = false\n      , $library = false ) {\n\n    return $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.PeptideId/PeptideModifiedSequence~eq' => $sequence\n        ,'query.columns' => 'RepresentativeDataState,PeptideId/Sequence,PeptideId/PeptideModifiedSequence,ModifiedSequence,IsotopeLabelId/Name,PeptideId/Id,PeptideId/PeptideGroupId/Label,PeptideId/PeptideGroupId/Id'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n  }\n\n  /*\n   * Get Precursor Charge Data\n   */\n\n  public function getPrecursorChargeData( \n      $panorama_authentication_cookie = false\n      , $schemaName\n      , $queryName\n      , $modifiedPeptideId\n      , $laboratory_abbreviation = false\n      , $celllysate_path = false\n      , $library = false ) {\n\n    return $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.PeptideId~eq' => $modifiedPeptideId\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n\n  }\n\n  /*\n   * Get Modification Type\n   */\n\n  public function getModificationType( \n    $panorama_authentication_cookie = false\n    , $schemaName\n    , $queryName\n    , $peptideModifiedSequence\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.PeptideId/PeptideModifiedSequence~eq' => $peptideModifiedSequence\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get the Site of Modification\n   */\n\n  // https://daily.panoramaweb.org/labkey/query/CPTAC%20Assay%20Portal/JHU_DChan_HZhang_ZZhang/Serum_QExactive_GlycopeptideEnrichedPRM/ResponseCurve/getQuery.view?query.columns=PeptideId,PeptideId/PeptideModifiedSequence,PeptideId/Sequence,StructuralModId/Name,IndexAA,MassDiff&schemaName=targetedms&query.queryName=PeptideStructuralModification&query.PeptideId~eq=181120\n\n  public function getSiteOfModification( \n    $panorama_authentication_cookie = false\n    , $schemaName\n    , $queryName\n    , $peptideId\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.PeptideId~eq' => $peptideId\n        ,'query.columns' => 'IndexAA'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get Precursor Cromatogram Information\n   */\n\n  public function getPrecursorChromInfo(\n    $panorama_authentication_cookie = false\n    , $schemaName\n    , $queryName\n    , $PeptideChromInfoId\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    return $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => $schemaName\n        ,'query.queryName' => $queryName\n        ,'query.PeptideChromInfoId~eq' => $PeptideChromInfoId\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n  }\n\n  /*\n   * Get Peptide Chromatograms\n   */\n\n  public function getPeptideChromatograms( \n    $panorama_authentication_cookie = false\n    , $peptideId = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    return $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/selectRows.api'\n      ,array(\n        'schemaName' => 'targetedms'\n        ,'query.queryName' => 'peptidechrominfo'\n        ,'query.PeptideId~eq' => $peptideId\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n    );\n  }\n\n  /*\n   * Get Peptide Chromatogram Image\n   */\n\n  public function getPeptideChromatogramImage( \n    $panorama_authentication_cookie = false\n    , $chromatogram_id = false\n    , $peptide_sequence = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    return $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/peptideChromatogramChart.view'\n      ,array(\n        'id' => $chromatogram_id\n        ,'chartWidth' => '600'\n        ,'chartHeight' => '600'\n        ,'syncY' => 'false'\n        ,'syncX' => 'false'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$peptide_sequence\n      ,false // plot_type\n      ,false // protein\n      ,false // csv\n    );\n  }\n\n  /*\n   * Get Precursor Chromatogram Image\n   */\n\n  public function getPrecursorChromatogramImage( \n    $panorama_authentication_cookie = false\n    , $precursor_chromatogram_id = false\n    , $peptide_sequence = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    return $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/precursorChromatogramChart.view'\n      ,array(\n        'id' => $precursor_chromatogram_id\n        ,'chartWidth' => '600'\n        ,'chartHeight' => '600'\n        ,'syncY' => 'false'\n        ,'syncX' => 'false'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$peptide_sequence\n      ,false // plot_type\n      ,false // protein\n      ,false // csv\n    );\n\n  }\n\n  /*\n   * Get Peptide Response Curve Image\n   */\n\n  public function getPeptideResponseCurveImage( \n    $panorama_authentication_cookie = false\n    , $peptide_sequence = false\n    , $plot_type = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false\n    , $peptideType = false) {\n\n    \n    $image = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/getWebPart.view'\n      ,array(\n        'webpart.name' => 'Report'\n        ,'webpart.frame' => 'none'\n        ,'schemaName' => 'targetedms'\n        ,'queryName' => 'ResponseCurveQuery'\n        ,'reportName' => 'ResponseCurve'\n        ,'query.PeptideModifiedSequence~eq' => $peptide_sequence\n        ,'plotType' => $plot_type\n        ,'showSection' => 'response_curve_png'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$peptide_sequence\n      ,$plot_type\n      ,false // protein\n      ,false // csv\n      ,$peptideType\n    );\n\n\n    if($image->error == true)\n    {\n      die(\"IMAGE ERROR\");\n    }\n\n    return $image;\n  }\n\n  /*\n   * Get Peptide Validation Sample Image (Repeatability)\n   */\n\n  public function getPeptideValidationSampleImage( \n    $panorama_authentication_cookie = false\n    , $peptide_sequence = false\n    , $protein = false\n    , $charge = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library= false ) {\n\n    $image = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/getWebPart.view'\n      ,array(\n        'webpart.name' => 'Report'\n        ,'webpart.frame' => 'none'\n        ,'schemaName' => 'targetedms'\n        ,'queryName' => 'QCAnalysisQuery'\n        ,'query.Protein~eq' => $protein\n        ,'query.PeptideModifiedSequence~eq' => $peptide_sequence\n        ,'query.PrecursorCharge~eq' => $charge\n        ,'curve_type' => 'reverse'\n        ,'reportName' => 'web_portal_QC'\n        ,'showSection' => 'QC_plot_png'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$peptide_sequence\n      ,false // plot_type\n      ,$protein\n      ,false // csv\n    );\n\n    return $image;\n  }\n\n  /*\n   * Get Peptide Validation Sample Data (Repeatability)\n   */\n\n  public function getPeptideValidationSampleData( \n    $panorama_authentication_cookie = false\n    , $peptide_sequence = false\n    , $protein = false\n    , $charge = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/getWebPart.view'\n      ,array(\n        'webpart.name' => 'Report'\n        ,'webpart.frame' => 'none'\n        ,'schemaName' => 'targetedms'\n        ,'queryName' => 'QCAnalysisQuery'\n        ,'query.Protein~eq' => $protein\n        ,'query.PeptideModifiedSequence~eq' => $peptide_sequence\n        ,'query.PrecursorCharge~eq' => $charge\n        ,'curve_type' => 'reverse'\n        ,'reportName' => 'web_portal_QC'\n        ,'showSection' => 'CV_results.csv'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$peptide_sequence\n      ,false // plot_type\n      ,$protein\n      ,true // csv\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get Peptide Isotope Label Modifications\n   */\n\n  public function getPeptideIsotopeLabelModifications( \n    $panorama_authentication_cookie = false\n    , $modified_peptide_sequence = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/getQuery.view'\n      ,array(\n        'schemaName' => 'targetedms'\n        ,'query.queryName' => 'PeptideIsotopeLabelModifications'\n        ,'query.PeptideModifiedSequence~eq' => $modified_peptide_sequence\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$modified_peptide_sequence\n      ,false // plot_type\n      ,false // protein\n      ,false // csv\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get LOD/LOQ Data\n   */\n\n  // https://daily.panoramaweb.org/labkey/project/CPTAC%20Assay%20Portal/FHCRC_Paulovich/CellLysate_5500QTRAP_directMRM/ResponseCurve/getWebPart.view?webpart.name=Report&webpart.frame=none&schemaName=targetedms&queryName=ResponseCurveAnalysis&query.PeptideModifiedSequence~eq=AEPEDHYFLLTEPPLNTPENR&reportName=ResponseCurveAnalysis&showSection=LODCTable.csv\n\n  public function getLodLoqData( \n    $panorama_authentication_cookie = false\n    , $peptide_sequence = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/getWebPart.view'\n      ,array(\n        'webpart.name' => 'Report'\n        ,'webpart.frame' => 'none'\n        ,'schemaName' => 'targetedms'\n        ,'queryName' => 'ResponseCurveAnalysis'\n        ,'query.PeptideModifiedSequence~eq' => $peptide_sequence\n        ,'reportName' => 'ResponseCurveAnalysis'\n        ,'showSection' => 'LODCTable.csv'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$peptide_sequence\n      ,false // plot_type\n      ,false // protein\n      ,true // csv\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get Curve Fit Data\n   */\n\n  // https://daily.panoramaweb.org/labkey/project/CPTAC%20Assay%20Portal/FHCRC_Paulovich/CellLysate_5500QTRAP_directMRM/ResponseCurve/getWebPart.view?webpart.name=Report&webpart.frame=none&schemaName=targetedms&queryName=ResponseCurveAnalysis&query.PeptideModifiedSequence~eq=AEPEDHYFLLTEPPLNTPENR&reportName=ResponseCurveAnalysis&showSection=fitTable.csv\n\n  public function getCurveFitData( \n    $panorama_authentication_cookie = false\n    , $peptide_sequence = false\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false ) {\n\n    $data = $this->_doCall(\n      $panorama_authentication_cookie\n      ,'GET'\n      ,'/getWebPart.view'\n      ,array(\n        'webpart.name' => 'Report'\n        ,'webpart.frame' => 'none'\n        ,'schemaName' => 'targetedms'\n        ,'queryName' => 'ResponseCurveAnalysis'\n        ,'query.PeptideModifiedSequence~eq' => $peptide_sequence\n        ,'reportName' => 'ResponseCurveAnalysis'\n        ,'showSection' => 'fitTable.csv'\n      )\n      ,$laboratory_abbreviation\n      ,$celllysate_path\n      ,$library\n      ,$peptide_sequence\n      ,false // plot_type\n      ,false // protein\n      ,true // csv\n    );\n\n    return $data;\n  }\n\n  /*\n   * Get Panorama Authentication Cookie\n   */\n\n  public function get_panorama_authentication_cookie($import_log_id = false) {\n\n    $cookie_hash = date(\"YmdHis\").\"_\".uniqid();\n\n    //$url = $this->labkey_config[\"server_raw\"].'/labkey/project/Paulovich/begin.view?';\n    $url = $this->labkey_config[\"server_raw\"].'/labkey/project/Paulovich/start.view?';\n    $cookie = $this->panorama_images_storage_path.\"/cookie\".$cookie_hash.\".txt\";\n\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n    curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie);\n    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($ch, CURLOPT_USERPWD, $this->labkey_config['email'] . \":\" . $this->labkey_config['password']);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    $auth_result = curl_exec($ch);\n    \n    curl_close($ch);\n    \n    $log_result = ($auth_result) ? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n    $fail_message = (!$auth_result) ? json_encode($auth_result) : false;\n    write_log($import_log_id,'API server authentication attempt: '.$log_result.\" \".$fail_message);\n\n    return $cookie;\n  }\n\n  /*\n   * Execute cURL\n   */\n\n  protected function _doCall(\n      $panorama_authentication_cookie\n    , $httpMethod\n    , $path\n    , $parameters = null\n    , $laboratory_abbreviation = false\n    , $celllysate_path = false\n    , $library = false\n    , $peptide_sequence = false\n    , $plot_type = false\n    , $protein = false\n    , $csv = false\n    , $peptideType = false\n  ) {\n\n    $query_name = false;\n    $get_url = false;\n    $cookie_hash = date(\"YmdHis\").\"_\".uniqid();\n    $this->responseHeaders = array();\n\n    // If an authentication cookie was not provided, generate one now\n    if(!$panorama_authentication_cookie) {\n\n      $ch = curl_init( $this->labkey_config[\"server_raw\"].'/labkey/project/Paulovich/begin.view?' );\n      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $httpMethod);\n      curl_setopt($ch, CURLOPT_COOKIEJAR, $this->panorama_images_storage_path.\"/cookie\".$cookie_hash.\".txt\");\n      curl_setopt($ch, CURLOPT_USERPWD, $this->labkey_config['email'] . \":\" . $this->labkey_config['password']);\n      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n      curl_setopt($ch, CURLOPT_HEADER, 0);\n      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n      $auth_result = curl_exec($ch);   \n\n      curl_close($ch);\n\n\n      $panorama_authentication_cookie = $this->panorama_images_storage_path.\"cookie\".$cookie_hash.\".txt\";\n    }\n\n\n\n\n    // Panorama throws around two naming conventions for the query name key.\n    // Pin it down and normalize the variable.\n    if( isset($parameters['query.queryName']) || isset($parameters['queryName']) ) {\n      if(isset($parameters['query.queryName'])) {\n        $query_name = $parameters['query.queryName'];\n      }\n      if(isset($parameters['queryName'])) {\n        $query_name = $parameters['queryName'];\n      }\n    }\n\n    \n\n    \n    \n    \n    $log_query_name = $query_name;\n    switch ($query_name) {\n      case false: // images ??\n        \n        $log_query_name = 'Image';\n\n        $url = $this->labkey_config['targetedms_query_path'].$laboratory_abbreviation.'/'.$celllysate_path.'/'.$library.$path;\n        break;\n      case 'peptidechrominfo': // validation sample images\n        $url = $this->labkey_config['query_endpoint_live'].$laboratory_abbreviation.'/'.$celllysate_path.'/'.$library.$path;\n        break;\n      case 'ResponseCurveQuery': // response curve images\n      case 'QCAnalysisQuery': // validation sample images and data\n      case 'ResponseCurveAnalysis': // lod/loq and curve fit data\n        $url = $this->labkey_config['project_endpoint_live'].$laboratory_abbreviation.'/'.$celllysate_path.'/'.$library.$path;\n        break;\n      default: // regular\n        $url = $this->labkey_config['query_endpoint_live'].$laboratory_abbreviation.'/'.$celllysate_path.'/'.$library.$path;\n        break;\n    }\n\n\n    \n\n    \n\n    // insert peptideType AFER sequence \n    if($peptideType)\n    {\n      //$parameters = array_merge($parameters, array('peptideType' => $peptideType) );\n      $final_parameters = array();\n      foreach($parameters as $param_key => $param_value)\n      {\n        if($param_key == 'query.PeptideModifiedSequence~eq')\n        {\n          $final_parameters[$param_key] = $param_value;\n          $final_parameters['peptideType'] = $peptideType;\n        }\n        else\n        {\n          $final_parameters[$param_key] = $param_value;\n        }\n      }\n      $parameters = $final_parameters;\n    }\n\n    write_log($this->import_log_id,'_doCall: '.$peptide_sequence.' - Query Name: '.$log_query_name.' - Library: '.$library.\"\\nURL: \".$url.'?'.http_build_query($parameters));\n\n\n    if ($httpMethod != 'POST') {\n      $get_url = (is_null($parameters) || count($parameters) == 0) ? $url : $url.'?'.http_build_query($parameters);\n      $curl = curl_init( $get_url );\n    }\n    else {\n      $curl = curl_init( $url );\n    }\n\n    if ($httpMethod != 'GET') {\n      if ($httpMethod == 'POST') {\n        curl_setopt($curl, CURLOPT_POST, true);\n        if (!is_null($parameters)) {\n          curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($parameters));\n        }\n      }\n      else {\n        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $httpMethod);\n      }\n    }\n\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($curl, CURLINFO_HEADER_OUT, 1);\n    curl_setopt($curl, CURLOPT_COOKIEFILE, $panorama_authentication_cookie);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n    session_write_close();\n    $result = curl_exec($curl);\n\n    $log_result = ($result) ? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n    \n    $log_result_fail = false;\n    \n    if(!$result)\n    {\n      write_log($this->import_log_id,\"RESULT - {$peptide_sequence}: \".$result);\n//      $log_result_fail = json_decode($result);\n //     $log_result_fail = \"\\n\".$log_result_fail['html'];\n    }\n\n   \n    write_log($this->import_log_id,\"_doCall Result - {$peptide_sequence}: \".$log_result.$log_result_fail);\n\n    $returnObj = new StdClass();\n\n    /*\n     * If this is a chromatogram image, write it to disk\n     */\n\n    if( $path && (($path == '/peptideChromatogramChart.view') || ($path == '/precursorChromatogramChart.view')) ) {\n      $chromatogram_type = ($path == '/peptideChromatogramChart.view') ? 'peptide' : 'precursor';\n      $filename = $peptide_sequence.\"_\".$chromatogram_type.\"_chrom_id_\".$parameters[\"id\"].\"_\".$laboratory_abbreviation;\n      $panorama_images_storage_path = $this->panorama_images_storage_path.$filename.'.png';\n      $panorama_image_path = $this->panorama_images_path.$filename.'.png';\n      file_put_contents( $panorama_images_storage_path, $result );\n      $result = $panorama_image_path;\n\n      write_log($this->import_log_id,\"Image Saved: \".$result);\n    }\n\n    /*\n     * If this is a response curve image, write it to disk\n     */\n\n    if( isset($parameters['reportName']) && ($parameters['reportName'] == 'ResponseCurve') ) {\n\n      $returned_data_array = json_decode($result, true);\n      preg_match('/< *img[^>]*src *= *[\"\\']?([^\"\\']*)/i', $returned_data_array[\"html\"], $matches);\n\n      if( (stristr($returned_data_array[\"html\"],'Error executing command') == false) && !empty($matches) ) {\n\n        $url_string = str_replace('&amp;', '&', $matches[1]);\n        $url = $this->labkey_config[\"server_raw\"].$url_string;\n\n        $curl = curl_init( $url );\n        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $httpMethod);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl, CURLOPT_COOKIEFILE, $panorama_authentication_cookie);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n        session_write_close();\n        $result = curl_exec($curl);\n        $filename_response_curves = $peptide_sequence.'_response_curve_'.$plot_type.'_'.$laboratory_abbreviation;\n        $panorama_images_storage_path = $this->panorama_images_storage_path.$filename_response_curves.'.png';\n        $panorama_image_path = $this->panorama_images_path.$filename_response_curves.'.png';\n        file_put_contents( $panorama_images_storage_path, $result );\n        $result = $panorama_image_path;\n\n        write_log($this->import_log_id,\"Image Saved: \".$parameters['reportName'].' - '.$result);\n\n      } else {\n        // Return the error so it can be logged into the database.\n        $result = $returned_data_array[\"html\"];\n        write_log($this->import_log_id,'<span class=\"import-error\">Image Error</span>: '.$parameters['reportName'].' - '.$result);\n      }\n    }\n\n    /*\n     * Validation sample image and data\n     */\n\n    if( isset($parameters['reportName']) && ($parameters['reportName'] == 'web_portal_QC') ) {\n\n      // If this is a CSV, return data for inserts into the database\n      if ( $csv ) {\n\n        $returned_data_array = json_decode($result, true);\n\n        if( stristr($returned_data_array[\"html\"],'Error executing command') == false ) {\n\n          preg_match('/<a href=\"(.+)\">/', $returned_data_array[\"html\"], $matches);\n\n          if(!empty($matches)) {\n            $url_string = str_replace('&amp;', '&', $matches[1]);\n            $url = $this->labkey_config[\"server_raw\"].$url_string;\n\n            $curl = curl_init( $url );\n            curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $httpMethod);\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($curl, CURLOPT_COOKIEFILE, $panorama_authentication_cookie);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n            session_write_close();\n            $result = curl_exec($curl);\n\n            write_log($this->import_log_id,\"Image Saved: \".$parameters['reportName']);\n          }\n\n        } else {\n          // Return the error so it can be logged into the database.\n          $result = $returned_data_array[\"html\"];\n          write_log($this->import_log_id,'<span class=\"import-error\">Image Error</span>: '.$parameters['reportName'].' - '.$result);\n        }\n\n      }\n      // If this is a validation sample image, write it to disk\n      else {\n\n        \n\n        $returned_data_array = json_decode($result, true);\n\n        if( stristr($returned_data_array[\"html\"],'Error executing command') == false ) {\n\n          preg_match('/< *img[^>]*src *= *[\"\\']?([^\"\\']*)/i', $returned_data_array[\"html\"], $matches);\n\n\n\n          if(!empty($matches)) {\n            $url_string = str_replace('&amp;', '&', $matches[1]);\n            $url = $this->labkey_config[\"server_raw\"].$url_string;\n\n            $curl = curl_init( $url );\n            curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $httpMethod);\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($curl, CURLOPT_COOKIEFILE, $panorama_authentication_cookie);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n            session_write_close();\n            $result = curl_exec($curl);\n\n            $filename_validation_samples = $peptide_sequence.\"_validation_sample_\".$laboratory_abbreviation;\n            $panorama_images_storage_path = $this->panorama_images_storage_path.$filename_validation_samples.'.png';\n            $panorama_image_path = $this->panorama_images_path.$filename_validation_samples.'.png';\n            file_put_contents( $panorama_images_storage_path, $result );\n            $result = $panorama_image_path;\n\n            write_log($this->import_log_id,\"Image Saved: \".$result);\n          \n\n          }\n\n        } else {\n          // Return the error so it can be logged into the database.\n          $result = $returned_data_array[\"html\"];\n          write_log($this->import_log_id,'<span class=\"import-error\">Image Error</span>: '.$result);\n        }\n\n      }\n    }\n\n    /*\n     * LOD/LOQ and Curve Fit data\n     */\n\n    if( isset($parameters['reportName']) && ($parameters['reportName'] == 'ResponseCurveAnalysis') ) {\n\n      $returned_data_array = json_decode($result, true);\n\n      if( stristr($returned_data_array[\"html\"],'Error executing command') == false ) {\n        preg_match('/<a href=\"(.+)\">/', $returned_data_array[\"html\"], $matches);\n\n        if(!empty($matches)) {\n\n          $url_string = str_replace('&amp;', '&', $matches[1]);\n          $url = $this->labkey_config[\"server_raw\"].$url_string;\n\n          $curl = curl_init( $url );\n          curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $httpMethod);\n          curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n          curl_setopt($curl, CURLOPT_COOKIEFILE, $panorama_authentication_cookie);\n          curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n          session_write_close();\n          $result = curl_exec($curl);\n        }\n\n      } else {\n        // Return the error so it can be logged into the database.\n        $result = $returned_data_array[\"html\"];\n      }\n    }\n\n    $returnObj->error = false;\n    if ($result === false) {\n      $returnObj->error = true;\n    }\n    else {\n      $returnObj->httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n      if (($returnObj->httpCode < 200) || $returnObj->httpCode >= 400) {\n        $returnObj->error = true;\n      }\n      // Return the result.\n      $returnObj->response = $result;\n      // Return the executed Panorama API URL.\n      $returnObj->panoramaUrl = $url.'?'.http_build_query($parameters);\n      $returnObj->contentType = curl_getinfo($curl, CURLINFO_CONTENT_TYPE);\n      $returnObj->requestHeaders = preg_split('/(\\\\n|\\\\r){1,2}/', curl_getinfo($curl, CURLINFO_HEADER_OUT));\n\n      $returnObj->responseHeaders = $this->responseHeaders;\n      curl_close($curl);\n    }\n\n    return $returnObj;\n  }\n\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":18,"column":35},"end":{"row":18,"column":55}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/labkey.class.php","digestWhenLastPersisted":"a2504b770296541cda79af535fe18df61c539428","preferredLineEnding":null,"nextMarkerId":35,"deserializer":"TextBuffer","version":5},{"id":"4cdb11d3fcdcee4c8a01c0d403e29003","text":"<?php\n/**\n * @desc Import Assays: controller for importing protein and peptide data from Panorama, UniProt, and Entrez Gene.\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 2.0\n * @package cptac\n *\n */\n\n// Tweak some PHP configurations\nini_set('memory_limit','2048M'); // 2 GB\nini_set('max_execution_time', 66000); // 10 hours\n\nfunction import_panorama_protein_peptide( $import_log_id = false ) {\n  $app = \\Slim\\Slim::getInstance();\n  $env = $app->environment();\n  global $final_global_template_vars;\n  require_once $_SERVER[\"PATH_TO_CORE\"] . \"slim_framework/SWPG/models/XML2Array.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/assays.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_panorama_data.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_uniprot_data.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_entrez_genomic_context.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/kegg.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/labkey.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/user_account/models/user_account.class.php\";\n\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n  \n  $xml2array = new \\swpg\\models\\XML2Array();\n  $assay = new Assay( $db_resource );\n  $import = new ImportPanoramaData( $db_resource );\n  $import_uniprot_data = new ImportUniprotData( $db_resource );\n  $import_entrez = new ImportEntrezGenomicContext( $db_resource );\n  $kegg = new Kegg( $db_resource );\n  $labkey = new LabkeyApi(\n    $final_global_template_vars[\"labkey_config\"]\n    ,$final_global_template_vars[\"panorama_images_path\"]\n    ,$final_global_template_vars[\"panorama_images_storage_path\"]\n  );\n  $user_account = new UserAccount( $db_resource );\n \n\n\n  // Set test mode, which stops actual imports from executing.\n  $execute['test_mode'] = false;\n\n  // Panorama query columns\n  $panorama_query_columns = array(\n      'Sequence'\n    , 'PeptideModifiedSequence'\n    , 'RtCalculatorScore'\n    , 'StartIndex'\n    , 'EndIndex'\n    , 'CalcNeutralMass'\n    , 'PeptideGroupId/Label'\n    , 'PeptideGroupId/RunId'\n    , 'PeptideGroupId/RunId/Created'\n    , 'PeptideGroupId/RunId/File/FileName'\n    , 'PeptideGroupId/Description'\n  );\n\n  /*\n   * Check the import_log_id. Throw a 404 if it's not a valid ID.\n   */\n\n  // Get the laboratory metadata via the import_log_id GET variable.\n  $get = $assay->get_laboratory_by_import_log_id( $app->request->get(\"import_log_id\") );\n\n\n  write_log($get[\"import_log_id\"],'Import Panorama - all protein peptides');\n\n  // If get_laboratories() returns false, throw a 404\n  if(!$get) $app->notFound();\n\n  /*\n   * Backup the database.\n   */\n\n  $assay->backup_database(\"1\");\n\n  /*\n   * Log the import execution details to the database.\n   */\n\n\n  $log_data[\"import_log_id\"] = (int)$get[\"import_log_id\"];\n  $log_data[\"laboratory_id\"] = (int)$get[\"laboratory_id\"];\n  $log_data[\"executed_by_user_id\"] = (int)$app->request->get(\"account_id\");\n  $log_data[\"import_executed_status\"] = true;\n  $imports_executed_log_id = $import->insert_executed_imports( $log_data );\n\n  write_log($get[\"import_log_id\"],'Import logs updated');\n\n  /*\n   * Send an email to the site admin and end-user to notify that an import has been executed.\n   */\n\n  // Get the user's data, since we have no $_SESSION data at this point.\n  $user_data = $user_account->get_user_account_info( $log_data[\"executed_by_user_id\"], false );\n  \n  $test_import_subject = ( $app->request->get(\"test_import\") == 1 ) ? '[TEST RUN]' : '';\n  $email_subject = \"CPTAC Assay Portal: Import Started \".$test_import_subject.\", \".date('F j, Y h:i:s A').\" - \".$get['laboratory_name'];\n  $headers = $final_global_template_vars['message_parts']['headers'];\n  $headers .= 'From: CPTAC Assay Portal <noreply@'.$_SERVER[\"SERVER_NAME\"].'>' . \"\\r\\n\";\n  $test_import_notification = ( $app->request->get(\"test_import\") == 1 ) ? '<span style=\"color:red;\">[TEST RUN]</span>' : '';\n  $body_message = '\n    <h1>CPTAC Assay Portal: Import Started - '.$get['laboratory_name'].'</h1>'.\n    $final_global_template_vars['message_parts']['body_connector']\n    .'<p><strong>Date/Time:</strong> '.date('l, F jS, Y \\a\\t h:i:s A').'</p>\n    <p>'.$test_import_notification.' An import has been executed by the '.$get['laboratory_name'].' laboratory.</p>\n  ';\n  $message = $final_global_template_vars['message_parts']['body_header'].$body_message.$final_global_template_vars['message_parts']['body_footer'];\n\n  // Send the email\n  mail( $final_global_template_vars[\"superadmin_email_address\"].\", \".$user_data[\"email\"], $email_subject, $message, $headers );\n\n  write_log($get[\"import_log_id\"],'Admin notification sent');\n\n\n  // If we're not in test mode, go ahead and execute.\n  if(!$execute['test_mode']) {\n\n    /*\n     * Get the Panorama authentication cookie file.\n     */\n\n\n    $panorama_authentication_cookie = $labkey->get_panorama_authentication_cookie();\n\t\t\n\n    /*\n     * Query Panorama for all of the peptides.\n     */\n\n    write_log($get[\"import_log_id\"],'Getting all protein peptides');\n\n    $returned_peptide_data = $labkey->getAllPeptides(\n      $panorama_authentication_cookie\n      ,\"targetedms\"\n      ,\"Peptide\"\n      ,implode(',', $panorama_query_columns)\n      ,$get['laboratory_abbreviation']\n      ,$get['celllysate_path']\n      ,'ResponseCurve'\n    );\n\t\n\n    $peptide_data = false;\n    if( isset($returned_peptide_data->response) && !empty($returned_peptide_data->response) ) {\n      $peptide_data = json_decode($returned_peptide_data->response,true);\n    }\n\n\n\n\t\t // record this data for future examination\n     $sql = \"DELETE FROM import_initial_start_records WHERE import_log_id = :import_log_id\";\n     $statement = $db_resource->prepare($sql);\n     $statement->bindValue(\":import_log_id\", $get[\"import_log_id\"], PDO::PARAM_INT);\n     $statement->execute(); \n\n     $sql = \"INSERT INTO import_initial_start_records \n              (import_log_id,run_by_user_id,recieved_data,records_count) \n              VALUES \n              (:import_log_id,:run_by_user_id,:recieved_data,:records_count)\";\n     $statement = $db_resource->prepare($sql);\n     $statement->bindValue(\":import_log_id\", $get[\"import_log_id\"], PDO::PARAM_INT);\n     $statement->bindValue(\":run_by_user_id\", $app->request->get(\"account_id\"), PDO::PARAM_INT);\n     $statement->bindValue(\":recieved_data\", json_encode($peptide_data['rows']), PDO::PARAM_STR);\n     $statement->bindValue(\":records_count\", $peptide_data['rowCount'], PDO::PARAM_STR);\n     $statement->execute(); \n\n\n     write_log($get[\"import_log_id\"],'Received total peptides count: '.$peptide_data['rowCount']);\n\n\n    // If Panorama does not respond to this first query, display a message and email the super admin and end-user.\n    if( !$peptide_data ) {\n      mail(\n            $final_global_template_vars[\"superadmin_email_address\"].\", \".$user_data[\"email\"]\n          , \"CPTAC Import: Panorama, No Response - \".$get['laboratory_abbreviation']\n          , date('l F jS, Y h:i:s A').\"\\n\\nNo response from Panorama for an import executed by the '\".$get['laboratory_name'].\"' laboratory.\"\n        );\n      echo 'Panorama did not respond. Please try again. If this persists, please <a href=\"mailto:'.$final_global_template_vars[\"superadmin_email_address\"].'\">contact the site administrator</a>.';\n      \n       write_log($get[\"import_log_id\"],'Panorama did not respond. Please try again.');\n\n      die();\n    }\n\n\n\n\n    // If Panorama returns no data for this first query, display a message and email the super admin and end-user.\n    if( $peptide_data[\"rowCount\"] == 0 ) {\n      mail(\n            $final_global_template_vars[\"superadmin_email_address\"].\", \".$user_data[\"email\"]\n          , \"CPTAC Import: Panorama, No Data - \".$get['laboratory_abbreviation']\n          , date('l F jS, Y h:i:s A').\"\\n\\nNo data returned from Panorama for an import executed by the '\".$get['laboratory_name'].\"' laboratory. Please make sure Response Curve data is present out on Panorama. If this persists, please contact the site administrator at: \".$final_global_template_vars[\"superadmin_email_address\"].\".\"\n        );\n      echo 'No data returned from Panorama. Please make sure Response Curve data is present out on Panorama. If this persists, please <a href=\"mailto:'.$final_global_template_vars[\"superadmin_email_address\"].'\">contact the site administrator</a>.';\n      \n      write_log($get[\"import_log_id\"],'No data returned from Panorama. Please make sure Response Curve data is present out on Panorama.');\n\n      die();\n    }\n    \n   \n    // If Panorama does respond, process.\n    if($peptide_data[\"rowCount\"] > 0) {\n\n      $i = 0;\n      \n      write_log($get[\"import_log_id\"],'Preparing to pull data.');\n\n     // $peptide_data[\"rows\"] = $peptide_data[\"rowCount\"];\n      \n      /*\n       * If this is a test run, limit the record count to 5.\n       */\n\n   \n    \n      if( $app->request->get(\"test_import\") == 1 ) {\n        $subtract_amount = ($peptide_data[\"rowCount\"]-5);\n        $peptide_data[\"rows\"] = array_splice($peptide_data[\"rows\"], $subtract_amount);\n      }\n\n      ##############################\n\n       // $subtract_amount = ($peptide_data[\"rowCount\"]-1);\n       // $peptide_data[\"rows\"] = array_splice($peptide_data[\"rows\"], $subtract_amount);\n\n      ##############################\n\n      $data = array();\n      foreach($peptide_data[\"rows\"] as $row) {\n\n        // Parse the metadata for the id to query UniProt with.\n\n        // Get the UniProt ID.\n        $data[$i][\"uniprot_lookup_id\"] = false;\n\n        // Check to see if there is a \"tr\" value.\n        preg_match(\"/tr\\|(\\w*)/\", $row[\"PeptideGroupId/Label\"], $swiss_prot_label_matches_tr);\n        \n        // Check to see if there is a \"sp\" value.\n        preg_match(\"/sp\\|(\\w*)/\", $row[\"PeptideGroupId/Label\"], $swiss_prot_label_matches_sp);\n\n        // // Check to see if there is a ENSEMBL value.\n        // preg_match(\"/\\|ENSEMBL:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $ensembl_matches);\n        \n        // Check to see if there is a TREMBL value.\n        preg_match(\"/\\|TREMBL:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $trembl_matches);\n        \n        // Check to see if there is a SWISS-PROT value.\n        preg_match(\"/\\|SWISS-PROT:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $swiss_prot_matches);\n\n        if(isset($swiss_prot_label_matches_tr) && !empty($swiss_prot_label_matches_tr)) {\n          $data[$i][\"uniprot_lookup_id\"] = $swiss_prot_label_matches_tr[1];\n        }\n\t\t\t\t\n        if(isset($swiss_prot_label_matches_sp) && !empty($swiss_prot_label_matches_sp)) {\n          $data[$i][\"uniprot_lookup_id\"] = $swiss_prot_label_matches_sp[1];\n        }\n        // if(isset($ensembl_matches) && !empty($ensembl_matches)) {\n        //   $data[$i][\"uniprot_lookup_id\"] = $ensembl_matches[1];\n        // }\n        \n        if(isset($trembl_matches) && !empty($trembl_matches)) {\n          $data[$i][\"uniprot_lookup_id\"] = $trembl_matches[1];\n        }\n\t\t\t\t\n        if(isset($swiss_prot_matches) && !empty($swiss_prot_matches)) {\n          $data[$i][\"uniprot_lookup_id\"] = $swiss_prot_matches[1];\n        }\n\n\n\n        if(empty($data[$i][\"uniprot_lookup_id\"]) )\n        {\n\n          // // Check to see if there is a TREMBL value.\n          // preg_match(\"/\\|TREMBL:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $trembl_matches);\n        \n          //  // Check to see if there is a SWISS-PROT value.\n          // preg_match(\"/\\|SWISS-PROT:(\\w*)/\", $row[\"PeptideGroupId/Description\"], $swiss_prot_matches);\n\n\n        }\n\n        write_log($get[\"import_log_id\"],'Getting Uniprot data for: '.$row[\"Sequence\"]);\n        \n        // Get the gene symbol from UniProt.\n        $uniprot = $assay->get_assay_by_uniprot_api(\n          $get[\"import_log_id\"]\n          , $data[$i][\"uniprot_lookup_id\"]\n          , $final_global_template_vars[\"uniprot_protein_api_url\"]\n          , $xml2array\n          , $final_global_template_vars[\"uniprot_regions_array\"]\n          , $row[\"Sequence\"]\n          , $row[\"PeptideGroupId/Description\"]\n          , $row[\"PeptideGroupId/Label\"]\n        );\n\n        $uniprot_result = ($uniprot)? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n        \n\n        write_log($get[\"import_log_id\"],'Uniprot data: '.$uniprot_result);\n\n        $data[$i][\"import_log_id\"] = $get[\"import_log_id\"];\n\n        if($uniprot) \n        {\n\n          $data[$i][\"gene_symbol\"] = $uniprot[\"gene_symbol\"];\n\n          // Get the modification_type from Panorama.\n          $data[$i][\"modification_type\"] = \"unmodified\";\n\n          $peptide_modification_type = $labkey->getModificationType(\n            $panorama_authentication_cookie\n            ,\"targetedms\"\n            ,\"ModificationType\"\n            ,$row[\"PeptideModifiedSequence\"]\n            ,$get['laboratory_abbreviation']\n            ,$get['celllysate_path']\n            ,'ChromatogramLibrary'\n          );\n          \n          $peptide_modification_type_result = ($peptide_modification_type) ? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n          write_log($get[\"import_log_id\"],'Getting modification type: '.$peptide_modification_type_result);\n\n\n\n          if( isset($peptide_modification_type->response) && !empty($peptide_modification_type->response) ) {\n            $modification_type = json_decode($peptide_modification_type->response,true);\n            //dump ($modification_type);\n            $modification_type['rowCount'] = isset($modification_type['rowCount']) ? $modification_type['rowCount'] : false;\n            if($modification_type['rowCount'] > 0) {\n              \n\t\t\t\t\t\t\tif(isset($modification_type['rows'][0][\"modificationType\"])) {\n                $data[$i][\"modification_type\"] = $modification_type['rows'][0][\"modificationType\"];\n              }\n\t\t\t\t\t\t\t\n              if(isset($modification_type['rows'][0][\"StructuralModId/name\"])) {\n                $data[$i][\"modification_type\"] = $modification_type['rows'][0][\"StructuralModId/name\"];\n              }\n            }\n          }\n\n          /*\n           * Query Panorama for the site of modification.\n           */\n\n          // https://daily.panoramaweb.org/labkey/query/CPTAC%20Assay%20Portal/JHU_DChan_HZhang_ZZhang/Serum_QExactive_GlycopeptideEnrichedPRM/ResponseCurve/getQuery.view?query.columns=PeptideId,PeptideId/PeptideModifiedSequence,PeptideId/Sequence,StructuralModId/Name,IndexAA,MassDiff&schemaName=targetedms&query.queryName=PeptideStructuralModification&query.PeptideId~eq=181120\n\n          // StructuralModId/Name\n\n          $returned_site_of_modification = $labkey->getSiteOfModification(\n            $panorama_authentication_cookie\n            ,\"targetedms\"\n            ,\"PeptideStructuralModification\"\n            ,$row[\"Id\"]\n            ,$get['laboratory_abbreviation']\n            ,$get['celllysate_path']\n            ,'ResponseCurve'\n          );\n\n          $returned_site_of_modification_result = ($returned_site_of_modification) ? \"SUCCESS\" : '<span class=\"import-error\">FAIL</span>';\n          write_log($get[\"import_log_id\"],'Getting site of modification: '.$returned_site_of_modification_result);\n\n\n          // Set the \"site_of_modification_peptide\" to N/A first, then populate if data is returned by Panorama.\n          $data[$i][\"site_of_modification_peptide\"] = \"N/A\";\n\n          if( isset($returned_site_of_modification->response) && !empty($returned_site_of_modification->response) ) {\n            $site_of_modification_peptide = json_decode($returned_site_of_modification->response,true);\n            if($site_of_modification_peptide['rowCount'] > 0) {\n              $data[$i][\"site_of_modification_peptide\"] = $site_of_modification_peptide['rows'][0][\"IndexAA\"];\n            }\n          }\n\n          // Build out the rest of the data array.\n          $data[$i][\"import_log_id\"] = $get[\"import_log_id\"];\n          $data[$i][\"peptide_molecular_weight\"] = $row[\"CalcNeutralMass\"];\n          $data[$i][\"peptide_sequence\"] = $row[\"Sequence\"];\n          $data[$i][\"peptide_modified_sequence\"] = $row[\"PeptideModifiedSequence\"];\n          $data[$i][\"hydrophobicity\"] = $row[\"RtCalculatorScore\"];\n          $data[$i][\"panorama_peptide_url\"] = $row[\"_labkeyurl_Sequence\"];\n          $data[$i][\"panorama_protein_url\"] = $row[\"_labkeyurl_PeptideGroupId/Label\"];\n          $data[$i][\"peptide_start\"] = $row[\"StartIndex\"];\n          $data[$i][\"peptide_end\"] = $row[\"EndIndex\"];\n          $data[$i][\"panorama_created_date\"] = $row[\"PeptideGroupId/RunId/Created\"];\n\n        }\n        else\n        {\n\n          $data[$i][\"import_log_id\"] = $get[\"import_log_id\"];\n          $data[$i][\"peptide_molecular_weight\"] = $row[\"CalcNeutralMass\"];\n          $data[$i][\"peptide_sequence\"] = $row[\"Sequence\"];\n          $data[$i][\"peptide_modified_sequence\"] = $row[\"PeptideModifiedSequence\"];\n          $data[$i][\"hydrophobicity\"] = $row[\"RtCalculatorScore\"];\n          $data[$i][\"panorama_peptide_url\"] = $row[\"_labkeyurl_Sequence\"];\n          $data[$i][\"panorama_protein_url\"] = $row[\"_labkeyurl_PeptideGroupId/Label\"];\n          $data[$i][\"peptide_start\"] = $row[\"StartIndex\"];\n          $data[$i][\"peptide_end\"] = $row[\"EndIndex\"];\n          $data[$i][\"panorama_created_date\"] = $row[\"PeptideGroupId/RunId/Created\"];\n\n\n        }\n\n        $i++;\n\n      }\n\n      /*\n       * Loop through the data array and perform inserts.\n       */\n\n      // let's just insert protiens and peptides\n\n      write_log($get[\"import_log_id\"],'Creating initial local records');\n\n      $this_insert_row_count = 0;\n      foreach($data as $key)\n      {\n        \n        write_log($get[\"import_log_id\"],'Saving: '.$key['peptide_modified_sequence']);\n\n        $import->do_initial_inserts($key);\n        ++$this_insert_row_count;\n        \n        if( $app->request->get(\"test_import\") == 1 )\n        {  \n          if($this_insert_row_count >= 5) break;\n        }\n      }\n\n      write_log($get[\"import_log_id\"],'Initial DB write complete');\n      write_log($get[\"import_log_id\"],'Preparing to import asset data');\n\n      $this_record_count = 0;\n\n      foreach($data as $key)\n      {\n        \n        if( $key[\"uniprot_lookup_id\"] && isset($key[\"peptide_sequence\"]) )\n        {\n          /*\n          * Create the initial records in the protein and analyte_peptide tables.\n          */\n\n          //$import->create_initial_records( $key );\n          write_log($get[\"import_log_id\"],'Getting data for: '.$key[\"peptide_sequence\"]);\n\n           /*\n           * Get data from UniProt using the uniprot_lookup_id.\n           */\n\n          $uniprot_data = $assay->get_assay_by_uniprot_api(\n              $get[\"import_log_id\"]\n            , $key[\"uniprot_lookup_id\"]\n            , $final_global_template_vars[\"uniprot_protein_api_url\"]\n            , $xml2array\n            , $final_global_template_vars[\"uniprot_regions_array\"]\n            , $key[\"peptide_sequence\"]\n          );\n\n\n          write_log($get[\"import_log_id\"],'Getting Uniprot data for: '.$key[\"peptide_sequence\"]);\n\n\n          /*\n           * Get data from Entrez Gene: chromosome_start, chromosome_stop, and chromosome_number.\n           */\n\n            if( isset($uniprot_data['gene_symbol']) && ($uniprot_data['gene_symbol'] !== FALSE) )\n            {\n              \n              $import_entrez->import_entrez_gene_data(\n                $uniprot_data['gene_symbol']\n                ,$final_global_template_vars[\"entrez_api_url\"]\n                ,$xml2array\n                ,$user_data[\"email\"]\n              );\n            }\n\n            $this_gene_symbol = !empty($uniprot_data['gene_symbol']) ? $uniprot_data['gene_symbol'] : '<span class=\"import-error\">GENE SYMBOL MISSING</span>';\n            write_log($get[\"import_log_id\"],'Getting Entrez Gene data for: '.$this_gene_symbol);\n            usleep(500000);\n\n          /*\n           * Update the peptide_standard_label_type field in the database.\n           */\n        \n          // Query Panorama for the peptide_standard_label_type data.\n\n          $peptide_standard_label_type = $labkey->getPeptideIsotopeLabelModifications(\n            $panorama_authentication_cookie\n            ,$key[\"peptide_modified_sequence\"]\n            ,$get['laboratory_abbreviation']\n            ,$get['celllysate_path']\n            ,'ResponseCurve');\n\n\n          if( isset($peptide_standard_label_type->response) && !empty($peptide_standard_label_type->response) )\n          {\n            // Format into a PHP array.\n            $peptide_standard_label_type = json_decode($peptide_standard_label_type->response,true);\n            \n            // Update query.\n            if( isset($peptide_standard_label_type[\"rows\"][0][\"IsotopeModification\"]) && !empty($peptide_standard_label_type[\"rows\"][0][\"IsotopeModification\"]) )\n            {\n              $import->import_peptide_standard_label_type($key[\"peptide_sequence\"],$peptide_standard_label_type[\"rows\"][0][\"IsotopeModification\"]);\n            }\n\n          }\n          \n\n\n          if( isset($uniprot_data['protein_name']) )\n          {\n            /*\n             * Update the protein table in the database with data from UniProt.\n             */\n            $import_uniprot_data->import_uniprot_data( $uniprot_data );\n            \n            /*\n             * Insert splice junctions uniprot_data.\n             */\n            $import_uniprot_data->import_uniprot_splice_junctions( $uniprot_data[\"splice_junctions\"], $uniprot_data[\"uniprot_ac\"] );\n            \n            /*\n             * Insert SNPs data.\n             */\n            $import_uniprot_data->import_uniprot_snps( $uniprot_data[\"snps\"], $uniprot_data[\"uniprot_ac\"] );\n            \n            /*\n             * Insert isoforms data.\n             */\n            $import_uniprot_data->import_uniprot_isoforms( $uniprot_data[\"isoforms\"], $uniprot_data[\"uniprot_ac\"] );\n          }\n\n\n\n\n\n        } else {\n          // If UniProt lookup is unsuccessful, send an error report to the CPTAC Assay Portal Admin and the end-user.\n          $peptide_sequence = isset($key[\"peptide_sequence\"]) ? $key[\"peptide_sequence\"] : \"'unknown sequence'\";\n          mail(\n              $final_global_template_vars[\"superadmin_email_address\"].\",\".$user_data[\"email\"]\n            , \"CPTAC Import: UniProt lookup unsuccessful for '\".$peptide_sequence.\"'\"\n            , date('l F jS, Y h:i:s A').\"\\n\\nExecuted by: \".$get['laboratory_name'].\"\\n\\nError message: UniProt lookup unsuccessful for '\".$peptide_sequence.\"'\"\n          );\n        }\n\n      }\n\n    }\n\n  \n  \n\n    /*\n     * Check for missing UniProt data and attempt to import again.\n     */\n\n    write_log($get[\"import_log_id\"],'Running Uniprot fix');\n\n    $url = \"https://\".$_SERVER[\"SERVER_NAME\"].\"/assays_import/fix_uniprot_import/\".$get[\"import_log_id\"];\n    \n    $ch = curl_init($url);\n    curl_setopt($ch, CURLINFO_HEADER_OUT, 0);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_FRESH_CONNECT, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_exec( $ch );\n    curl_close( $ch );\n\n\n\n\n\n\n    /*\n     * Delete the Panorama cookie file from the filesystem.\n     */\n\n    if(is_file($panorama_authentication_cookie)) {\n      unlink($panorama_authentication_cookie);\n    }\n\n  } // Test mode ends.\n\n  /*\n   * Send an email to the site admin to notify that the executed import has finished.\n   */\n\n  $email_subject = \"CPTAC Assay Portal: Main Import Finished, \".date('F j, Y h:i:s A').\" - \".$get['laboratory_name'];\n  $headers = $final_global_template_vars['message_parts']['headers'];\n  $headers .= 'From: CPTAC Assay Portal <noreply@'.$_SERVER[\"SERVER_NAME\"].'>' . \"\\r\\n\";\n  $body_message = '\n    <h1>CPTAC Assay Portal: Main Import Finished - '.$get['laboratory_name'].'</h1>'.\n    $final_global_template_vars['message_parts']['body_connector']\n    .'<p><strong>Date/Time:</strong> '.date('l, F jS, Y \\a\\t h:i:s A').'</p>\n    <p>An import executed by the \"'.$get['laboratory_name'].'\" laboratory has finished. The Panorama images and data import has been executed.</p>\n  ';\n  $message = $final_global_template_vars['message_parts']['body_header'].$body_message.$final_global_template_vars['message_parts']['body_footer'];\n\n  // Send the email\n  mail( $final_global_template_vars[\"superadmin_email_address\"], $email_subject, $message, $headers );\n\n  /* \n   * Import From Panorama Into Portal Tables:\n   *\n   * panorama_chromatogram_images\n   * panorama_response_curve_images\n   * panorama_validation_sample_images\n   * panorama_validation_sample_data\n   * lod_loq_comparison\n   * response_curves_data\n   *\n   */\n\n  $test_import = ( $app->request->get(\"test_import\") == 1 ) ? \"&test_import=1\" : \"\";\n\n  $url = \"https://\".$_SERVER[\"SERVER_NAME\"].\"/assays_import/import_panorama_data/?import_log_id=\".$get[\"import_log_id\"]\n    .\"&imports_executed_log_id=\".$imports_executed_log_id\n    .\"&account_id=\".$log_data[\"executed_by_user_id\"]\n    .$test_import\n    .\"&uniquehash=\".uniqid();\n\n\t\t\n  $ch = curl_init( $url );\n  curl_setopt($ch, CURLINFO_HEADER_OUT, 0);\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);\n  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n  curl_setopt($ch, CURLOPT_FRESH_CONNECT, true);\n  curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n  curl_exec( $ch );\n  curl_close( $ch );\n\n  /* \n   * Output Message\n   */\n\n  // echo \"\\n\\n\".'Import ended on '.date('l jS \\of F Y h:i:s A').'. Panorama data has been successfully imported.'.\"\\n\\n\";\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":501,"column":26},"end":{"row":501,"column":26}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":5,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_protein_peptide.php","digestWhenLastPersisted":"635bd58ea82d0e7008abf359a07a85767d1a1ece","preferredLineEnding":null,"nextMarkerId":312,"deserializer":"TextBuffer","version":5},{"id":"742116fcd21d9ce7348e0a50bae49249","text":"<?php\n/**\n * XML2Array: A class to convert XML to array in PHP\n * It returns the array which can be converted back to XML using the Array2XML script\n * It takes an XML string or a DOMDocument object as an input.\n *\n * See Array2XML: http://www.lalit.org/lab/convert-php-array-to-xml-with-attributes\n *\n * Author : Lalit Patel\n * Website: http://www.lalit.org/lab/convert-xml-to-array-in-php-xml2array\n * License: Apache License 2.0\n *          http://www.apache.org/licenses/LICENSE-2.0\n * Version: 0.1 (07 Dec 2011)\n * Version: 0.2 (04 Mar 2012)\n * \t\t\tFixed typo 'DomDocument' to 'DOMDocument'\n *\n * Usage:\n *       $array = XML2Array::createArray($xml);\n */\nnamespace swpg\\models;\nuse DOMDocument;\nclass XML2Array {\n\n    private static $xml = null;\n\tprivate static $encoding = 'UTF-8';\n\n    /**\n     * Initialize the root XML node [optional]\n     * @param $version\n     * @param $encoding\n     * @param $format_output\n     */\n    public static function init($version = '1.0', $encoding = 'UTF-8', $format_output = true) {\n        self::$xml = new DOMDocument($version, $encoding);\n        self::$xml->formatOutput = $format_output;\n\t\tself::$encoding = $encoding;\n    }\n\n    /**\n     * Convert an XML to Array\n     * @param string $node_name - name of the root node to be converted\n     * @param array $arr - aray to be converterd\n     * @return DOMDocument\n     */\n    public static function &createArray($input_xml) {\n        $xml = self::getXMLRoot();\n\t\tif(is_string($input_xml)) {\n\t\t\t$parsed = $xml->loadXML($input_xml);\n\t\t\tif(!$parsed) {\n\t\t\t\tthrow new Exception('[XML2Array] Error parsing the XML string.');\n\t\t\t}\n\t\t} else {\n\t\t\tif(get_class($input_xml) != 'DOMDocument') {\n\t\t\t\tthrow new Exception('[XML2Array] The input XML object should be of type: DOMDocument.');\n\t\t\t}\n\t\t\t$xml = self::$xml = $input_xml;\n\t\t}\n\t\t$array[$xml->documentElement->tagName] = self::convert($xml->documentElement);\n        self::$xml = null;    // clear the xml node in the class for 2nd time use.\n        return $array;\n    }\n\n    /**\n     * Convert an Array to XML\n     * @param mixed $node - XML as a string or as an object of DOMDocument\n     * @return mixed\n     */\n    private static function &convert($node) {\n\t\t$output = array();\n\n\t\tswitch ($node->nodeType) {\n\t\t\tcase XML_CDATA_SECTION_NODE:\n\t\t\t\t$output['@cdata'] = trim($node->textContent);\n\t\t\t\tbreak;\n\n\t\t\tcase XML_TEXT_NODE:\n\t\t\t\t$output = trim($node->textContent);\n\t\t\t\tbreak;\n\n\t\t\tcase XML_ELEMENT_NODE:\n\n\t\t\t\t// for each child node, call the covert function recursively\n\t\t\t\tfor ($i=0, $m=$node->childNodes->length; $i<$m; $i++) {\n\t\t\t\t\t$child = $node->childNodes->item($i);\n\t\t\t\t\t$v = self::convert($child);\n\t\t\t\t\tif(isset($child->tagName)) {\n\t\t\t\t\t\t$t = $child->tagName;\n\n\t\t\t\t\t\t// assume more nodes of same kind are coming\n\t\t\t\t\t\tif(!isset($output[$t])) {\n\t\t\t\t\t\t\t$output[$t] = array();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$output[$t][] = $v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//check if it is not an empty text node\n\t\t\t\t\t\tif($v !== '') {\n\t\t\t\t\t\t\t$output = $v;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(is_array($output)) {\n\t\t\t\t\t// if only one node of its kind, assign it directly instead if array($value);\n\t\t\t\t\tforeach ($output as $t => $v) {\n\t\t\t\t\t\tif(is_array($v) && count($v)==1) {\n\t\t\t\t\t\t\t$output[$t] = $v[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(empty($output)) {\n\t\t\t\t\t\t//for empty nodes\n\t\t\t\t\t\t$output = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// loop through the attributes and collect them\n\t\t\t\tif($node->attributes->length) {\n\t\t\t\t\t$a = array();\n\t\t\t\t\tforeach($node->attributes as $attrName => $attrNode) {\n\t\t\t\t\t\t$a[$attrName] = (string) $attrNode->value;\n\t\t\t\t\t}\n\t\t\t\t\t// if its an leaf node, store the value in @value instead of directly storing it.\n\t\t\t\t\tif(!is_array($output)) {\n\t\t\t\t\t\t$output = array('@value' => $output);\n\t\t\t\t\t}\n\t\t\t\t\t$output['@attributes'] = $a;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $output;\n    }\n\n    /*\n     * Get the root XML node, if there isn't one, create it.\n     */\n    private static function getXMLRoot(){\n        if(empty(self::$xml)) {\n            self::init();\n        }\n        return self::$xml;\n    }\n}","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":77,"column":10},"end":{"row":77,"column":10}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/core/slim_framework/SWPG/models/XML2Array.php","digestWhenLastPersisted":"9535ed110909864a0ebb21888c8cd8600cf1e9b8","preferredLineEnding":null,"nextMarkerId":80,"deserializer":"TextBuffer","version":5},{"id":"1f5c16aebeda7f19a2fbb7a7eb974e31","text":"<?php\n/* Note that you are able to use any key that exists in\n * the global settings, and it will overwrite it\n */\n\n// Set $_SERVER variables for the scripts running via the command line\n$_SERVER[\"CORE_TYPE\"] = (isset($_SERVER[\"CORE_TYPE\"]) && ($_SERVER[\"CORE_TYPE\"] != NULL)) ? $_SERVER[\"CORE_TYPE\"] : 'core';\n$_SERVER[\"SERVER_NAME\"] = (isset($_SERVER[\"SERVER_NAME\"]) && ($_SERVER[\"SERVER_NAME\"] != NULL)) ? $_SERVER[\"SERVER_NAME\"] : 'cptacdev.cancer.gov';\n\n$panorama_paths = array(\n  \"server_raw\" => \"https://daily.panoramaweb.org\"\n  ,\"server\" => \"https://daily.panoramaweb.org/labkey\"\n  ,\"query_path\" => \"/query/CPTAC%20Assay%20Portal/\"\n  ,\"targetedms_query_path\" => \"/targetedms/CPTAC%20Assay%20Portal/\"\n  ,\"project_query_path\" => \"/project/CPTAC%20Assay%20Portal/\"\n);\n\n$swpg_module_settings = array(\n  \"module_name\" => \"CPTAC Assay Portal\"\n  ,\"module_description\" => \"Browse and find assays.\"\n  ,\"module_icon_path\" => \"/\" . $_SERVER[\"CORE_TYPE\"] . \"/images/icons/pixelistica-blue-icons/png/64x64/home.png\"\n  ,\"sort_order\" => 20\n  ,\"menu_hidden\" => true\n  ,\"menu_template_name\" => \"\"\n  ,\"pages\" => array(\n    array(\n      \"label\" => \"Browse Assays\", \"path\" => \"/\", \"display\" => false\n    )\n  )\n  ,\"navbar\" => \"/site/templates/navbar.php\"\n  ,\"layout_template_name\" => \"swpg_bootstrap_admin_non_responsive.html\"\n  ,\"datatables\" => array(\n    // Attributes of each datatable\n    array(\n      \"dom_table_id\" => \"browse_table\"\n      ,\"path_to_details_page\" => \"/\"\n      ,\"path_to_sample_page\" => isset($final_global_template_vars[\"path_to_this_module\"]) \n          ? $final_global_template_vars[\"path_to_this_module\"] . \"/sample\" : false\n      ,\"path_to_datatables_controller\" => isset($final_global_template_vars[\"path_to_this_module\"]) \n          ? $final_global_template_vars[\"path_to_this_module\"] . \"/datatables_browse_assays\" : false\n      ,\"path_to_delete\" => isset($final_global_template_vars[\"path_to_this_module\"]) \n          ? $final_global_template_vars[\"path_to_this_module\"] . \"/assay/delete\" : false\n      ,\"data\" => \"\"\n      ,\"active_on_load\" => true\n      ,\"fields\" => array(\n        \"manage\" => array(\"label\" => \"\", \"filter\" => false, \"show_column_toggle\" => false, \"initially_hidden\" => true)\n        ,\"gene\" => array(\"label\" => \"Gene\", \"comparison_default\" => \"equals\", \"filter\" => false, \"show_column_toggle\" => false, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"peptide_sequence\" => array(\"label\" => \"Proteins and peptides for which assays are available\", \"comparison_default\" => \"start_with\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => false, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"laboratory_name\" => array(\"label\" => \"Submitting Laboratory\", \"comparison_default\" => \"start_with\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => false, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"peptide_start\" => array(\"label\" => \"Peptide Start\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"peptide_end\" => array(\"label\" => \"Peptide End\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"modification\" => array(\"label\" => \"Modification\", \"comparison_default\" => \"equals\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => false, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"assay_type\" => array(\"label\" => \"Assay Type\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => false, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"matrix\" => array(\"label\" => \"Matrix\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => false, \"filter_type\" => \"text\", \"data_type\" => \"int\")\n        // ,\"lod\" => array(\"label\" => \"LOD\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        // ,\"lloq\" => array(\"label\" => \"LLOQ\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"hydrophobicity\" => array(\"label\" => \"Hydrophobicity\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        // NEW COLUMNS\n        ,\"site_of_modification_protein\" => array(\"label\" => \"Site of Modification - Protein\", \"comparison_default\" => \"equals\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"protein_species_label\" => array(\"label\" => \"Species\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        // ,\"homology\" => array(\"label\" => \"Homology\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"peptide_standard_purity\" => array(\"label\" => \"Peptide Standard Purity\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"instrument\" => array(\"label\" => \"Instrument\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"endogenous_detected\" => array(\"label\" => \"Endogenous Detected\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"med_total_CV\" => array(\"label\" => \"Med Total CV\", \"comparison_default\" => \"contains\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => true, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n        ,\"cptac_id\" => array(\"label\" => \"CPTAC ID\", \"comparison_default\" => \"equals\", \"filter\" => false, \"show_column_toggle\" => true, \"initially_hidden\" => false, \"filter_type\" => \"text\", \"data_type\" => \"text\")\n\n      )\n      ,\"search_fields\" => array(\n        \"protein.gene_symbol\"\n        , \"group.name\"\n        , \"protein.cptac_id\"\n        , \"analyte_peptide.modification_type\"\n        , \"protein.uniprot_accession_id\"\n        , \"analyte_peptide.peptide_sequence\"\n        , \"analyte_peptide.peptide_start\"\n        , \"analyte_peptide.peptide_end\"\n      )\n    )\n  )\n  // For importing data from UniProt\n  ,\"uniprot_regions_array\" => array(\n    'topological domain'\n    ,'transmembrane region'\n    ,'intramembrane region'\n    ,'domain'\n    ,'repeat'\n    ,'calcium binding'\n    ,'zinc finger'\n    ,'dna binding'\n    ,'nucleotide phosphate-binding region'\n    ,'region of interest'\n    ,'coiled coil'\n    ,'motif'\n    ,'compositional bias'\n  )\n  ,\"files_directory\"=> \"/assays/library/images/\"\n  //,\"panorama_images_storage_path\"=> $_SERVER['DOCUMENT_ROOT'].\"/swpg_files/cptac/panorama_test/\"\n  //,\"panorama_images_path\"=> \"/swpg_files/cptac/panorama_test/\"\n  //,\"sop_files_path\" => \"/swpg_files/cptac/sop_files/\"\n  //,\"disqus_shortname\" => ($_SERVER[\"SERVER_NAME\"] == 'assaysdev.cancer.gov') ? 'cptacdevswpg' : 'cptacswpg'\n  // Panorama / Labkey settings\n  ,\"labkey_config\" => array(\n    \"email\" => \"lossm@mail.nih.gov\"\n    ,\"password\" => \"swpgtrident\"\n    ,\"server_raw\" => $panorama_paths[\"server_raw\"]\n    ,\"server\" => $panorama_paths[\"server\"]\n    ,\"query_endpoint_live\" => $panorama_paths[\"server\"].$panorama_paths[\"query_path\"]\n    ,\"targetedms_query_path\" => $panorama_paths[\"server\"].$panorama_paths[\"targetedms_query_path\"]\n    ,\"project_endpoint_live\" => $panorama_paths[\"server\"].$panorama_paths[\"project_query_path\"]\n  )\n  ,\"google_analytics_config\" => array(\n    \"id\" => \"ga:78611517\"\n    ,\"path_to_key_file\" => \"/swpg_files/cptac/ga_key_file/74f850cf5d875f69aa9732e5b11acf7e58bfd9be-privatekey.p12\"\n    ,\"email_address\" => \"685467335384-goaoe9n23ufd0l3u1tpbsbtm2ahjmmhv@developer.gserviceaccount.com\"\n    ,\"client_id\" => \"685467335384-g4g9sfr6ij8btag15tkdigu67u9jg5rs.apps.googleusercontent.com\"\n    ,\"start_date\" => \"2013-11-01\"\n    ,\"end_date\" => date('Y-m-d') // Today\n  )\n  ,\"uniprot_protein_api_url\" => \"http://www.uniprot.org/uniprot/\"\n  ,\"entrez_api_url\" => \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"\n  ,\"panorama_url\" => \"https://daily.panoramaweb.org/\"\n  ,\"biodbnet_api_url\" => \"http://biodbnet.abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json\"\n);\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":105,"column":26},"end":{"row":105,"column":26}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/config/settings.php","digestWhenLastPersisted":"4affd54388ffa74efbd40e569afc5ba77dc15e1e","preferredLineEnding":null,"nextMarkerId":24,"deserializer":"TextBuffer","version":5},{"id":"00f32275b9cdb21752f45e4313609f3f","text":"<?php\n/**\n * @desc Import Assays: controller for inserting and updating data\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 1.0\n * @package cptac\n *\n */\nfunction execute_import( $import_log_id = false ) {\n  $app = \\Slim\\Slim::getInstance();\n  $env = $app->environment();\n  global $final_global_template_vars;\n  require_once $final_global_template_vars[\"swpg_module_list\"][\"assays\"][\"absolute_path_to_this_module\"].\"/models/assays.class.php\";\n  require_once $final_global_template_vars[\"absolute_path_to_this_module\"].\"/models/assays_import.class.php\";\n  require_once $final_global_template_vars[\"swpg_module_list\"][\"assays\"][\"absolute_path_to_this_module\"].\"/models/import_panorama_data.class.php\";\n  require_once $final_global_template_vars[\"swpg_module_list\"][\"user_account\"][\"absolute_path_to_this_module\"].\"/models/user_account.class.php\";\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n  $assay = new Assay( $db_resource );\n  $import = new AssaysImport( $db_resource, $final_global_template_vars[\"session_key\"] );\n  $import_panorama_data = new ImportPanoramaData( $db_resource );\n  $user = new UserAccount( $db_resource, $final_global_template_vars[\"session_key\"] );\n\n  $data = array();\n  $laboratory_data = array();\n  $get = $app->request->get();\n  $post = $app->request->post();\n  $data[\"import_executed_status\"] = (isset($get[\"import_executed_status\"]) && ($get[\"import_executed_status\"] == \"true\") ) ? true : false;\n  $data[\"session\"] = $_SESSION[$final_global_template_vars[\"session_key\"]];\n\n  $user_laboratory_ids = $data[\"session\"][\"associated_groups\"];\n\n  \n  // Get the user's roles.\n  $user_role_ids = isset($data[\"session\"][\"user_role_list\"]) \n    ? $data[\"session\"][\"user_role_list\"] : array();\n\n  if(!empty($get)) {\n    // Get the laboratory metadata via the import_log_id GET variable.\n    $data[\"laboratory_data\"] = $assay->get_laboratory_by_import_log_id( $get[\"import_log_id\"] );\n\n    // If get_laboratories() returns false, throw a 404.\n    if(!$data[\"laboratory_data\"]) $app->notFound();\n\n    // If user is not a superadmin or not in a laboratory (group), throw a 404.\n    if( !in_array(4, $user_role_ids) && !in_array($data[\"laboratory_data\"][\"laboratory_id\"], $user_laboratory_ids) ) {\n      $app->notFound();\n    }\n\n    // Get all executed imports data.\n    $data[\"executed_imports\"] = $import->get_executed_imports( $data[\"laboratory_data\"][\"import_log_id\"] );\n\n    // Get all sequences for a lab, to pass it to the next method, check_for_missed_images().\n    $all_sequences = $assay->getPeptideSequences( $data[\"laboratory_data\"][\"import_log_id\"] );\n\n    // Get all of the problematic images.\n    $data[\"missed_images\"] = $import_panorama_data->check_for_missed_images( \n       $data[\"laboratory_data\"][\"laboratory_id\"]\n      ,$data[\"laboratory_data\"][\"import_log_id\"]\n      ,$all_sequences \n    );\n\n    // Get all of the problematic images data.\n    $data[\"missed_images_data\"] = $import_panorama_data->check_for_missed_images_data(\n       $data[\"laboratory_data\"][\"laboratory_id\"]\n      ,$data[\"laboratory_data\"][\"import_log_id\"]\n      ,$all_sequences\n    );\n\n    $data[\"deleted\"] = (isset($get[\"deleted\"]) && ($get[\"deleted\"] == \"true\")) ? true : false;\n    $data[\"reset\"] = (isset($get[\"reset\"]) && ($get[\"reset\"] == \"true\")) ? true : false;\n  \n\n\n    // look for import logs\n    $data['path_to_log'] = false;\n    $folder_path = $_SERVER['DOCUMENT_ROOT'].$final_global_template_vars['import_log_location'];\n    $folders =  scandir ($folder_path,2);\n    $ignore = array('.','..');\n    foreach($folders as $key => $value)\n    {\n      if(!in_array($value,$ignore))\n      {\n        \n        $log_file = $folder_path.'/'.$value.'/'.$data[\"laboratory_data\"][\"import_log_id\"].'.txt';\n        if(is_file($log_file))\n        {\n          $data['path_to_log'] = $final_global_template_vars['import_log_location'].'/'.$value.'/'.$data[\"laboratory_data\"][\"import_log_id\"].'.txt';\n          break;    \n        }      \n      }\n    }\n\n\n  }\n\n  /* \n   * Import From Panorama Into Portal Tables:\n   *\n   * protein\n   * analyte_peptide\n   * uniprot_splice_junctions\n   * uniprot_snps\n   * uniprot_isoforms\n   *\n   */\n\n\t\n\n  if(!empty($post)) {\n\n    clear_log($post[\"import_log_id\"]);\n    write_log($post[\"import_log_id\"],'Import Started. ID:'.$post['import_log_id']);\n\n    // Get the laboratory metadata via the import_log_id POST variable.\n    $data[\"laboratory_data\"] = $assay->get_laboratory_by_import_log_id( $post[\"import_log_id\"] );\n    // If get_laboratory_by_import_log_id() returns false, throw a 404.\n    if(!$data[\"laboratory_data\"]) $app->notFound();\n    // Set the run_missed_images variable.\n    $test_import = (isset($post[\"test_import\"]) && ($post[\"test_import\"] == \"true\")) \n      ? \"&test_import=1\" : false;\n    // Set the run_missed_images variable.\n    $run_missed_images = (isset($post[\"run_missed_images\"]) && ($post[\"run_missed_images\"] == \"true\")) \n      ? \"&run_missed_images=true\" : false;\n\n    if( !$run_missed_images ) {\n\t\t\t\n      // Execute the full import script.\n      $url = \"https://\".$_SERVER[\"SERVER_NAME\"].$final_global_template_vars[\"path_to_this_module\"]\n      .\"/import_panorama_protein_peptide/?import_log_id=\".$data[\"laboratory_data\"][\"import_log_id\"]\n      .\"&account_id=\".$post[\"account_id\"].$test_import.\"&uniquehash=\".uniqid();\n      \n      $import_type = ($test_import) ? \"Test\" : \"Full\";\n      write_log($post[\"import_log_id\"],\"Execute the {$import_type} import script\");\n\n      //die($url);\t\n\n\t\t\t$ch = curl_init();\n      curl_setopt($ch, CURLOPT_URL, $url);\n      curl_setopt($ch, CURLINFO_HEADER_OUT, 0);\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);\n      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n      curl_setopt($ch, CURLOPT_FRESH_CONNECT, true);\n      curl_setopt($ch, CURLOPT_TIMEOUT, 15);\n      curl_exec( $ch );\n      curl_close( $ch );\n\t\t\t\n    } else {\n      // Execute the import for missed images script.\n      $url = \"https://\".$_SERVER[\"SERVER_NAME\"].$final_global_template_vars[\"path_to_this_module\"]\n      .\"/import_panorama_data/?import_log_id=\".$data[\"laboratory_data\"][\"import_log_id\"]\n      .\"&imports_executed_log_id=\".$post[\"imports_executed_log_id\"]\n      .$run_missed_images.\"&account_id=\".$post[\"account_id\"].\"&uniquehash=\".uniqid();\n     \n      write_log($post[\"import_log_id\"],'Execute the import for missed images script');\n\n\t\t  $ch = curl_init();\n      curl_setopt($ch, CURLOPT_URL, $url);\n      curl_setopt($ch, CURLINFO_HEADER_OUT, 0);\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);\n      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n      curl_setopt($ch, CURLOPT_FRESH_CONNECT, true);\n      curl_setopt($ch, CURLOPT_TIMEOUT, 15);\n      curl_exec( $ch );\n      curl_close( $ch );\n    }\n\n    $data[\"import_executed_status\"] = true;\n  }\n\n  // Get the panorama errors email recipients data.\n  foreach($final_global_template_vars[\"panorama_errors_email_recipients_ids\"] as $account_id) {\n    $admins[] = $user->get_user_account_info( $account_id );\n  }\n  foreach ($admins as $admin) {\n    // Names array.\n    $data[\"panorama_errors_email_recipients\"][\"names\"][] = $admin[\"given_name\"].\" \".$admin[\"sn\"];\n  }\n\n  // Get the laboratory name for the page title (superadmin only).\n  $laboratory_name = in_array(4, $user_role_ids) ? \": \".$data[\"laboratory_data\"][\"laboratory_name\"] : \"\";\n\n  // Render\n  $app->render(\n    \"execute_import.php\"\n    ,array(\n      \"page_title\" => \"Execute and Manage Import\".$laboratory_name\n      ,\"hide_side_nav\" => false\n      ,\"data\" => $data\n      ,\"show_log\" => $data[\"import_executed_status\"]\n      ,\"log_cache_id\" => uniqid()\n    )\n  );\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":146,"column":23},"end":{"row":146,"column":23}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/execute_import.php","digestWhenLastPersisted":"c097c94d979892dac97edaa94ba66e262d498819","preferredLineEnding":null,"nextMarkerId":40,"deserializer":"TextBuffer","version":5},{"id":"aa95bdd48443c7fd1e2628d980777527","text":"{% extends layout_template_name %}\n{% import \"convert_filesize.twig\" as convert %}\n{% block meta_tags %}\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"description\" content=\"Assay details for {{ gene }}, CPTAC-{{ manage }}\">\n  <meta name=\"keywords\" content=\"{{ gene }}, CPTAC-{{ manage }}, cancer, assay, protein, gene, peptide, sequence, characterize, tumor, normal tissue, biospecimens, genomic, proteomic, data, analysis, discovery, biomarker, testing, verification, uniprot, panorama, entrez\">\n  <meta name=\"author\" content=\"ABCC's Scientific Web Programming Group, Frederick National Laboratory for Cancer Research (FNLCR)\">\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n{% endblock %}\n{% block styles_head %}\n  {{ parent() }}\n  <link href=\"//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css\" rel=\"stylesheet\">\n  <link href=\"//cdnjs.cloudflare.com/ajax/libs/bootstrap-lightbox/0.5/bootstrap-lightbox.css\" rel=\"stylesheet\">\n  <!--[if IE 7]>\n  <link href=\"//netdna.bootstrapcdn.com/font-awesome/3.0.2/css/font-awesome-ie7.css\" rel=\"stylesheet\">\n  <![endif]-->\n  <link href=\"/site/library/css/styles.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"/assays/library/css/styles.css\" rel=\"stylesheet\" type=\"text/css\" />\n{% endblock %}\n{% block content %}\n  {% include 'secondary_navigation.php' %}\n  <div id=\"genSlotMainNav\">\n    {% include 'top_navigation.php' %}\n  </div>\n\n  <a name=\"top\"></a>\n\n  <div id=\"outer-wrapper\" class=\"row-outer row-outer-details\">\n\n    {% if preview_header %}\n      <div class=\"alert alert-error alert-preview\">\n        <i class=\"icon-exclamation-sign\"></i> You are viewing this record in preview mode. Record Status: {{ status_display }}\n      </div>\n    {% endif %}\n\n    <div class=\"row-fluid\">\n      <div class=\"detail-page-header\"><h3><i class=\"local-icon-helix\"></i> {{ gene }}</h3></div>\n      <div class=\"detail-page-header assay-nav\">\n  \n        {% set previous = false %}\n        {% set previousLink = '#' %}\n        {% set previousDisabled = 'disabled' %}        \n        {% if prevNext.previous != '' %}\n          {% set previous = prevNext.previous %}\n          {% set previousTooltip = 'Go to Assay '~previous %}\n          {% set previousDisabled = '' %}\n          {% set previousLink = '/'~previous %}\n        {% endif %}\n\n        {% set next = false %}\n        {% set nextLink = '#' %}\n        {% set nextDisabled = 'disabled' %}        \n        {% if prevNext.next != '' %}\n          {% set next = prevNext.next %}\n          {% set nextTooltip = 'Go to Assay '~next %}\n          {% set nextDisabled = '' %}\n          {% set nextLink = '/'~next %}\n        {% endif %}\n\n          <a href=\"{{ previousLink }}\" data-original-title=\"{{ previousTooltip }}\" class=\"btn btn-small assay-nav-btn {{ previousDisabled }}\"><i class=\"icon-arrow-left\"></i> Previous Assay</a>  \n          <a href=\"{{ nextLink }}\" class=\"btn btn-small assay-nav-btn {{ nextDisabled }}\" data-original-title=\"{{ nextTooltip }}\">Next Assay <i class=\"icon-arrow-right\"></i></a></div>\n    </div>\n\n    <div class=\"row-fluid\">\n      <div class=\"span6 overview-details\">\n        <h4>Overview <span class=\"graph-instructions muted\">Data source: UniProt</span></h4>\n        <table class=\"table table-condensed\">\n          <tr>\n            <th>Official Gene Symbol</th>\n            <th>Other Aliases</th>\n          </tr>\n          <tr>\n            <td>{{ gene }}</td>\n            <!-- <td>{% if entrez_api.gene_synonyms %}{{ entrez_api.gene_synonyms }}{% else %}N/A{% endif %}</td> -->\n            <td>{% if uniprot_gene_synonym %}{{ uniprot_gene_synonym }}{% else %}N/A{% endif %}</td>\n          \n          </tr>\n        </table>\n        <table class=\"table table-condensed\">\n          <tr>\n            <th>Sequence Length (AA)</th>\n            <th>Molecular Weight (Da)</th>\n          </tr>\n          <tr>\n            <td>{{ uniprot_api.sequence_length }}</td>\n            <td>{{ protein_molecular_weight }}</td>\n          </tr>\n        </table>\n        <table class=\"table table-condensed\">\n          <tr>\n            <th>Protein Name</th>\n          </tr>\n          <tr>\n            <td>{{ uniprot_protein_name }}</td>\n          </tr>\n        </table>\n        <table class=\"table table-condensed\">\n          <tr>\n            <th colspan=\"2\">Sources</th>\n          </tr>\n          <tr>\n            <td>\n              <i class=\"icon-external-link\"></i> <a href=\"{{ uniprot_link }}\" target=\"_blank\" title=\"External link to Uniprot Database\">UniProt</a><br />\n              <i class=\"icon-external-link\"></i> <a href=\"http://www.phosphosite.org/uniprotAccAction.do?id={{ uniprot_api.uniprot_ac }}\" target=\"_blank\" title=\"PhosphoSite\">PhosphoSitePlus &reg;</a><br />\n              <i class=\"icon-external-link\"></i> <a href=\"http://www.genecards.org/cgi-bin/carddisp.pl?gene={{ gene }}\" target=\"_blank\" title=\"GeneCards\">GeneCards</a>\n            </td>\n            <td>\n              {% if entrez_api.entrez_gene_id %}\n                <i class=\"icon-external-link\"></i> <a href=\"http://www.ncbi.nlm.nih.gov/gene/{{ entrez_api.entrez_gene_id }}\" target=\"_blank\" title=\"Entrez Gene\">Entrez Gene</a><br />\n              {% endif %}\n              <i class=\"icon-external-link\"></i> <a href=\"http://www.proteinatlas.org/search/{{ gene }}\" target=\"_blank\" title=\"Human Protein Atlas\">Human Protein Atlas</a>\n            </td>\n          </tr>\n        </table>\n      </div>\n\n\n\n      <div class=\"span6 sequence\">\n        <h4>Protein Sequence <span class=\"graph-instructions\"><i class=\"icon-info-sign\"></i> hover to view complete sequence</span></h4>\n        \n        <div class=\"protein-sequence\">\n          {{ uniprot_api.formatted_sequence|raw }}\n        </div>\n        <p class=\"muted\">Data source: UniProt</p>\n      </div>\n    </div>\n\n    {# <div class=\"row-fluid\">\n      <div class=\"span6 sequence\">\n        <h4>Protein Sequence <span class=\"graph-instructions\"><i class=\"icon-info-sign\"></i> hover to view complete sequence</span></h4>\n        <div class=\"protein-sequence\">\n          {{ uniprot_api.formatted_sequence|raw }}\n        </div>\n      </div>\n\n      <div class=\"span6 sequence\">\n        <h4>Splice Junctions <span class=\"graph-instructions\"><i class=\"icon-info-sign\"></i> hover to view complete sequence</span></h4>\n        {% if ensembl_sequence %}\n          <div class=\"splice-junction-sequence\">\n            <div class=\"splice-junctions-legend\">\n              <div class=\"splice-junction-black\">Alternating Exons</div>\n              <div class=\"splice-junction-blue\">Alternating Exons</div>\n              <div class=\"splice-junction-red\">Residue Overlap Splice Site</div>\n            </div>\n            <pre>{{ ensembl_sequence|raw }}</pre>\n          </div>\n        {% else %}\n          <p>Splice Junctions Unavailable</p>\n        {% endif %}\n      </div>\n    </div> #}\n\n  <div class=\"row-fluid header-split\">\n    <div class=\"span12\">\n      <h3><i class=\"icon-picture\"></i> Protein Map <span class=\"collapse-button\"><a href=\"javascript:void(0);\"><i class=\"icon-collapse-alt\"></i> <span class=\"toggle-text\">Collapse protein map</span></a></span></h3>\n    </div>\n  </div>\n\n  <div id=\"graphs\" class=\"row-fluid\">\n    <div class=\"span12 details\">\n\n      <h3>Position of Targeted Peptide Analytes Relative to SNPs, Isoforms, and PTMs</h3>\n      <p>\n        <i class=\"icon-external-link\"></i> <a href=\"{{ uniprot_link }}\" target=\"_blank\" title=\"External link to the Uniprot database entry\">Uniprot Database Entry</a>\n        <i class=\"icon-external-link horizontal-list\"></i> <a href=\"http://www.phosphosite.org/uniprotAccAction.do?id={{ uniprot_api.uniprot_ac }}\" target=\"_blank\" title=\"External link to the PhosphoSitePlus database entry\">PhosphoSitePlus &reg;</a>\n      </p>\n\n      <div class=\"muted mrm-points\">\n        Click a point on a node <div class=\"mrm-block-symbol\"></div> to view detailed assay information below <i class=\"icon-circle-arrow-down\"></i>\n      </div>\n      <div class=\"muted all-other-points\">\n        All other points link out to <i class=\"icon-external-link\"></i> <a href=\"http://www.uniprot.org/\" target=\"_blank\">UniProt</a>\n      </div>\n\n      <div id=\"all_in_one_graph\"></div>\n\n      <hr>\n\n      {% if phosphosites_graph %}\n        <object width=\"855\" height=\"300\"><param name=\"wmode\" value=\"transparent\" />{{ phosphosites_graph|raw }}</object>\n      {% endif %}\n \n    </div>\n  </div>\n\n  <a name=\"assay_details_anchor\"></a>\n\n  <div id=\"preloader_loading_assay_details\">\n    <p id=\"preloader_text\">loading</p>\n    <img src=\"/site/library/images/indicator-big.gif\" id=\"preloader_image\" alt=\"Loader\">\n  </div>\n\n  {% for key, field in genes %}\n    <div class=\"{{ field.peptide_sequence }}-{{ field.manage }} {{ field.manage }} assay-details-wrapper\"> {# _{{ loop.index0 }} #}\n      <hr class=\"black\">\n      <h3><i class=\"icon-bar-chart\"></i> Assay Details for CPTAC-{{ field.manage }} <span id=\"collapse-button-assay-details\"><a href=\"javascript:void(0);\"><i class=\"icon-collapse-alt\"></i> <span class=\"toggle-text\">Collapse assay details</span></a></span></h3>\n      <p class=\"muted\">Data source: Panorama</p>\n\n      <div id=\"assay_details\" class=\"row-fluid\">\n        <div class=\"span12\">\n          <div class=\"span6\">\n            <dl class=\"dl-horizontal\">\n              <dt>Official Gene Symbol</dt>\n              <dd>{{ field.gene }}</dd>\n              <dt>Peptide{{ (field.peptide_modified_sequence != field.peptide_sequence)?' Modified':'' }} Sequence</dt>\n              <dd>{{ field.peptide_modified_sequence }}</dd>\n              <dt>CPTAC ID</dt>\n              <dd>CPTAC-{{ field.manage }}</dd>\n              <dt>Modification Type</dt>\n              <dd>{{ field.modification|capitalize }}</dd>\n              <dt>Site of Modification</dt>\n              <dd>{% if field.site_of_modification_peptide %}{{ field.site_of_modification_peptide }}{% else %}N/A{% endif %}</dd>\n              <dt>Peptide Start</dt>\n              <dd>{{ field.peptide_start }}</dd>\n              <dt>Peptide End</dt>\n              <dd>{{ field.peptide_end }}</dd>\n            </dl>\n          </div>\n          <div class=\"span6\">\n            <dl class=\"dl-horizontal\">\n              <dt>Peptide Molecular Mass</dt>\n              <dd>{{ field.peptide_molecular_weight|number_format(4) }}</dd>\n              <dt>Species</dt>\n              <dd>{{ field.species }}</dd>\n\n                {% set display_assay_type = false %}\n                {% if field.assay_type %}\n                {% set display_assay_type = field.assay_type|capitalize %}\n                {% endif %}\n\n\n              <dt>Assay Type</dt>\n              <dd>{% if display_assay_type %}{{ display_assay_type }}{% else %}Direct{% endif %} {{ data_type }}</dd>\n              \n              {% if field.assay_type == 'enrichment' %}\n                <dt>Enrichment Method</dt>\n                <dd>{{ enrichment_method?:'N/A' }}</dd>\n              {% endif %}\n\n              {% if field.assay_type == 'fractionation' %}\n                <dt>Fractionation Approach</dt>\n                <dd>{{ fractionation_approach?:'N/A' }}</dd>\n              {% endif %}\n\n              <dt>Matrix</dt>\n              <dd>{{ field.matrix }}</dd>\n              <dt>Submitting Laboratory</dt>\n              <dd>{{ field.laboratory_name }}</dd>\n              <dt>Submitting Lab PI</dt>\n              <dd>{{ field.primary_contact_name }}</dd>\n            </dl>\n          </div>\n          {% if field.publication_citation %}\n            <hr class=\"clear_bottom_margin\">\n            <h4>Publication</h4>\n            <p><i class=\"icon-external-link\"></i> <a href=\"{{ field.publication_url }}\" target=\"_blank\" title=\"External link to publication details\">View Details</a> <span class=\"muted\">(opens in a new window)</span></p>\n            <p>{{ field.publication_citation | raw }}</p>\n          {% endif %}\n          {% if field.disclaimer %}\n            <hr class=\"clear_bottom_margin\">\n            <p><em>{{ field.disclaimer }}</em></p>\n          {% endif %}\n        </div>\n      </div>\n\n      <h3><i class=\"icon-bar-chart\"></i> Assay Parameters <span id=\"collapse-button-assay-parameters\"><a href=\"javascript:void(0);\"><i class=\"icon-collapse-alt\"></i> <span class=\"toggle-text\">Collapse assay parameters</span></a></span></h3>\n      <p class=\"muted\">Data source: Panorama</p>\n\n      <div id=\"assay_parameters\" class=\"row-fluid\">\n         <div class=\"span6\">\n           <dl>\n             <dt>Instrument</dt>\n             <dd>{{ field.instrument }}</dd>\n             <dt>Internal Standard</dt>\n             <dd>{{ field.internal_standard }}</dd>\n             <dt>Peptide Standard Purity</dt>\n             <dd>{{ field.peptide_standard_purity }}</dd>\n             <dt>Peptide Standard Label Type</dt>\n             <dd>{{ field.peptide_standard_label_type }}</dd>\n           </dl>\n         </div>\n         <div class=\"span6\">\n           <dl>\n             <dt>LC</dt>\n             <dd>{{ field.lc }}</dd>\n             <dt>Column Packing</dt>\n             <dd>{{ field.column_packing }}</dd>\n             <dt>Column Dimensions</dt>\n             <dd>{{ field.column_dimensions }}</dd>\n             <dt>Flow Rate</dt>\n             <dd>{{ field.flow_rate }}</dd>\n           </dl>\n         </div>\n       </div>\n      \n\n\n      <h3>Chromatograms</h3> {# _{{ loop.index }} #}\n      <p class=\"muted\">Data source: Panorama</p>\n\n      <div class=\"row-fluid plasma-charts\">\n\n        <div class=\"chromatogram_image_inline_1 span4 image\">\n          {% if field.chromatogram_images[0] %}\n            <a data-toggle=\"lightbox\" href=\".chromatogram_image_{{ field.manage }}_1\"><img src=\"{{ field.chromatogram_images[0] }}\"></a>\n            <div class=\"caption-link\">\n              <i class=\"icon-eye-open\"></i> <a data-toggle=\"lightbox\" href=\".chromatogram_image_{{ field.manage }}_1\">view larger image</a>\n            </div>\n          {% else %}\n            <img src=\"{{path_to_this_module}}/library/images/600x600_clear.png\" width=\"600\" height=\"600\" alt=\"Chromatogram Image Unavailable\" />\n            <div class=\"empty-spacer\">&nbsp;</div>\n          {% endif %}\n        </div>\n        <div class=\"chromatogram_image_{{ field.manage }}_1 lightbox hide fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n          <div class='lightbox-header'>\n            <button type=\"button\" class=\"close\" data-dismiss=\"lightbox\" aria-hidden=\"true\">&times;</button>\n          </div>\n          <div class='lightbox-content'>\n            {% if field.chromatogram_images[0] %}\n              <img src=\"{{ field.chromatogram_images[0] }}\" width=\"600\" height=\"600\" alt=\"chromatogram image 1\">\n            {% endif %}\n          </div>\n        </div>\n\n        <div class=\"chromatogram_image_inline_2 span4 image\">\n          {% if field.chromatogram_images[1] %}\n            <a data-toggle=\"lightbox\" href=\".chromatogram_image_{{ field.manage }}_2\"><img src=\"{{ field.chromatogram_images[1] }}\"></a>\n            <div class=\"caption-link\">\n              <i class=\"icon-eye-open\"></i> <a data-toggle=\"lightbox\" href=\".chromatogram_image_{{ field.manage }}_2\">view larger image</a>\n            </div>\n          {% else %}\n            <img src=\"{{path_to_this_module}}/library/images/600x600_clear.png\" width=\"600\" height=\"600\" alt=\"Chromatogram Image Unavailable\" />\n            <div class=\"empty-spacer\">&nbsp;</div>\n          {% endif %}\n        </div>\n        <div class=\"chromatogram_image_{{ field.manage }}_2 lightbox hide fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n          <div class='lightbox-header'>\n            <button type=\"button\" class=\"close\" data-dismiss=\"lightbox\" aria-hidden=\"true\">&times;</button>\n          </div>\n          <div class='lightbox-content'>\n            {% if field.chromatogram_images[1] %}\n              <img src=\"{{ field.chromatogram_images[1] }}\" width=\"600\" height=\"600\" alt=\"chromatogram image 2\">\n            {% endif %}\n          </div>\n        </div>\n\n        <div class=\"chromatogram_image_inline_3 span4 image\">\n          {% if field.chromatogram_images[2] %}\n            <a data-toggle=\"lightbox\" href=\".chromatogram_image_{{ field.manage }}_3\"><img src=\"{{ field.chromatogram_images[2] }}\"></a>\n            <div class=\"caption-link\">\n              <i class=\"icon-eye-open\"></i> <a data-toggle=\"lightbox\" href=\".chromatogram_image_{{ field.manage }}_3\">view larger image</a>\n            </div>\n          {% else %}\n            <img src=\"{{path_to_this_module}}/library/images/600x600_clear.png\" width=\"600\" height=\"600\" alt=\"Chromatogram Image Unavailable\" />\n            <div class=\"empty-spacer\">&nbsp;</div>\n          {% endif %}\n        </div>\n        <div class=\"chromatogram_image_{{ field.manage }}_3 lightbox hide fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n          <div class='lightbox-header'>\n            <button type=\"button\" class=\"close\" data-dismiss=\"lightbox\" aria-hidden=\"true\">&times;</button>\n          </div>\n          <div class='lightbox-content'>\n            {% if field.chromatogram_images[2] %}\n              <img src=\"{{ field.chromatogram_images[2] }}\" width=\"600\" height=\"600\" alt=\"chromatogram image 3\">\n            {% endif %}\n          </div>\n        </div>\n\n      </div>\n\n      \n      {% set crude = false %}\n      {% if field.peptide_standard_purity_types_id == 3 %}\n        {% set crude = false %}\n      {% endif %}\n\n      <h3>Response Curves <i id=\"response_curves_info_icon\" class=\"icon-info-sign\" title=\"More information\" data-placement=\"right\"></i></h3>\n      <p class=\"muted\">Data source: Panorama</p>\n\n      <div class=\"row-fluid plasma-charts\">\n        <div class=\"response_curve_image_linear_inline span4 image\">\n          {% if field.response_curve_images[0] %}\n            <a data-toggle=\"lightbox\" href=\".response_curve_image_linear_{{ field.manage }}\"><img src=\"{{ field.response_curve_images[0] }}\"></a>\n            <div class=\"caption-link\">\n              <i class=\"icon-eye-open\"></i> <a data-toggle=\"lightbox\" href=\".response_curve_image_linear_{{ field.manage }}\">view larger image</a>\n            </div>\n          {% else %}\n            <p>Response Curve Image Unavailable</p>\n          {% endif %}\n        </div>\n        <div class=\"response_curve_image_linear_{{ field.manage }} lightbox hide fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n          <div class='lightbox-header'>\n            <button type=\"button\" class=\"close\" data-dismiss=\"lightbox\" aria-hidden=\"true\">&times;</button>\n          </div>\n          <div class='lightbox-content'>\n            {% if field.response_curve_images[0] %}\n              <img src=\"{{ field.response_curve_images[0] }}\" width=\"800\" height=\"600\" alt=\"response curve image - linear\">\n            {% endif %}\n          </div>\n        </div>\n\n        <div class=\"response_curve_image_log_inline span4 image\">\n          {% if field.response_curve_images[1] %}\n            <a data-toggle=\"lightbox\" href=\".response_curve_image_log_{{ field.manage }}\"><img src=\"{{ field.response_curve_images[1] }}\"></a>\n            <div class=\"caption-link\">\n              <i class=\"icon-eye-open\"></i> <a data-toggle=\"lightbox\" href=\".response_curve_image_log_{{ field.manage }}\">view larger image</a>\n            </div>\n          {% else %}\n            <p>Response Curve Image Unavailable</p>\n          {% endif %}\n        </div>\n        <div class=\"response_curve_image_log_{{ field.manage }} lightbox hide fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n          <div class='lightbox-header'>\n            <button type=\"button\" class=\"close\" data-dismiss=\"lightbox\" aria-hidden=\"true\">&times;</button>\n          </div>\n           <div class='lightbox-content'>\n            {% if field.response_curve_images[1] %}\n              <img src=\"{{ field.response_curve_images[1] }}\" width=\"800\" height=\"600\" alt=\"response curve image - log\">\n            {% endif %}\n          </div>\n        </div>\n\n        <div class=\"response_curve_image_residual_inline span4 image\">\n          {% if field.response_curve_images[2] %}\n            <a data-toggle=\"lightbox\" href=\".response_curve_image_residual_{{ field.manage }}\"><img src=\"{{ field.response_curve_images[2] }}\"></a>\n            <div class=\"caption-link\">\n              <i class=\"icon-eye-open\"></i> <a data-toggle=\"lightbox\" href=\".response_curve_image_residual_{{ field.manage }}\">view larger image</a>\n            </div>\n          {% else %}\n            <p>Response Curve Image Unavailable</p>\n          {% endif %}\n        </div>\n        <div class=\"response_curve_image_residual_{{ field.manage }} lightbox hide fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n          <div class='lightbox-header'>\n            <button type=\"button\" class=\"close\" data-dismiss=\"lightbox\" aria-hidden=\"true\">&times;</button>\n          </div>\n           <div class='lightbox-content'>\n            {% if field.response_curve_images[2] %}\n              <img src=\"{{ field.response_curve_images[2] }}\" width=\"800\" height=\"600\" alt=\"response curve image - residual\">\n            {% endif %}\n          </div>\n        </div>\n\n      </div>\n      \n      <div class=\"row-fluid\">\n\n        <div class=\"span12 {{ field.manage }}_{{ field.laboratory_abbreviation }}_{{ field.manage }} centered repeatability-data-table\">\n          <div class=\"loc_lloq_preloader_loading\">\n            <p>Retrieving Data</p>\n            <img src=\"/site/library/images/indicator-big.gif\" alt=\"Loader\">\n          </div>\n        </div>\n      </div>\n\n      <h3>Repeatability <i id=\"repeatability_info_icon\" class=\"icon-info-sign\" title=\"More information\" data-placement=\"right\"></i></h3>\n      <p class=\"muted\">Data source: Panorama</p>\n\n      <div class=\"row-fluid plasma-charts\">\n        <div class=\"span12 image\">\n          {% if field.validation_sample_image %}\n            <a data-toggle=\"lightbox\" href=\".validation_sample_image_{{ field.manage }}\"><img src=\"{{ field.validation_sample_image }}\"></a>\n            <div class=\"caption-link\">\n              <i class=\"icon-eye-open\"></i> <a data-toggle=\"lightbox\" href=\".validation_sample_image_{{ field.manage }}\">view larger image</a>\n            </div>\n          {% else %}\n            <p>Repeatability Image Unavailable</p>\n          {% endif %}\n        </div>\n        <div class=\"validation_sample_image_{{ field.manage }} lightbox hide fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n          <div class='lightbox-header'>\n            <button type=\"button\" class=\"close\" data-dismiss=\"lightbox\" aria-hidden=\"true\">&times;</button>\n          </div>\n          <div class='lightbox-content'>\n            {% if field.validation_sample_image %}\n              <img src=\"{{ field.validation_sample_image }}\" width=\"1200\" height=\"400\" alt=\"validation sample image\">\n            {% endif %}\n          </div>\n        </div>\n      </div>\n\n  \n\n      {% if field.validation_sample_images_data[field.manage] %}\n        <div class=\"row-fluid\">\n          <div class=\"span12\">\n            <table class=\"table table-bordered table-striped table-condensed text-centered repeatability-table\" id=\"{{ field.manage }}_validation_sample_data_{{ field.manage }}\">\n              <tbody>\n                <tr>\n                  <th>&nbsp;</th>\n                  <th colspan=\"3\">Average intra-assay CV<br><span class=\"un-bold\">(within day CV)</span></th>\n                  <th colspan=\"3\">Average inter-assay CV<br><span class=\"un-bold\">(between day CV)</span></th>\n                  <th colspan=\"3\">Total CV<br><img src=\"{{ path_to_this_module }}/library/images/equation.png\" width=\"118\" height=\"13\" alt=\"equation\"></th>\n                  <th colspan=\"3\">n=</th>\n                </tr>\n                <tr>\n                  <td><strong>Fragment ion / Transition</strong></td>\n                  <td><strong>Low</strong></td>\n                  <td><strong>Med</strong></td>\n                  <td><strong>High</strong></td>\n                  <td><strong>Low</strong></td>\n                  <td><strong>Med</strong></td>\n                  <td><strong>High</strong></td>\n                  <td><strong>Low</strong></td>\n                  <td><strong>Med</strong></td>\n                  <td><strong>High</strong></td>\n                  <td><strong>Low</strong></td>\n                  <td><strong>Med</strong></td>\n                  <td><strong>High</strong></td>\n                </tr>\n                {% for key, val in field.validation_sample_images_data[field.manage] %}\n                  <tr>\n                    <td>{{ val.fragment_ion | raw }}</td>\n                    <td>{{ val.low_intra_CV | raw }}</td>\n                    <td>{{ val.med_intra_CV | raw }}</td>\n                    <td>{{ val.high_intra_CV | raw }}</td>\n                    <td>{{ val.low_inter_CV | raw }}</td>\n                    <td>{{ val.med_inter_CV | raw }}</td>\n                    <td>{{ val.high_inter_CV | raw }}</td>\n                    <td>{{ val.low_total_CV | raw }}</td>\n                    <td>{{ val.med_total_CV | raw }}</td>\n                    <td>{{ val.high_total_CV | raw}}</td>\n                    <td>{{ val.low_count | raw }}</td>\n                    <td>{{ val.med_count | raw }}</td>\n                    <td>{{ val.high_count | raw }}</td>\n                  </tr>\n                {% endfor %}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      {% endif %}\n      \n      <h3 class=\"resources-and-comments\">Additional Resources and Comments</h3>\n\n      <div class=\"row-fluid\">\n        <div class=\"span4 links-container\">\n          <dt><i class=\"icon-info-sign\"></i> Resources</dt>\n          <dl><a href=\"#sops_{{ field.manage }}\" role=\"button\" class=\"btn btn-small\" data-toggle=\"modal\" title=\"Download SOPs\"><i class=\"icon-download-alt icon-white\"></i> Download SOPs</a></dl>\n          {% if field.panorama_peptide_url %}\n            <dl><a href=\"https://panoramaweb.org{{ field.panorama_peptide_url }}\" class=\"btn btn-small\" target=\"_blank\" title=\"View in Panorama\"><i class=\"icon-eye-open icon-white\"></i> View Peptide in Panorama</a></dl>\n          {% endif %}\n          {% if field.panorama_protein_url %}\n            <dl><a href=\"https://panoramaweb.org{{ field.panorama_protein_url }}\" class=\"btn btn-small\" target=\"_blank\" title=\"View in Panorama\"><i class=\"icon-eye-open icon-white\"></i> View Protein in Panorama</a></dl>\n          {% endif %}\n\n          {% if field.cptc_catalog_id %}\n            <dl><a href=\"http://antibodies.cancer.gov/apps/site/detail/{{ field.cptc_catalog_id }}\" class=\"btn btn-small\" target=\"_blank\" title=\"View {{ field.cptc_catalog_id }} in CPTC Antibody Portal\"><i class=\"icon-eye-open icon-white\"></i> View in CPTC Antibody Portal</a></dl>\n          {% endif %}\n\n          {% if field.assay_identifier %}\n            <dl><a href=\"http://antibodies.cancer.gov/apps/site/detail/{{ field.assay_identifier }}#{{ field.assay_identifier }}\" class=\"btn btn-small\" target=\"_blank\" title=\"View Antibody\"><i class=\"icon-eye-open icon-white\"></i> View Antibody</a></dl>\n          {% endif %}\n          {% if field.peptide_order %}\n            <dl><a href=\"javascript:void(0);\" class=\"btn btn-small\" title=\"Generate Peptide Order\"><i class=\"icon-cog icon-white\"></i> Generate Peptide Order</a></dl>\n          {% endif %}\n        </div>\n        <div class=\"span8 comments-container\">\n          <h5 id=\"comments_container_{{ field.manage }}\"><i class=\"icon-star\"></i> Comments</h5>\n          <noscript>\n            Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a>\n          </noscript>\n        </div>\n\n      </div>\n\n    </div>\n\n    <!-- SOPs -->\n    <div id=\"sops_{{ field.manage }}\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"SOPDownloads\" aria-hidden=\"true\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n        <h4 id=\"SOPDownloads\"><i class=\"icon-download-alt\"></i> Download SOPs</h4>\n      </div>\n      <div class=\"modal-body sop-downloads\">\n        <ul>\n          {% for sop_key, sop_field in field.sop_files %}\n            <li><i class=\"icon-download-alt\"></i> <a href=\"{{ path_to_this_module }}/download_file?sop_files_id={{ sop_field.sop_files_id }}\">{{ sop_field.file_name }}</a></li>\n          {% endfor %}\n        </ul>\n      </div>\n      <div class=\"modal-footer\">\n        <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</button>\n      </div>\n    </div>\n\n\n  {% endfor %}\n\n  <hr class=\"black\">\n\n  </div>\n\n  <!-- IE Browser Disclaimer -->\n  <div id=\"ie_disclaimer\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"ieModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-header\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n      <h3 id=\"ieModalLabel\"><i class=\"icon-exclamation-sign\"></i> Internet Explorer Disclaimer</h3>\n    </div>\n    <div class=\"modal-body\">\n      <div class=\"control-group\">\n        <p>We've detected you are running an older version of Microsoft's Internet Explorer. While the majority of this website's content renders well, there may several items which may not.</p>\n        <p>If you want the full experience of this site, we recommend using the latest version of any modern browser. You can find a complete listing at <a title=\"Browse Happy: Online. Worry-free. Upgrade your browser today!\" href=\"http://www.browsehappy.com/\" target=\"_blank\">BrowseHappy.com</a>.</p>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</button>\n    </div>\n  </div>\n\n  <!-- Response Curves Information -->\n  <div id=\"response_curves_information\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"rcModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-header\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n      <h3 id=\"ieModalLabel\">Response Curves Information</h3>\n    </div>\n    <div class=\"modal-body\">\n      <div class=\"control-group\">\n        <p>Multipoint serial dilution of analyte in a sample matrix. Curve parameters are presented for each transition/fragment measured and the sum of all fragments. For more details, please see the Assay Characterization Guidance Document and the assay SOPs.</p>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</button>\n    </div>\n  </div>\n\n  <!-- Repeatability Information -->\n  <div id=\"repeatability_information\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"rpModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-header\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n      <h3 id=\"ieModalLabel\">Repeatability Information</h3>\n    </div>\n    <div class=\"modal-body\">\n      <div class=\"control-group\">\n        <p>To approximate variability, samples are prepared at three known concentrations in sample matrix and run over five days. CV is calculated for intra-assay and inter-assay performance. The total CV is the square root of the sum of squares of intra- and inter-assay CVs (sqrt[intraCV2+interCV2]). CVs are presented for each transition/fragment measured and the sum of all fragments.</p>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</button>\n    </div>\n  </div>\n\n\n{% endblock %}\n{% block js_head %}\n  {{ parent() }}\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n  <!--[if lt IE 9]>\n  <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/aight/1.1.1/aight.min.js\"></script>\n  <script type=\"text/javascript\" src=\"{{ path_to_this_module }}/library/flashcanvas/bin/flashcanvas.js\"></script>\n  <![endif]-->\n{% endblock %}\n{% block js_bottom %}\n  {{ parent() }}\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/flot/0.8.1/jquery.flot.min.js\"></script>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/bootstrap-lightbox/0.5/bootstrap-lightbox.min.js\"></script>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/flot/0.8.1/jquery.flot.resize.min.js\"></script>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/flot/0.8.1/jquery.flot.navigate.min.js\"></script>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/flot/0.8.1/jquery.flot.symbol.min.js\"></script>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/history.js/1.8/bundled/html4+html5/jquery.history.min.js\"></script>\n  \n  <script type=\"text/javascript\">\n\n\n\n\n      // Script from:\n      // http://mystrd.at/articles/multiple-disqus-threads-on-one-page/\n      var disqus_shortname = '{{ disqus_shortname }}';\n      var disqus_identifier;\n      var disqus_url = 'http://{{ server_name }}{{ request_uri }}';\n      var disqus_developer = '1';\n      var disqus_title;\n\n      function loadDisqus(source, identifier, url) {\n\n        if (window.DISQUS) {\n\n          jQuery('#disqus_thread').insertAfter(source); // Append the HTML after the target 'source'\n\n          // If Disqus exists, call it's reset method with new parameters\n          DISQUS.reset({\n            reload: true,\n            config: function () {\n              this.page.identifier = identifier;\n              this.page.url = url;\n              this.page.title = 'Gene: {{ gene }}, Peptide Sequence: '+identifier+' - {{ site_name }}';\n            }\n          });\n\n        } else {\n\n          // Append the HTML after the target 'source'\n          jQuery('<div id=\"disqus_thread\"></div>').insertAfter(source);\n          disqus_identifier = identifier; //set the identifier argument\n          disqus_url = url; //set the url argument\n          disqus_title = 'Gene: {{ gene }}, Peptide Sequence: '+identifier+' - {{ site_name }}';\n\n          // Append the Disqus embed script to HTML\n          var dsq = document.createElement('script');\n          dsq.type = 'text/javascript';\n          dsq.async = true;\n          dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n          // jQuery('head').append(dsq);\n\n        }\n      };\n  </script>\n\n  <script type=\"text/javascript\">\n  $(document).ready(function() {\n\n\n\n    // [BEGIN] Miscellaneous ///////////////\n\n\n    // IE Disclaimer\n    var show_disclaimer = '{{ show_disclaimer }}';\n    if(show_disclaimer) {\n      $('#ie_disclaimer').modal();\n    }\n    // Remove the side nav link\n    $('#show_side_nav').remove();\n    // Tooltips\n    $('.assay-nav-btn').tooltip();   \n\n\n    $('.icon-question-sign').tooltip();\n    // Prevent page from scrolling in the background\n    $(\"body\").on(\"click\", \".view_protein_sequence, .submit_comment\", function(event) {\n      $('body').attr('style','overflow: hidden');\n    });\n    // Hide/show the Graphs and Visualizations block\n    $(\".collapse-button a\").on(\"click\", function() {\n      var icon_class = ($(\"#graphs\").is(\":visible\")) ? \"icon-expand-alt\" : \"icon-collapse-alt\";\n      var icon_text = ($(\"#graphs\").is(\":visible\")) ? \"Expand protein map\" : \"Collapse protein map\";\n      $('#graphs').slideToggle();\n      $('.row-fluid .span12 .collapse-button a i').attr( 'class', icon_class );\n      $('.row-fluid .span12 .collapse-button a span.toggle-text').html( icon_text );\n    });\n    // Hide/show the Assay Details\n    $(\"#collapse-button-assay-details a\").on(\"click\", function() {\n      var icon_class = ($(\".assay-details-wrapper #assay_details\").is(\":visible\")) ? \"icon-expand-alt\" : \"icon-collapse-alt\";\n      var icon_text = ($(\".assay-details-wrapper #assay_details\").is(\":visible\")) ? \"Expand assay details\" : \"Collapse assay details\";\n      $('.assay-details-wrapper #assay_details').slideToggle();\n      $('#collapse-button-assay-details a i').attr( 'class', icon_class );\n      $('#collapse-button-assay-details span.toggle-text').html( icon_text );\n    });\n    // Hide/show the Assay Parameters\n    $(\"#collapse-button-assay-parameters a\").on(\"click\", function() {\n      var icon_class = ($(\".assay-details-wrapper #assay_parameters\").is(\":visible\")) ? \"icon-expand-alt\" : \"icon-collapse-alt\";\n      var icon_text = ($(\".assay-details-wrapper #assay_parameters\").is(\":visible\")) ? \"Expand assay parameters\" : \"Collapse assay parameters\";\n      $('.assay-details-wrapper #assay_parameters').slideToggle();\n      $('#collapse-button-assay-parameters a i').attr( 'class', icon_class );\n      $('#collapse-button-assay-parameters span.toggle-text').html( icon_text );\n    });\n    // Response Curves Info Modal\n    $('#response_curves_info_icon').tooltip().on('click', function(){\n      $('#response_curves_information').modal('show');\n    });\n    // Repeatability Info Modal\n    $('#repeatability_info_icon').tooltip().on('click', function(){\n      $('#repeatability_information').modal('show');\n    });\n\n    // [END] Miscellaneous ///////////////\n\n    var all_in_one_data = [];\n    var last_isoforms_x_plot = 4;\n    var full_sequence = '{{ uniprot_api.sequence_raw }}';\n    var sequence_max = '{{ uniprot_api.sequence_length }}';\n    var uniprot_id = '{{ uniprot_api.uniprot_ac }}';\n\n\n\n\n\n\n    // Get peptide sequences ///////////////\n  \n    var genes_data = JSON.parse('{{ gene_peptide_sequence|json_encode|raw }}');\n    // Get plots table data ///////////////\n\n    $.each(genes_data, function(index, single_gene_data) {\n      var peptide_sequence_array = [];\n      peptide_sequence_array.push( {\n        peptide_sequence: single_gene_data.peptide_sequence\n        ,peptide_modified_sequence: single_gene_data.peptide_modified_sequence\n        ,laboratory_abbreviation: single_gene_data.laboratory_abbreviation\n        ,celllysate_path: single_gene_data.celllysate_path\n        ,laboratory_id: single_gene_data.laboratories_id\n        ,import_log_id: single_gene_data.import_log_id\n        ,peptide_standard_purity_types_id: single_gene_data.peptide_standard_purity_types_id\n        ,library: 'ResponseCurve'\n        ,manage_id: single_gene_data.manage_id\n      } );\n\n      get_plots_table_data(peptide_sequence_array);\n    });\n\n\n    // [BEGIN] SNPs Graph ///////////////\n    var snps_data = JSON.parse('{{ uniprot_api.snps|json_encode|raw }}');\n    var snps_data_length = snps_data ? snps_data.length : 0;\n\n    if(snps_data) {\n      var points = { show: true, radius: 3 };\n      var lines = { show: true, lineWidth: 4 };\n      var color = '#EC0000';\n\n      $.each(snps_data, function(index, snp_data) {\n\n        var snp_position = parseInt(snp_data.position);\n        var snp_note = snp_data.original+' &rarr; '+snp_data.variation;\n\n        // For all-in-one chart build\n        all_in_one_data.push( {\n          points: points\n          ,lines: lines\n          ,shadowSize: 0\n          ,color: color\n          ,data: [ [snp_position, 5, snp_position+': '+snp_note, 'snp'],\n                    [snp_position, 5, snp_position+': '+snp_note, 'snp'] ]\n        } );\n\n      });\n\n    }\n    // [END] SNPs Graph ///////////////\n\n    \n\n    // [BEGIN] Isoforms Graph ///////////////\n    var isoforms_data = JSON.parse('{{ uniprot_api.isoforms|json_encode|raw }}');\n    var isoforms_data_length = isoforms_data ? isoforms_data.length : 0;\n\n    if(isoforms_data_length > 0) {\n\n      var points = { show: true, radius: 2 };\n      var lines = { show: true, lineWidth: 2 };\n      var color = '#EDC240';\n\n      $.each(isoforms_data, function(index, isoform_data) {\n\n        last_isoforms_x_plot = (index+7);\n\n        // sequence_max is the length of the sequence\n        var data_sequence_max = sequence_max;\n        var note = (isoform_data.note !== undefined) ? ' - '+isoform_data.note : '';\n\n        // Determine the position of the first character in the sequence\n        var data_sequence_start = full_sequence.search(isoform_data.sequence);\n        // If the search() retuns -1, set the sequence start at 0\n        if(data_sequence_start == -1) {\n          data_sequence_start = 0;\n          data_sequence_max = isoform_data.sequence_length;\n        }\n\n        // For all-in-one chart build\n        all_in_one_data.push( {\n          points: points\n          ,lines: lines\n          ,shadowSize: 0\n          ,color: color\n          ,data: [ [data_sequence_start, (index+7), data_sequence_start+note, isoform_data.id, 'isoform'], [data_sequence_max, (index+7), data_sequence_max, isoform_data.id, 'isoform'] ]\n        } );\n      });\n    }\n    // [END] Isoforms Graph ///////////////\n\n    // [BEGIN] Splice Junctions Graph ///////////////\n    var splice_junctions_graph = $(\"#splice_junctions_graph\");\n    var splice_junctions_data = JSON.parse('{{ uniprot_api.splice_junctions|json_encode|raw }}');\n    var splice_junctions_data_length = splice_junctions_data ? splice_junctions_data.length : 0;\n    var last_x_plot = 0;\n\n    if(splice_junctions_data) {\n\n      var all_splice_junction_data = [];\n      var points = { show: true, radius: 2 };\n      var lines = { show: true, lineWidth: 2 };\n      var color = 'green';\n\n      $.each(splice_junctions_data, function(index, splice_junction_data) {\n\n        last_x_plot = (last_isoforms_x_plot+index+1);\n\n        // sequence_max is the length of the sequence\n        var data_sequence_max = sequence_max;\n        var splice_junction_note = (splice_junction_data.type !== undefined) ? ' - '+splice_junction_data.description+' '+splice_junction_data.type : '';\n\n        // For splice junctions chart build\n        all_in_one_data.push( {\n          points: points\n          ,lines: lines\n          ,shadowSize: 0\n          ,color: color\n          ,data: [ [splice_junction_data.start, ((last_isoforms_x_plot+index)+1), splice_junction_data.start+splice_junction_note, 'splice_junction'], [splice_junction_data.stop, ((last_isoforms_x_plot+index)+1), splice_junction_data.stop+splice_junction_note, 'splice_junction'] ]\n        } );\n      });\n    }\n\n    // [END] Splice Junctions Graph ///////////////\n\n    // [BEGIN] MRM Assays Graph ///////////////\n    // Set up the peptide data for the data points\n    var points = { show: false };\n    var lines = { show: true, lineWidth: 3 };\n    var color = '#0066cc';\n    var mrms_data = JSON.parse('{{ sequence_labs_array|json_encode|raw }}');    \n    var mrms_data_length = 0;\n    var count = 0;\n\n    var sequence_groups = mrms_data.total_sequences;\n    var new_index = 1;\n\n    $.each(mrms_data, function(index, mrm_data)\n    {\n      mrms_data_length = count++;\n      $.each(mrm_data, function(single_index, single_mrm_data)\n      {\n        // For all-in-one chart build   \n        // new_index = (new_index > 3) ? 1.5 : new_index;\n\n        if(sequence_groups > 1)\n        {\n          if(new_index >= (sequence_groups+1) )\n          {\n            new_index = 1;\n            mrms_data_length = 0;\n          } else {\n            new_index = new_index+1;\n          }\n        } else {\n          new_index = single_index;\n        }\n        \n        all_in_one_data.push({\n          points: points\n          ,lines: lines\n          ,color: color\n          ,shadowSize: 0\n          ,data: [\n             [single_mrm_data.peptide_start, (new_index), single_mrm_data.peptide_sequence+' ('+single_mrm_data.submitting_laboratory+')', single_mrm_data.peptide_sequence, 'mrm_assay', single_mrm_data.protein_id]\n            ,[single_mrm_data.peptide_end, (new_index), single_mrm_data.peptide_sequence+' ('+single_mrm_data.submitting_laboratory+')', single_mrm_data.peptide_sequence, 'mrm_assay', single_mrm_data.protein_id]\n          ]\n        });\n      });\n    });\n\n    // [END] MRM Assays Graph ///////////////\n   \n\n    var all_in_one_graph = $(\"#all_in_one_graph\");\n    var all_in_one_graph_max = ( (mrms_data_length*2)+(isoforms_data_length+splice_junctions_data_length)+6 );\n\n    // Plot all data\n    var all_in_one_plot = $.plot(all_in_one_graph, all_in_one_data, {\n      yaxis: { show: false, min: 0, max: all_in_one_graph_max, panRange: [0, all_in_one_graph_max] }, // \n      xaxis: { show: true, min: 0, max: sequence_max, tickSize: 100, panRange: [0, sequence_max] }, // \n      grid: {\n        show: true,\n        hoverable: true,\n        clickable: true,\n        borderWidth: { top: 0, right: 0, bottom: 1, left: 0 },\n        color: '#999'\n      },\n      zoom: { interactive: true },\n      pan: { interactive: true }\n    });\n\n    // Chart Legend\n    all_in_one_graph.append('<div class=\"chart-legend sequence-domains-chart-legend\" title=\"Click to go to data source (Uniprot)\"></div>');\n    all_in_one_graph.append('<div class=\"chart-legend-text sequence-domains-chart-legend-text\" title=\"Click to go to data source (Uniprot)\">Sequence Domains</div>');\n    all_in_one_graph.append('<div class=\"chart-legend isoforms-chart-legend\" title=\"Click to go to data source (Uniprot)\"></div>');\n    all_in_one_graph.append('<div class=\"chart-legend-text isoforms-chart-legend-text\" title=\"Click to go to data source (Uniprot)\">Isoforms</div>');\n    all_in_one_graph.append('<div class=\"chart-legend snps-chart-legend\" title=\"Click to go to data source (Uniprot)\"></div>');\n    all_in_one_graph.append('<div class=\"chart-legend-text snps-chart-legend-text\" title=\"Click to go to data source (Uniprot)\">SNPs</div>');\n    all_in_one_graph.append('<div class=\"chart-legend mrm-assays-chart-legend\"></div>');\n    all_in_one_graph.append('<div class=\"chart-legend-text mrm-assays-chart-legend-text\">Targeted MS Assays</div>');\n\n    // Chart legend links\n    $('.sequence-domains-chart-legend, .sequence-domains-chart-legend-text').on('click', function(event) {\n      var url_sequence_domains = 'http://www.uniprot.org/uniprot/'+uniprot_id+'#section_features';\n      window.open(url_sequence_domains, '_blank');\n    });\n    $('.isoforms-chart-legend, .isoforms-chart-legend-text').on('click', function(event) {\n      var url_isoforms = 'http://www.uniprot.org/uniprot/'+uniprot_id+'#'+uniprot_id+'-1';\n      window.open(url_isoforms, '_blank');\n    });\n    $('.snps-chart-legend, .snps-chart-legend-text').on('click', function(event) {\n      var url_snps = 'http://www.uniprot.org/uniprot/'+uniprot_id+'';\n      window.open(url_isoforms, '_blank');\n    });\n\n    ///////////////////////////////////////////////////////////\n\n    // Set the height of the chart\n    var graph_height = ( (last_x_plot*30) != 0 ) ? (last_x_plot*30) : 300;\n    $(all_in_one_graph).css('height', graph_height); // (all_in_one_data.length * 11)\n\n    // Add the zoom in button\n    $(\"<div class='button' style='right:90px;top:0px'>zoom in</div>\")\n      .appendTo(all_in_one_graph)\n      .click(function (event) {\n        event.preventDefault();\n        all_in_one_plot.zoom();\n    });\n\n    // Add the zoom out button\n    $(\"<div class='button' style='right:20px;top:0px'>zoom out</div>\")\n      .appendTo(all_in_one_graph)\n      .click(function (event) {\n        event.preventDefault();\n        all_in_one_plot.zoomOut();\n    });\n\n    // Helper for taking the repetitive work out of placing panning arrows\n    function addArrow(dir, right, top, offset) {\n      $(\"<img class='button' src='{{ path_to_this_module }}/library/images/arrow-\" + dir + \".gif' style='right:\" + right + \"px;top:\" + top + \"px'>\")\n        .appendTo(all_in_one_graph)\n        .click(function (e) {\n          e.preventDefault();\n          all_in_one_plot.pan(offset);\n      });\n    }\n    addArrow(\"left\", 55, 40, { left: -100 });\n    addArrow(\"right\", 25, 40, { left: 100 });\n    addArrow(\"up\", 40, 25, { top: -100 });\n    addArrow(\"down\", 40, 55, { top: 100 });\n\n    // Disable the mouse wheel functionality for panning and zooming\n    $('#all_in_one_graph canvas.flot-overlay').unmousewheel();\n\n    $(all_in_one_graph).bind(\"plotclick\", function (event, pos, item) {\n      // Splice Junctions\n      // http://www.uniprot.org/uniprot/P04626#section_features\n      if( (item != null) && (item.series.data[0][3] != null) && (item.series.data[0][3] == 'splice_junction') ) {\n        var url = 'http://www.uniprot.org/uniprot/'+uniprot_id+'#section_features';\n        window.open(url, '_blank');\n      }\n      // Isoforms\n      if( (item != null) && (item.series.data[0][4] != null) && (item.series.data[0][4] == 'isoform') ) {\n        var url = 'http://www.uniprot.org/uniprot/'+item.series.data[item.dataIndex][3];\n        window.open(url, '_blank');\n      }\n      // SNPs\n      if( (item != null) && (item.series.data[0][3] != null) && (item.series.data[0][3] == 'snp') ) {\n        var url = 'http://www.uniprot.org/blast/?about='+uniprot_id+'['+item.datapoint[0]+']';\n        window.open(url, '_blank');\n      }\n      // MRM Assays\n      if( (item != null) && (item.series.data[0][4] != null) && (item.series.data[0][4] == 'mrm_assay') ) {\n\n        var this_peptide_sequence = item.series.data[item.dataIndex][3];\n        var this_protein_id = item.series.data[item.dataIndex][5];\n        var div_id = '.'+this_protein_id;\n        // Change our States (URL, title in title bar)\n        History.replaceState({state:1}, \"{{ gene }}, CPTAC-\"+this_protein_id+\" - CPTAC Assay Portal\", \"CPTAC-\"+this_protein_id);\n        // Scroll to assays area\n        scrollToAnchor('assay_details_anchor');\n        $('.assay-details-wrapper').hide();\n        $('#preloader_loading_assay_details').fadeIn(500);\n        $('#preloader_loading_assay_details').hide();\n        $(div_id).fadeIn(300);\n        // Load Disqus commenting\n        loadDisqus($('#comments_container_'+this_protein_id), this_peptide_sequence, 'http://{{ server_name }}{{ request_uri }}/#!'+this_peptide_sequence);\n      }\n\n    });\n\n    ///////////////////////////////////////////////////////////\n   \n    // [BEGIN] Highlighted Peptide Sequence Links ///////////////\n    // Use sequence values from the 'genes_distinct' array\n    var mouseY;\n    var mouseX;\n    $(document).mousemove( function(e) {\n           mouseX = e.pageX; \n           mouseY = e.pageY;\n    }); \n\n    var starts = JSON.parse('{{ distinct_gene_peptide_sequence|json_encode|raw }}');\n    var last_clicked = false;\n    $.each(starts, function(index, starts_data) {\n      // On click event for peptide sequence links in the gene sequence\n      var this_peptide_sequence = starts_data.peptide_sequence;\n      var this_protein_id = starts_data.manage;\n      var div_id = '.'+this_protein_id;\n\n      var clickable_class = 'seq-'+this_peptide_sequence;\n\n      $('.'+clickable_class).on('click',function()\n      { \n        \n        $(\"rect, line, .close\").tooltip();\n\n        if(last_clicked != this_peptide_sequence){\n          $('.detail-modal').attr('style','display: none');\n          last_clicked = false;\n        }\n\n        var div_height = $('.all-details-'+this_peptide_sequence).height();\n        var offset = (div_height > 25) ? 450 : 390;\n        $('.all-details-'+this_peptide_sequence).css({ 'top':mouseY-offset }).fadeIn('fast');\n      \n        $('.detail-modal .close').on('click',function(){        \n          $('.detail-modal').fadeOut('fast');       \n        });\n      });\n\n      var detail_link_class = this_peptide_sequence+'-'+this_protein_id;      \n      $('.protein-sequence').on('click', '.'+detail_link_class, function() {\n\n          // close the pop up\n          $('.detail-modal').fadeOut('fast');\n\n          // Change our States (URL, title in title bar)\n          History.replaceState({state:1}, \"{{ gene }}, CPTAC-\"+this_protein_id+\" - CPTAC Assay Portal\", \"CPTAC-\"+this_protein_id);\n          // Scroll to assays area\n          scrollToAnchor('assay_details_anchor');\n          $('.assay-details-wrapper').hide();\n          $('#preloader_loading_assay_details').fadeIn(500);\n          $('#preloader_loading_assay_details').hide();\n          $(div_id).fadeIn(300);\n\n          // Load Disqus commenting\n          loadDisqus($('#comments_container_'+this_protein_id), this_peptide_sequence, 'http://{{ server_name }}{{ request_uri }}/#!'+this_peptide_sequence);\n      });\n    });  \n\n       \n    // $(\"rect, line, .peptide_highlight\").tooltip({\n    //   'container': 'body',\n    //   'placement': 'top'\n    // });\n\n\n    // [END] Highlighted Peptide Sequence Links ///////////////\n         \n\n    // Tooltips on hover of data points\n    var previousPoint = null;\n    $(all_in_one_graph).bind(\"plothover\", function (event, pos, item) {\n      if(item) {\n        document.body.style.cursor = 'pointer';\n        if(previousPoint != item.dataIndex) {\n          previousPoint = item.dataIndex;\n          $(\"#tooltip\").remove();\n          showTooltip(item.pageX, item.pageY, item.series.data[item.dataIndex][2]);\n        }\n      } else {\n        document.body.style.cursor = 'default';\n        $(\"#tooltip\").remove();\n        previousPoint = null;\n      }\n    });\n\n    // Pop-out entire sequence\n    $('div.sequence').on('mouseenter', '.protein-sequence', function(event) {\n      $(this).attr('style','overflow: visible;');\n      $('table.sequence').addClass('sequence_table_shadow');\n    });\n    $('div.sequence').on('mouseleave', '.protein-sequence', function(event) {\n      $(this).attr('style','overflow: hidden;');\n      $('table.sequence').removeClass('sequence_table_shadow');\n      $('.detail-modal').attr('style','display: none');\n    });\n\n    // Tooltips\n    $('.span4 img, .chart-legend, .chart-legend-text').tooltip();\n\n \n\n    // Show the Assay details for the page id we're on\n    var details_div_id = $('#outer-wrapper .{{ manage }}');\n    $(details_div_id).show();\n    loadDisqus($('#comments_container_{{ manage }}'), '{{ peptide_sequence }}', 'http://{{ server_name }}{{ request_uri }}/#!{{ peptide_sequence }}');\n\n    // History.js\n    (function(window,undefined){\n      // Bind to StateChange Event\n      History.Adapter.bind(window,'statechange',function(){ // Note: We are using statechange instead of popstate\n          var State = History.getState(); // Note: We are using History.getState() instead of event.state\n      });\n    })(window);\n\n  });\n\n  // FUNCTIONS ///////////////\n\n  function scrollToAnchor(aid) {\n    var aTag = $(\"a[name='\"+ aid +\"']\");\n    $('html,body').animate( {scrollTop: aTag.offset().top}, 'slow' );\n  }\n\n  function showTooltip(x, y, contents) {\n    $(\"<div id='tooltip'>\" + contents + \"</div>\").css({\n      position: \"absolute\",\n      display: \"none\",\n      top: y-28,\n      left: x+8,\n      border: \"1px solid #000\",\n      padding: \"4px\",\n      \"background-color\": \"#000\",\n      opacity: 0.80,\n      color: \"#fff\"\n    }).appendTo(\"body\").fadeIn(200);\n  }\n\n\n  function get_plots_table_data(genes) {\n\n\n\n\n    // If we're using an element repededly, let's create variables\n    var response_curve_message = '<p>Table data unavailable</p>';\n    // Display the preloaders\n    $.each(genes, function(index, gene) {\n      $('div.span12.'+gene.peptide_sequence+'_'+gene.laboratory_abbreviation+' .loc_lloq_preloader_loading').show();\n    });\n\n    // Send the request via AJAX\n    $.ajax({\n      url:\"{{ path_to_this_module }}/get_plots_table_data\"\n      ,dataType:\"json\"\n      ,type:\"post\"\n      ,data: { genes: JSON.stringify(genes) }\n      ,success:function(data) {\n        if (data) {\n          $.each(data, function(index, single_gene_data) {\n\n            /*\n             * Build out the LOC/LOQ data table\n             */\n\n            if(single_gene_data.lod_loq_comparison_data[0].length) {\n\n              var crude = (single_gene_data.peptide_standard_purity_types_id == 3) ? true : false;\n              var peptide_sequence = single_gene_data.lod_loq_comparison_data[0][0].peptide;              \n              var lod_loq_units = single_gene_data.lod_loq_comparison_data[0][0].lod_loq_units;              \n              var crude_style = (crude) ? 'class=\"crude-header\"' : '';   \n              var lod_loq_units_note = (crude) ? '<br /><small><span '+crude_style+'>Estimated based on crude peptide concentration</span></small>' : '';              \n\n              // Strip brackets from the modified peptide sequence.\n              var peptide_sequence_stripped = peptide_sequence.replace(/[\\[\\+\\d+\\]]/g,'');\n              var table = $('<table/>').addClass('table table-bordered table-striped table-condensed').attr('id',single_gene_data.manage_id+'_loc_loq');                   \n              \n              var table_header_row = $('<tr />');\n              var table_headers = $('<th colspan=\"2\">&nbsp;</th><th colspan=\"3\">LOD ('+lod_loq_units+')'+lod_loq_units_note+'</th><th class=\"lloq_header\" colspan=\"3\">LLOQ ('+lod_loq_units+')'+lod_loq_units_note+'</th>');\n              \n              table_header_row.append(table_headers);\n              table.append(table_header_row);\n\n              var table_top_row = $(\"<tr/>\");\n              var labels = [\n                \"Peptide\"\n                ,\"Transition\"\n                ,\"blank only\"\n                ,\"blank+low-conc\"\n                ,\"rsd limit\"\n                ,\"blank only\"\n                ,\"blank+low-conc\"\n                ,\"rsd limit\"\n              ];\n              // Stitch together the table headers row\n              $.each(labels, function(index, label) {\n                table_top_row.append('<td><strong>'+label+'</strong></td>');\n              });\n\n              table.append(table_top_row);\n\n              $.each(single_gene_data.lod_loq_comparison_data, function(index, single_data) {\n\n                var lod_loq_rowspan = single_data.length;\n\n                $.each(single_data, function(idx, single) {\n\n                  var transition_id = (single.transition_id == '.Sum.tr.') ? 'Sum' : single.transition_id;\n                  var table_row = $(\"<tr/>\");\n                  table.append(table_row);\n\n                  var a = (single.blank_only_LOD != 'NA') \n                    ? Number(single.blank_only_LOD).toExponential(1) \n                    : single.blank_only_LOD;\n                  var b = (single.blank_low_conc_LOD != 'NA') \n                    ? Number(single.blank_low_conc_LOD).toExponential(1) \n                    : single.blank_low_conc_LOD;\n                  var c = (single.rsd_limit_LOD != 'NA') \n                    ? Number(single.rsd_limit_LOD).toExponential(1) \n                    : single.rsd_limit_LOD;\n                  var d = (single.blank_only_LOQ != 'NA') \n                    ? Number(single.blank_only_LOQ).toExponential(1) \n                    : single.blank_only_LOQ;\n                  var e = (single.blank_low_conc_LOQ != 'NA') \n                    ? Number(single.blank_low_conc_LOQ).toExponential(1) \n                    : single.blank_low_conc_LOQ;\n                  var f = (single.rsd_limit_LOQ != 'NA') \n                    ? Number(single.rsd_limit_LOQ).toExponential(1) \n                    : single.rsd_limit_LOQ;\n\n\n\n                  var peptide_sequence_label = (index == 0) ? peptide_sequence : '';\n\n                  if(idx == 0) {\n                    table_row.append('<td rowspan=\"'+lod_loq_rowspan+'\">'+peptide_sequence_label+'</td>');\n                  }\n                  table_row.append('<td>'+transition_id+'</td>');\n                  table_row.append('<td>'+a+'</td>');\n                  table_row.append('<td>'+b+'</td>');\n                  table_row.append('<td>'+c+'</td>');\n                  table_row.append('<td>'+d+'</td>');\n                  table_row.append('<td>'+e+'</td>');\n                  table_row.append('<td>'+f+'</td>');\n\n\n\n                });\n              });\n\n              // Remove preloader\n              $('div.span12.'+single_gene_data.manage_id+'_'+single_gene_data.laboratory_abbreviation+'_'+single_gene_data.manage_id+' .loc_lloq_preloader_loading').remove();\n              // Load the table\n              $('div.span12.'+single_gene_data.manage_id+'_'+single_gene_data.laboratory_abbreviation+'_'+single_gene_data.manage_id).append(table);\n\n            }\n\n            if(single_gene_data.response_curves_data[0].length) {\n\n              /*\n               * Build out the Curve Fit table\n               */\n\n              var peptide_sequence = single_gene_data.response_curves_data[0][0].peptide;\n              // Strip brackets from the modified peptide sequence.\n              var peptide_sequence_stripped = peptide_sequence.replace(/[\\[\\+\\d+\\]]/g,'');\n              var table = $('<table/>').addClass('table table-bordered table-striped table-condensed')\n                .attr('id',peptide_sequence_stripped+'_response_curves')\n                .attr('style','margin-top:40px;');\n\n              var table_header_row = $(\"<tr/>\");\n              var table_headers = $('<th colspan=\"2\">&nbsp;</th><th colspan=\"3\">Curve Fit</th>');\n              table_header_row.append(table_headers);\n              table.append(table_header_row);\n\n              // Response curves data table\n              var table_top_row = $(\"<tr/>\");\n              var labels = [\n                \"Peptide\"\n                ,\"Transition\"\n                ,\"slope\"\n                ,\"intercept\"\n                ,\"r squared\"\n              ];\n              // Stitch together the table headers row\n              $.each(labels, function(index, label) {\n                table_top_row.append('<td><strong>'+label+'</strong></td>');\n              });\n\n              table.append(table_top_row);\n\n              $.each(single_gene_data.response_curves_data, function(index, single_data) {\n\n                var curve_fit_rowspan = single_data.length;\n\n                $.each(single_data, function(idx, single) {\n\n                  var transition_id = (single.transition_id == '.Sum.tr.') ? 'Sum' : single.transition_id;\n                  var table_row = $(\"<tr/>\");\n                  table.append(table_row);\n\n                  if(idx == 0) {\n                    table_row.append('<td rowspan=\"'+curve_fit_rowspan+'\">'+single.peptide+'</td>');\n                  }\n                  table_row.append('<td>'+transition_id+'</td>');\n                  table_row.append('<td>'+single.Slope+'</td>');\n                  table_row.append('<td>'+single.Intercept+'</td>');\n                  table_row.append('<td>'+single.RSquare+'</td>');\n                });\n              });\n\n              // Remove preloader\n              $('div.span12.'+single_gene_data.manage_id+'_'+single_gene_data.laboratory_abbreviation+'_'+single_gene_data.manage_id+' .loc_lloq_preloader_loading').remove();\n              // Load the table\n              $('div.span12.'+single_gene_data.manage_id+'_'+single_gene_data.laboratory_abbreviation+'_'+single_gene_data.manage_id).append(table);\n  \n              // Response Curves LLOQ header notice\n              var high_values = $('#'+single_gene_data.manage_id+'_validation_sample_data_'+single_gene_data.manage_id+' tbody tr td').find('.red');\n\n              if(high_values.length) {               \n\n                // try to prevent duplicates\n                $('#outer-wrapper #'+single_gene_data.manage_id+'_loc_loq .lloq_header .icon-exclamation-sign').remove();\n\n                $('#outer-wrapper #'+single_gene_data.manage_id+'_loc_loq .lloq_header').append(' <i class=\"icon-exclamation-sign red\" title=\"Repeatability shows greater than 20% CV\"></i>');\n                $('.icon-exclamation-sign').tooltip();\n              }\n            }\n\n            if( (single_gene_data.lod_loq_comparison_data[0] == 0) && (single_gene_data.response_curves_data[0].length == 0) ) {\n              $.each(genes, function(index, gene) {\n                var div_wrapper = $('div.span12.'+single_gene_data.peptide_sequence+'_'+single_gene_data.laboratory_abbreviation);\n                // Remove preloader\n                $('.loc_lloq_preloader_loading').remove();\n                $(div_wrapper).append( '<p style=\"text-align:center; margin-top:200px;\">Response Curves Data Unavailable</p>' );\n              });\n            }\n\n          });\n\n        }\n\n      }\n\n    });\n  }\n</script>\n{% endblock %}","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"541":{"range":{"start":{"row":1004,"column":22},"end":{"row":1004,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"542":{"range":{"start":{"row":1004,"column":5},"end":{"row":1004,"column":6}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":1004,"column":22},"end":{"row":1004,"column":22}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":3,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/show_assay_details.php","digestWhenLastPersisted":"69f8165807add30bedb48a5eede74746995bb1f1","preferredLineEnding":null,"nextMarkerId":543,"deserializer":"TextBuffer","version":5},{"id":"ce68f4490c515bf1473338f0ddffc9cf","text":"<?php\nfunction show_assay_details() {\n  $app = \\Slim\\Slim::getInstance();\n  $env = $app->environment();\n  global $final_global_template_vars;\n  require_once $final_global_template_vars[\"absolute_path_to_this_module\"] . \"/models/assays.class.php\";\n  require_once $_SERVER[\"PATH_TO_CORE\"] . \"slim_framework/SWPG/models/XML2Array.php\";\n  require_once($_SERVER['DOCUMENT_ROOT'].'/cms/wp-load.php' );\n  $xml2array = new \\swpg\\models\\XML2Array();\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n\n  // Local Portal Data\n  $assay = new Assay(\n    $db_resource\n    ,$final_global_template_vars[\"session_key\"]\n  );\n  \n  // Query by gene symbol, uniprot id, or assay id\n  $path_parts = explode('/', $env[\"PATH_INFO\"]);\n  array_shift($path_parts);\n  $gene_symbol = ($path_parts[0] == 'gene') ? $path_parts[1] : false;\n  $uniprot_id = ($path_parts[0] == 'uniprot') ? $path_parts[1] : false;\n  $assay_id = (!$gene_symbol && !$uniprot_id) ? $path_parts[0] : false;\n\n  \n\n  // Extract just the id from the \"CPTAC-\" appended GET variable\n  if($assay_id) {\n    preg_match('!\\d+!', $assay_id, $matches);\n    $assay_id = $matches[0];\n  }\n\n\n  // Next and Previous\n  $nextPrev['prevNext'] = $assay->getPrevNextAssay($assay_id);\n\n  // Get details\n  $data = $assay->get_details( $assay_id, $gene_symbol, $uniprot_id );\n\n  $data[\"preview_header\"] = false;\n\n  // If get_details() returns false, throw a 404\n  if(!$data) $app->notFound();\n\n  // If the record is not approved and there no authenticated session, throw a 404\n  if( ($data[\"approval_status\"] != 1) && (!isset($_SESSION[$final_global_template_vars[\"session_key\"]])) ) $app->notFound();\n\n  // If the record is not approved and there is an authenticated session, set the preview_header variable to true. Otherwise, set it to false.\n  $data[\"preview_header\"] = ( ($data[\"approval_status\"] != 1) && isset($_SESSION[$final_global_template_vars[\"session_key\"]]) ) ? true : false;\n\n  // Get the menu data from Wordpress\n  $data[\"menu\"] = wp_get_nav_menu_items('top-menu');\n\n  // Reformat data from UniProt to match the array heiarchy from when it was an API call\n  $data[\"uniprot_api\"] = array(\n    \"uniprot_ac\" => $data[\"uniprot_ac\"]\n    ,\"gene_synonym\" => $data[\"uniprot_gene_synonym\"]\n    ,\"gene_symbol\" => $data[\"gene\"]\n    ,\"hgnc_gene_id\" => $data[\"uniprot_hgnc_gene_id\"]\n    ,\"uniprot_kb\" => $data[\"uniprot_kb\"]\n    ,\"source_taxon_id\" => $data[\"uniprot_source_taxon_id\"]\n    ,\"sequence\" => $data[\"uniprot_sequence\"]\n    ,\"sequence_raw\" => $data[\"uniprot_sequence_raw\"]\n    ,\"sequence_length\" => $data[\"uniprot_sequence_length\"]\n  );\n\n  // Get uniprot_splice_junctions\n  $data[\"uniprot_api\"][\"splice_junctions\"] = $assay->get_uniprot_splice_junctions( $data[\"uniprot\"] );\n  // Get uniprot_snps\n  $data[\"uniprot_api\"][\"snps\"] = $assay->get_uniprot_snps( $data[\"uniprot\"] );\n  // Get uniprot_isoforms\n  $data[\"uniprot_api\"][\"isoforms\"] = $assay->get_uniprot_isoforms( $data[\"uniprot\"] );\n\n\n  // Get data from Entrez\n  $data[\"entrez_api\"] = $assay->get_entrez_gene_data(\n    $data[\"gene\"]\n    ,$final_global_template_vars[\"entrez_api_url\"]\n    ,$xml2array\n  );\n\n\n\n  // Get all genes\n  $genes['genes'] = $assay->getAllGenes($data['gene']);\n\n  $peptide_sequence_array = array();\n\n  // Create an array of peptide starts and ends to send to the $assay->formatSequenceHTML() method (without 'duplicates')\n  foreach($genes['genes'] as $gene_key => $gene_value) {\n    $peptide_sequence_array[] = array('id' => $gene_value['manage'], 'peptide_sequence' => $gene_value['peptide_sequence'], 'peptide_modified_sequence' => $gene_value['peptide_modified_sequence'], 'start' => $gene_value['peptide_start'], 'end' => $gene_value['peptide_end']);\n  }\n  // Remove duplicate arrays\n  $peptide['sequence_array'] = array_map('unserialize', array_unique(array_map('serialize', $peptide_sequence_array)));\n  // Reindex the array\n  $peptide['sequence_array'] = array_values($peptide['sequence_array']);\n\n  // Create an array of peptide data including laboratory data (with 'duplicates')\n  $peptide['sequence_labs_array'] = $assay->getAllPeptideSequences( $data['gene']);\n\n\n  // Return only unique peptide sequences (TEMPORARY???)\n  $input = $genes[\"genes\"];\n  $temp  = array();\n  $keys  = array();\n  $i = 0;\n  foreach ( $input as $gene_key => $gene_data ) {\n    if ( !in_array($gene_data['peptide_sequence'], $temp) ) {\n      $temp[] = $gene_data['peptide_sequence'];\n      $keys[$gene_key] = true;\n    }\n    $i++;\n  }\n  $genes_result = array_intersect_key($input, $keys);\n  $genes['genes_distinct'] = array_values($genes_result);\n\n  // Format the sequence with highlighted peptide starts and ends\n  $data[\"uniprot_api\"]['formatted_sequence'] = $assay->formatSequenceHTML($data[\"uniprot_api\"]['sequence'],$peptide['sequence_array'],$data);\n\n  // Scrape the PhosphoSitePlus site for the the embedded SWF\n  $phosphosites_graph = false;\n  $genes['phosphosites_graph'] = false;\n  $phosphosites_page = $assay->curl(\"http://www.phosphosite.org/uniprotAccAction.do?id=\".$data[\"uniprot_api\"][\"uniprot_ac\"]);\n  $phosphosites_graph = $assay->scrape_between($phosphosites_page, '<object width=\"970\" height=\"300\">', '</object>');\n\n  if(!$phosphosites_graph) {\n    $phosphosites_graph = $assay->scrape_between($phosphosites_page, '<object width=\"970\" height=\"200\">', '</object>');\n    $phosphosites_graph = str_replace('ProteinViewer200.swf', '/assays/library/ProteinViewer200.swf', $phosphosites_graph);\n  }\n\n  if($phosphosites_graph) {\n    $phosphosites_graph_mod = str_replace('ProteinViewer300.swf', '/assays/library/ProteinViewer300.swf', $phosphosites_graph);\n    $genes['phosphosites_graph'] = str_replace('width=\"970\"', 'wmode=\"transparent\" width=\"855\"', $phosphosites_graph_mod);\n  }\n\n  // Chromatogram images\n  $i = 0;\n  foreach($genes['genes'] as $gene) {\n    $genes['genes'][$i]['chromatogram_images'] = false;\n    $chromatogram_images = $assay->get_chromatogram_images( $gene['analyte_peptide_id'], $gene['laboratories_id'] );\n    foreach($chromatogram_images as $chromatogram_image ) {\n      $genes['genes'][$i]['chromatogram_images'][] = $final_global_template_vars['panorama_images_path'].$chromatogram_image['file_name'];\n    }\n    $i++;\n  }\n  // Response curve images\n  $i = 0;\n  foreach($genes['genes'] as $gene) {\n    $genes['genes'][$i]['response_curve_images'] = false;\n    $response_curve_images = $assay->get_response_curve_images( $gene['peptide_modified_sequence'], $gene['analyte_peptide_id'], $gene['laboratories_id'] );\n    foreach($response_curve_images as $response_curve_image ) {\n      $genes['genes'][$i]['response_curve_images'][] = $final_global_template_vars['panorama_images_path'].$response_curve_image['file_name'];\n    }\n    $i++;\n  }  \n  // Validation sample curve images (Repeatability)\n  $i = 0;\n\n  foreach($genes['genes'] as $gene) {\n    $genes['genes'][$i]['validation_sample_image'] = false;\n    $validation_sample_image = $assay->get_validation_sample_image( $gene['peptide_modified_sequence'], $gene['analyte_peptide_id'], $gene['laboratories_id'] );\n    if(!empty($validation_sample_image)) {\n      $genes['genes'][$i]['validation_sample_image'] = $final_global_template_vars['panorama_images_path'].$validation_sample_image['file_name'];\n    }\n    $i++;\n  }\n  \n  // Validation sample tabular data\n  $i = 0;\n  $validation_ignored_keys = array('fragment_ion','low_count','med_count','high_count');\n  foreach($genes['genes'] as $gene) {\n\n    $genes['genes'][$i]['validation_sample_images_data'] = false;\n    $validation_sample_data_array = $assay->get_validation_sample_images_data(\n      $gene['peptide_modified_sequence']\n      ,$gene['analyte_peptide_id']\n      ,$gene['laboratories_id']\n      ,$gene['import_log_id']\n      ,$assay_id\n    );\n\n    foreach($validation_sample_data_array as $validation_sample_data ) {\n      \n      $manage_id = $validation_sample_data['manage_id'];\n      unset($validation_sample_data['manage_id']);\n\n      foreach($validation_sample_data as $key => $value) {\n        // Color values above 20% in red\n        if( ($value > 20) && !in_array($key, $validation_ignored_keys) ) {\n          $new_validation_sample_data[$key] = '<span class=red>'.$value.'</span>';\n        } else {\n          $new_validation_sample_data[$key] = $value;\n        }\n      }\n      $genes['genes'][$i]['validation_sample_images_data'][$manage_id][] = $new_validation_sample_data;\n    }\n    $i++;\n  }\n\n\n\n  $i = 0;\n  foreach($genes['genes'] as $gene) {\n    $genes['genes'][$i]['sop_files'] = $assay->get_sop_files( $gene['import_log_id'] );\n    $i++;\n  }\n\n  // IE disclaimer var\n  $IE6 = (stristr('MSIE 6',$_SERVER['HTTP_USER_AGENT'])) ? true : false;\n  $IE7 = (stristr('MSIE 7',$_SERVER['HTTP_USER_AGENT'])) ? true : false;\n  $IE8 = (stristr('MSIE 8',$_SERVER['HTTP_USER_AGENT'])) ? true : false;\n  $data['show_disclaimer'] = ( $IE6 || $IE7 || $IE8 ) ? true : false;\n\n  $render_array = array();\n  foreach($data as $key => $value) $render_array[$key] = $value;\n\n  $default_render_array =  array(\n    \"page_title\" => $data['gene'].\", CPTAC-\".$data['manage'].\" - CPTAC Assay Portal\"\n    ,\"hide_side_nav\" => true\n  );\n\n\n\n  // define data for peptide_sequence\n  $gene_peptide_sequence = array();\n  foreach($genes['genes'] as $key => $value)\n  {\n    $gene_peptide_sequence['gene_peptide_sequence'][$key] = array(\n        \"peptide_sequence\" => $value['peptide_sequence']\n        ,\"peptide_modified_sequence\" => $value['peptide_modified_sequence']\n        ,\"laboratory_abbreviation\" => $value['laboratory_abbreviation']\n        ,\"celllysate_path\" => $value['celllysate_path']\n        ,\"laboratories_id\" => $value['laboratories_id']\n        ,\"import_log_id\" => $value['import_log_id']\n        ,\"peptide_standard_purity_types_id\" => $value['peptide_standard_purity_types_id']\n        ,\"manage_id\" => $value['manage']\n      );\n  }\n\n\n  // define data for peptide_sequence\n  $distinct_gene_peptide_sequence = array();\n\n  foreach($genes['genes'] as $key => $value)\n  {\n    $distinct_gene_peptide_sequence['distinct_gene_peptide_sequence'][$key] = array(\"peptide_sequence\" => $value['peptide_sequence'],\"manage\" => $value['manage']);\n  }\n\n  $render_array = array_merge( $render_array, $default_render_array, $genes, $peptide, $gene_peptide_sequence,$distinct_gene_peptide_sequence, $nextPrev );\n\n  $app->render(\n    'show_assay_details.php'\n    ,$render_array\n  );\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":163,"column":84},"end":{"row":163,"column":104}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":4,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/controllers/assay_details.php","digestWhenLastPersisted":"84a03c8a590d531e9605a3455628eda6f71e6b39","preferredLineEnding":null,"nextMarkerId":269,"deserializer":"TextBuffer","version":5},{"id":"dee27659db48e1dec9e2cd06b0b14b7e","text":"<?php\n/**\n * @desc Import data from Panorama into CPTAC's Assay Portal database\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 2.0\n * @package cptac\n *\n */\n\n// Tweak some PHP configurations\nini_set('memory_limit','2048M'); // 2 GB\nini_set('max_execution_time', 36000); // 10 hours\n\nfunction import_panorama_data( $import_log_id = false ) {\n\n  $app = \\Slim\\Slim::getInstance();\n  $env = $app->environment();\n  global $final_global_template_vars;\n\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/config/settings.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_panorama_data.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/import_plots_data.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/assays.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/labkey.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/user_account/models/user_account.class.php\";\n\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n\n  $assay = new Assay( $db_resource );\n  $import_panorama_data = new ImportPanoramaData( $db_resource );\n  $plots = new importPlotsData( $db_resource );\n  $labkey = new LabkeyApi(\n    $final_global_template_vars[\"labkey_config\"]\n    ,$final_global_template_vars[\"panorama_images_path\"]\n    ,$final_global_template_vars[\"panorama_images_storage_path\"]\n    ,$app->request->get('import_log_id')\n  );\n\n\n  $user_account = new UserAccount( $db_resource );\n\n  $get = $app->request->get();\n\n\n  $import_log_id = $get[\"import_log_id\"];\n\n\n  /*\n   * Check the import_log_id. Throw a 404 if it's not a valid ID.\n   */\n\n  // Get the laboratory metadata via the import_log_id GET variable.\n  $lab_data = $assay->get_laboratory_by_import_log_id( $get[\"import_log_id\"] );\n\n  // If get_laboratories() returns false, throw a 404\n  if(!$lab_data) $app->notFound();\n\n  write_log($import_log_id,'Verified import ID');\n\n  /*\n   * Backup the database.\n   */\n\n  $assay->backup_database(\"2\");\n  write_log($import_log_id,'Database backed-up');\n \n  /*\n   * Send an email to the site admin to notify that an import has been executed.\n   */\n\n  // Get the user's data, since we have no $_SESSION data at this point (for later in the script).\n  $user_data = $user_account->get_user_account_info( (int)$app->request->get(\"account_id\"), false );\n\n  $email_addresses = array(\n     $final_global_template_vars[\"superadmin_email_address\"]\n  );\n\n  $reimport_text = \"\";\n  if( isset($get[\"run_missed_images\"]) && ($get[\"run_missed_images\"] == \"true\") ) {\n    array_push($email_addresses, $user_data[\"email\"]);\n    $reimport_text = \"Re-\";\n  }\n\n  $to = implode(\", \",$email_addresses);\n\n  $email_subject = \"CPTAC Assay Portal: Images \".$reimport_text.\"Import Started, \".date('F j, Y h:i:s A').\" - \".$lab_data['laboratory_name'];\n  $headers = $final_global_template_vars['message_parts']['headers'];\n  $headers .= 'From: CPTAC Assay Portal <noreply@'.$_SERVER[\"SERVER_NAME\"].'>' . \"\\r\\n\";\n  $body_message = '\n    <h1>CPTAC Assay Portal: Images '.$reimport_text.'Import Started - '.$lab_data['laboratory_name'].'</h1>'.\n    $final_global_template_vars['message_parts']['body_connector']\n    .'<p><strong>Date/Time:</strong> '.date('l, F jS, Y \\a\\t h:i:s A').'</p>\n    <p>Panorama images and data '.strtolower($reimport_text).'import has been executed by '.$lab_data['laboratory_name'].'.</p>\n  ';\n  $message = $final_global_template_vars['message_parts']['body_header'].$body_message.$final_global_template_vars['message_parts']['body_footer'];\n\n  // Send the email\n  mail( $to, $email_subject, $message, $headers );\n\n  write_log($import_log_id,'Administrator email notifications sent');\n\n  /* \n   * Configuration\n   */\n\n  // Just check and run on one sequence? (string - sequence | false)\n  $peptide_sequence = false;\n  // Just check and run on an array of existing IDs (array - ids | false)\n  $peptide_ids = false;\n  // $peptide_ids = array(102, 103, 225, 268, 333, 606, 629, 644, 656, 549, 540, 868);\n  // Delete old files and data during import? (boolean)\n  $delete_old_files_and_data = false;\n\n  /* \n   * Configuration Ends\n   */\n\n  // Run one sequence, an array of sequences from existing IDs, or run all\n  if( isset($get[\"peptide_sequence\"]) && isset($get[\"run_missed_images\"]) && ($get[\"run_missed_images\"] == \"true\") ) {\n    // Get one sequence's data from the database.\n    $sequences = $assay->getPeptideSequenceBySequence( $peptide_sequence );\n\n    write_log($import_log_id,'Single sequence retrieved from db:'.$peptide_sequence);\n\n  } else if( isset($get[\"run_missed_images\"]) && ($get[\"run_missed_images\"] == \"true\") ) {\n    // Update the reimport_in_progress field in the imports_executed_log table, setting it to true.\n    $log_data[\"imports_executed_log_id\"] = (int)$get[\"imports_executed_log_id\"];\n    $log_data[\"laboratory_id\"] = $lab_data[\"laboratory_id\"];\n    $log_data[\"executed_by_user_id\"] = (int)$get[\"account_id\"];\n    $log_data[\"reimport_in_progress\"] = 1;\n    $import_panorama_data->update_reimport_in_progress( $log_data );\n    // Get sequences from an array of analyte peptide IDs.\n    // Get all sequences for a lab, to pass it to the next method, check_for_missed_images().\n    $all_sequences = $assay->getPeptideSequences( $lab_data[\"import_log_id\"] );\n    // Get all of the problematic images.\n    $missed_images = $import_panorama_data->check_for_missed_images(\n       $lab_data[\"laboratory_id\"]\n      ,$lab_data[\"import_log_id\"]\n      ,$all_sequences\n    );\n    // Get all of the problematic images data.\n    $missed_images_data = $import_panorama_data->check_for_missed_images_data(\n       $lab_data[\"laboratory_id\"]\n      ,$lab_data[\"import_log_id\"]\n      ,$all_sequences\n    );\n    // Merge the problematic images and problematic images data arrays.\n    $sequences = array_merge($missed_images, $missed_images_data);\n  \n    write_log($import_log_id,'FOUND: Import run missed images');\n\n\n  } else {\n    // Get all sequence data from the database\n    $sequences = $assay->getPeptideSequences( $lab_data[\"import_log_id\"] );\n\n    write_log($import_log_id,'All sequenced retrieved from local db');\n  \n  }\n\n  \n\n  /*\n   * If this is a test run, limit the record count to 5.\n   */\n\n  if( $app->request->get(\"test_import\") == 1 ) {\n    $sequences_count = count($sequences);\n    $subtract_amount = ($sequences_count-5);\n    $sequences = array_splice($sequences, $subtract_amount);\n  }\n\n  // Set test mode, which stops actual imports from executing.\n  $execute['test_mode'] = false;\n\n  // Select which imports to execute (boolean).\n  $execute['import_chromatogram_images'] = !isset($get[\"run_missed_images\"]) ? true : false;\n  $execute['import_response_curve_images'] = !isset($get[\"run_missed_images\"]) ? true : false;\n  $execute['import_validation_sample_images'] = !isset($get[\"run_missed_images\"]) ? true : false;\n  $execute['import_validation_sample_tabular_data'] = !isset($get[\"run_missed_images\"]) ? true : false;\n  $execute['import_lod_loq_data'] = !isset($get[\"run_missed_images\"]) ? true : false;\n  $execute['import_curve_fit_data'] = !isset($get[\"run_missed_images\"]) ? true : false;\n  // Select which missed data checks to execute (boolean).\n  $execute['missed_chromatogram_images'] = !empty($sequences[\"chromatograms\"]) ? true : false;\n  $execute['missed_response_curve_images'] = !empty($sequences[\"response_curves\"]) ? true : false;\n  $execute['missed_validation_sample_images'] = !empty($sequences[\"validation_samples\"]) ? true : false;\n  $execute['missed_validation_sample_tabular_data'] = !empty($sequences[\"validation_samples_data\"]) ? true : false;\n  $execute['missed_lod_loq_data'] = !empty($sequences[\"lod_loq_data\"]) ? true : false;\n  $execute['missed_curve_fit_data'] = !empty($sequences[\"response_curves_data\"]) ? true : false;\n\n  // Manual override.\n  // $execute['import_chromatogram_images'] = false;\n  // $execute['import_response_curve_images'] = false;\n  // $execute['import_validation_sample_images'] = false;\n  // $execute['import_validation_sample_tabular_data'] = false;\n  // $execute['import_lod_loq_data'] = false;\n  // $execute['import_curve_fit_data'] = false;\n\n  // If we're not in test mode, go ahead and execute.\n  if(!$execute['test_mode']) {\n\n    /*\n     * Get the Panorama authentication cookie file.\n     */   \n\n    $panorama_authentication_cookie = $labkey->get_panorama_authentication_cookie($import_log_id);\n\n    /*\n     *************************************\n     * Process chromatogram images\n     *************************************\n     */\n\n    if($execute['import_chromatogram_images'] || $execute['missed_chromatogram_images']) {\n\n      // Purge the error logs.\n      $import_panorama_data->purge_error_logs(\"panorama_chromatogram_images_failed\", $lab_data[\"import_log_id\"]);\n\n      // Run missed chromatogram images.\n\n      write_log($import_log_id,'Getting all missed chromatogram images');\n\n      $all_sequences_preserved = array();\n      if(isset($sequences[\"chromatograms\"]) && !empty($sequences[\"chromatograms\"])) {\n        $all_sequences_preserved = $sequences;\n        $sequences = $sequences[\"chromatograms\"];\n      }\n\n      // Include the class.\n      require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays_import/models/chromatograms_import.class.php\";\n      // Instantiate.\n      $chromatograms_import = new ChromatogramsImport( $db_resource, $import_panorama_data, $labkey );\n\n      // Run the import.\n      $chromatograms_result = $chromatograms_import->run_import( \n          $sequences\n        , $panorama_authentication_cookie\n        , $delete_old_files_and_data\n        , $lab_data\n        , $import_log_id\n      );\n\n      write_log($import_log_id,'Getting chromatogram images complete');\n\n\n      // Restore the $sequences array for the next import process.\n      if(isset($sequences[\"chromatograms\"]) && !empty($sequences[\"chromatograms\"])) {\n        $sequences = $all_sequences_preserved;\n      }\n\n    }\n\n    /*\n     *************************************\n     * Process response curve images\n     *************************************\n     */\n\n    if($execute['import_response_curve_images'] || $execute['missed_response_curve_images']) {\n\n      // Purge the error logs.\n      $import_panorama_data->purge_error_logs(\"panorama_response_curve_images_failed\", $lab_data[\"import_log_id\"]);\n\n      // Run missed response curve images\n      $all_sequences_preserved = array();\n      if(isset($sequences[\"response_curves\"]) && !empty($sequences[\"response_curves\"])) {\n        $all_sequences_preserved = $sequences;\n        $sequences = $sequences[\"response_curves\"];\n      }\n\n      // Include the class.\n      require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays_import/models/response_curve_images_import.class.php\";\n      \n      // Instantiate.\n      $response_curve_images_import = new ResponseCurveImagesImport( $db_resource, $import_panorama_data, $labkey );\n\n      // Run the import.\n      $response_curve_images_result = $response_curve_images_import->run_import( \n          $sequences\n        , $panorama_authentication_cookie\n        , $delete_old_files_and_data\n        , $lab_data\n      );\n\n      \n      write_log($import_log_id,'response_curve_images import');\n      \n\n      if(isset($sequences[\"response_curves\"]) && !empty($sequences[\"response_curves\"])) {\n        $sequences = $all_sequences_preserved;\n      }\n\n    }\n\n    /*\n     *************************************\n     * Process validation sample images\n     *************************************\n     */\n\n\n    if($execute['import_validation_sample_images'] || $execute['missed_validation_sample_images']) {\n\n      // Purge the error logs.\n      $import_panorama_data->purge_error_logs(\"panorama_validation_sample_images_failed\", $lab_data[\"import_log_id\"]);\n\n      // Run validation sample images\n      $all_sequences_preserved = array();\n      if(isset($sequences[\"validation_samples\"]) && !empty($sequences[\"validation_samples\"])) {\n        $all_sequences_preserved = $sequences;\n        $sequences = $sequences[\"validation_samples\"];\n      }\n\n      \n      \n      // Include the class.\n      require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays_import/models/validation_sample_images_import.class.php\";\n      // Instantiate.\n      $validation_sample_images = new ValidationSampleImagesImport( $db_resource, $import_panorama_data, $labkey );\n\n      // Run the import.\n      $validation_sample_images_result = $validation_sample_images->run_import( \n          $sequences\n        , $panorama_authentication_cookie\n        , $delete_old_files_and_data\n        , $lab_data\n      );\n\n      write_log($import_log_id,'validation_sample_images import');\n\n      if(isset($sequences[\"validation_samples\"]) && !empty($sequences[\"validation_samples\"])) {\n        $sequences = $all_sequences_preserved;\n      }\n\n    }\n\n    //die('stop here');\n\n\n    /*\n     *************************************\n     * Process validation sample data\n     *************************************\n     */\n\n    if($execute['import_validation_sample_tabular_data'] || $execute['missed_validation_sample_tabular_data']) {\n\n      // Purge the error logs.\n      $import_panorama_data->purge_error_logs(\"panorama_validation_sample_data_failed\", $lab_data[\"import_log_id\"]);\n\n      // Run validation sample images data\n      $all_sequences_preserved = array();\n      if(isset($sequences[\"validation_samples_data\"]) && !empty($sequences[\"validation_samples_data\"])) {\n        $all_sequences_preserved = $sequences;\n        $sequences = $sequences[\"validation_samples_data\"];\n      }\n\n      // Include the class.\n      require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays_import/models/validation_sample_data_import.class.php\";\n      // Instantiate.\n      $validation_sample_data = new ValidationSampleDataImport( $db_resource, $import_panorama_data, $labkey );\n\n      // Run the import.\n      $validation_sample_data_result = $validation_sample_data->run_import( \n          $sequences\n        , $panorama_authentication_cookie\n        , $delete_old_files_and_data\n        , $lab_data\n      );\n\n      write_log($import_log_id,'validation_sample_data import');\n\n      if(isset($sequences[\"validation_samples_data\"]) && !empty($sequences[\"validation_samples_data\"])) {\n        $sequences = $all_sequences_preserved;\n      }\n\n    }\n\n\n    /*\n     *************************************\n     * Process LOD/LOQ data\n     *************************************\n     */\n\n    if($execute['import_lod_loq_data'] || $execute['missed_lod_loq_data']) {\n\n      // Purge the error logs.\n      $import_panorama_data->purge_error_logs(\"lod_loq_comparison_data_failed\", $lab_data[\"import_log_id\"]);\n\n      // Run lod loq data\n      $all_sequences_preserved = array();\n      if(isset($sequences[\"lod_loq_data\"]) && !empty($sequences[\"lod_loq_data\"])) {\n        $all_sequences_preserved = $sequences;\n        $sequences = $sequences[\"lod_loq_data\"];\n      }\n\n      // Include the class.\n      require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays_import/models/lod_loq_data_import.class.php\";\n      // Instantiate.\n      $lod_loq_data = new LodLoqDataImport( $db_resource, $import_panorama_data, $labkey, $plots );\n\n      // Run the import.\n      $lod_loq_data_result = $lod_loq_data->run_import( \n          $sequences\n        , $panorama_authentication_cookie\n        , $delete_old_files_and_data\n        , $lab_data\n      );\n\n      write_log($import_log_id,'lod_loq_data import');\n\n      if(isset($sequences[\"lod_loq_data\"]) && !empty($sequences[\"lod_loq_data\"])) {\n        $sequences = $all_sequences_preserved;\n      }\n\n    }\n\n    /*\n     *************************************************\n     * Process Curve Fit data (response curves)\n     *************************************************\n     */\n\n    if($execute['import_curve_fit_data'] || $execute['missed_curve_fit_data']) {\n\n      // Purge the error logs.\n      $import_panorama_data->purge_error_logs(\"response_curves_data_failed\", $lab_data[\"import_log_id\"]);\n\n      // Run curve fit data (validation samples)\n      $all_sequences_preserved = array();\n      if(isset($sequences[\"response_curves_data\"]) && !empty($sequences[\"response_curves_data\"])) {\n        $all_sequences_preserved = $sequences;\n        $sequences = $sequences[\"response_curves_data\"];\n      }\n\n      // Include the class.\n      require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays_import/models/curve_fit_data_import.class.php\";\n      // Instantiate.\n      $curve_fit_data = new CurveFitDataImport( $db_resource, $import_panorama_data, $labkey, $plots );\n\n      // Run the import.\n      $curve_fit_data_result = $curve_fit_data->run_import( \n          $sequences\n        , $panorama_authentication_cookie\n        , $delete_old_files_and_data\n        , $lab_data\n      );\n\n\n      write_log($import_log_id,'End Curve Fit Data Import');\n\n    }\n\n    // Delete Panorama's authentication cookie.\n    if(is_file($panorama_authentication_cookie)) {\n      unlink($panorama_authentication_cookie);\n    }\n\n    write_log($import_log_id,'End Test Mode Import');\n  } // Test mode ends\n\n  // Record the import_end_date in the imports_executed_log table.\n  if( isset($get[\"imports_executed_log_id\"]) && !isset($get[\"run_missed_images\"]) ) {\n    $import_panorama_data->update_executed_import_end_date( $get[\"imports_executed_log_id\"] );\n  \n    write_log($import_log_id,'Update import set new enddate');\n\n  }\n\n  // Update the reimport_in_progress field in the imports_executed_log table, setting it to false.\n  if( isset($get[\"imports_executed_log_id\"]) && isset($get[\"run_missed_images\"]) ) {\n    $log_data[\"imports_executed_log_id\"] = (int)$get[\"imports_executed_log_id\"];\n    $log_data[\"laboratory_id\"] = $lab_data[\"laboratory_id\"];\n    $log_data[\"executed_by_user_id\"] = (int)$get[\"account_id\"];\n    $log_data[\"reimport_in_progress\"] = 0;\n    $import_panorama_data->update_reimport_in_progress( $log_data );\n\n    write_log($import_log_id,'Update re-import in progress');\n  }\n\n  /*\n  * Send an email to the site admin and end-user to notify that the import has finished.\n  */\n\n  $test_import_subject = ( $app->request->get(\"test_import\") == 1 ) ? '[TEST RUN]' : '';\n  $email_subject = \"CPTAC Assay Portal: \".$reimport_text.\"Import Finished \".$test_import_subject.\", \".date('F j, Y h:i:s A').\" - \".$lab_data['laboratory_name'];\n  $headers = $final_global_template_vars['message_parts']['headers'];\n  $headers .= 'From: CPTAC Assay Portal <noreply@'.$_SERVER[\"SERVER_NAME\"].'>' . \"\\r\\n\";\n  $test_import_notification = ( $app->request->get(\"test_import\") == 1 ) ? '<span style=\"color:red;\">[TEST RUN]</span>' : '';\n  $body_message = '\n    <h1>CPTAC Assay Portal: '.$reimport_text.'Import Finished - '.$lab_data['laboratory_name'].'</h1>'.\n    $final_global_template_vars['message_parts']['body_connector']\n    .'<p><strong>Date/Time:</strong> '.date('l, F jS, Y \\a\\t h:i:s A').'</p>\n    <p>'.$test_import_notification.' An import executed by '.$lab_data['laboratory_name'].' has finished.</p>\n    <p><a href=\"https://'.$_SERVER[\"SERVER_NAME\"].'/assays_import/\">Review the imported assays</a></p>\n    ';\n  $message = $final_global_template_vars['message_parts']['body_header'].$body_message.$final_global_template_vars['message_parts']['body_footer'];\n\n  // Send the email\n  mail( $final_global_template_vars[\"superadmin_email_address\"].\", \".$user_data[\"email\"], $email_subject, $message, $headers );\n  \n  write_log($import_log_id,'Administrator completed email sent');  \n  write_log($import_log_id,'IMPORT COMPLETE - '.$lab_data['laboratory_name'].' '.date('l, F jS, Y \\a\\t h:i:s A'));\n\n  die(\"Done with Panorama images and data import - \".date('l, F jS, Y \\a\\t h:i:s A'));\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":365,"column":64},"end":{"row":365,"column":74}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":3,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_data.php","digestWhenLastPersisted":"2705b4c6c2afb04fd2e3d3c680ff373cfda63fbd","preferredLineEnding":null,"nextMarkerId":39,"deserializer":"TextBuffer","version":5},{"id":"69089c551c2ad5414225ba3202c8ae7e","text":"<?php\n\n/**\n * Validation Sample Images Import Class\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 1.0\n * @package cptac\n *\n */\nclass ValidationSampleImagesImport\n{\n  private $session_key = \"\";\n  public $db;\n\n  /**\n   * Constructor\n   *\n   * @param object $db_connection The database connection object\n   * @param object $import_panorama_data The Import Panorama Data class\n   * @param object $labkey The LabkeyApi class\n   */\n\n  public function __construct( $db_connection = false, $import_panorama_data = false, $labkey = false ) {\n\n    if($db_connection && is_object($db_connection)) {\n      $this->db = $db_connection;\n    }\n\n    global $final_global_template_vars;\n    $this->final_global_template_vars = $final_global_template_vars;\n\n    if($import_panorama_data && is_object($import_panorama_data)) {\n      $this->import_panorama_data = $import_panorama_data;\n    }\n\n    if($labkey && is_object($labkey)) {\n      $this->labkey = $labkey;\n    }\n\n  }\n\n  /**\n  * Run Import\n  *\n  * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n  * @param array $sequences The sequences array\n  * @param string $panorama_authentication_cookie The Panorama authentication cookie value\n  * @param bool $delete_old_files_and_data Whether to delete old files and data\n  * @param array $lab_data The laboratory data array\n  * @return array\n  */\n\n  public function run_import(\n      $sequences = array()\n    , $panorama_authentication_cookie = false\n    , $delete_old_files_and_data = false\n    , $lab_data = false )\n  {\n\n\t\n\n      // Set the $result to an empty array, by default.\n      $result = array();\n      $i = 0;\n      \n     \n      foreach($sequences as $sequence) {\n\n\n        /*\n         * First, delete any old data and images.\n         */\n\n        if( $delete_old_files_and_data ) \n        {\n\n          write_log($lab_data[\"import_log_id\"],'Deleting any old data and images');\n\n          // Get the file names.\n          $file_names = $this->import_panorama_data->get_images_data(\n            'panorama_validation_sample_images'\n            ,$sequence['analyte_peptide_id']\n            ,$sequence['laboratories_id']\n          );\n\n          // Loop through, delete the files, and delete the corresponding database records.\n          foreach($file_names as $file)\n          {\n            // Files\n            if ( file_exists( $final_global_template_vars[\"panorama_images_storage_path\"] . $file[\"file_name\"] ) )\n            {\n              unlink( $final_global_template_vars[\"panorama_images_storage_path\"] . $file[\"file_name\"] );\n            }\n            // Data\n            $this->import_panorama_data->delete_data( 'panorama_validation_sample_images', $file[\"validation_sample_images_id\"] );\n          }\n\n          write_log($lab_data[\"import_log_id\"],'Deleting complete');\n\n        }\n\n        // Query Panorama peptide table for the data (modified_sequence and protein) using the peptide sequence\n        $peptide_data = $this->labkey->getPeptide(\n          $panorama_authentication_cookie\n          ,\"targetedms\"\n          ,\"Peptide\"\n          ,$sequence['peptide_sequence'] // <-------------\n          ,$sequence['laboratory_abbreviation']\n          ,$sequence['celllysate_path']\n          ,'ValidationSamples'\n        );\n\t\t\t\n        \n        \n\t\t\t\t\n\t\t\t\tif( isset($peptide_data->response) && !empty($peptide_data->response) ) {\n\n          $peptide_data = json_decode($peptide_data->response,true);\n\n\n          if( $peptide_data['rowCount'] > 0 )\n          {\n\n            $this_peptide = $peptide_data['rows'][0];\n\n            // Query Panorama precursor table for the \"Charge\" using the modified peptide id\n            $peptide_charge = $this->labkey->getPrecursorChargeData(\n              $panorama_authentication_cookie\n              ,\"targetedms\"\n              ,\"Precursor\"\n              ,$this_peptide['Id']\n              ,$sequence['laboratory_abbreviation']\n              ,$sequence['celllysate_path']\n              ,'ValidationSamples'\n            );\n\n            if( isset($peptide_charge->response) && !empty($peptide_charge->response) ) {\n             \n\n              $peptide_charge = json_decode($peptide_charge->response,true);\n              $modified_sequence = $this_peptide['PeptideModifiedSequence'];\n              $protein = $this_peptide['PeptideGroupId/Label'];\n              $charge = $peptide_charge['rows'][0][\"Charge\"];\n\n              // Query Panorama for validation sample image using the modified sequence, protein, and charge\n              $validation_sample_data = $this->labkey->getPeptideValidationSampleImage(\n                $panorama_authentication_cookie\n                ,$modified_sequence\n                ,$protein\n                ,$charge\n                ,$sequence['laboratory_abbreviation']\n                ,$sequence['celllysate_path']\n                ,'ValidationSamples'\n              );\n\n              if( isset($validation_sample_data->response) && !empty($validation_sample_data->response) ) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif( stristr($validation_sample_data->response,'Error executing command') == false ) {\n\n                  $validation_sample_image = explode('/',$validation_sample_data->response);\n\n                  // Log an error or insert into the database\n                  if(!isset($validation_sample_image[4])) \n                  {\n                    // Log the failed image retreival in the database\n                    $this_response = json_decode($validation_sample_data->response, true);\n                    if($this_response['html'] == '<div>Unable to display the specified report.</div>') {\n\n                      $result[\"errors\"][\"get_peptide_validation_sample\"][$i] = $sequence['peptide_modified_sequence'];\n\n                      // Insert into the database\n                      $this->import_panorama_data->panorama_validation_sample_images_failed(\n                         $lab_data[\"import_log_id\"]\n                        ,$sequence['analyte_peptide_id']\n                        ,$sequence['peptide_sequence']\n                        ,$sequence[\"peptide_modified_sequence\"]\n                        ,$sequence['laboratory_name']\n                        ,$sequence['laboratory_abbreviation']\n                        ,$this_response['html']\n                        ,$this_response[\"panoramaUrl\"]\n                      );\n                    }\n\n                  }\n                  else\n                  {\n                    $data = array();\n                    $data[\"import_log_id\"] = $lab_data[\"import_log_id\"];\n                    $data[\"analyte_peptide_id\"] = $sequence[\"analyte_peptide_id\"];\n                    $data[\"laboratory_id\"] = $sequence[\"laboratories_id\"];\n                    $data[\"sequence\"] = $sequence[\"peptide_modified_sequence\"];\n                    $data[\"file_name\"] = $validation_sample_image[4];\n\n                    // mail(\"lossm@mail.nih.gov\",\"FILE: \".$data[\"sequence\"], json_encode($validation_sample_image),\"From: server@cptac.cancer.gov\" );\n                    \n                    // Insert file data into the database\n                    $this->import_panorama_data->import_validation_sample_images( $data );\n                  }\n\n                } else {\n\n                  $result[\"errors\"][\"get_peptide_validation_sample\"][$i] = $sequence['peptide_sequence'];\n\n                  // Error returned from Panorama.\n                  // Log the error to the 'panorama_validation_sample_images_failed' table of the database.\n                  $this->import_panorama_data->panorama_validation_sample_images_failed(\n                     $lab_data[\"import_log_id\"]\n                    ,$sequence['analyte_peptide_id']\n                    ,$sequence['peptide_sequence']\n                    ,$sequence[\"peptide_modified_sequence\"]\n                    ,$sequence['laboratory_name']\n                    ,$sequence['laboratory_abbreviation']\n                    ,$validation_sample_data->response\n                    ,$validation_sample_data->panoramaUrl\n                  );\n                }\n\n              }\n\n            } else {\n\n              $result[\"errors\"][\"get_peptide_validation_sample_charge\"][$i] = $sequence['peptide_sequence'];\n\n              // Log the failed 'charge' retreival in the database\n              $this->import_panorama_data->panorama_validation_sample_images_failed(\n                 $lab_data[\"import_log_id\"]\n                ,$sequence['analyte_peptide_id']\n                ,$sequence['peptide_sequence']\n                ,$sequence[\"peptide_modified_sequence\"]\n                ,$sequence['laboratory_name']\n                ,$sequence['laboratory_abbreviation']\n                ,'Failed to retreive charge'\n                ,false\n              );\n            }\n\n          } else {\n\n            $result[\"errors\"][\"get_peptide_rows\"][$i] = $sequence['peptide_sequence'];\n\n            // Log the failed peptide retreival in the database\n            $this->import_panorama_data->panorama_validation_sample_images_failed(\n               $lab_data[\"import_log_id\"]\n              ,$sequence['analyte_peptide_id']\n              ,$sequence['peptide_sequence']\n              ,$sequence[\"peptide_modified_sequence\"]\n              ,$sequence['laboratory_name']\n              ,$sequence['laboratory_abbreviation']\n              ,'Unable to get peptide data (no rows returned)'\n              ,false\n            );\n          }\n        } else {\n\n          $result[\"errors\"][\"get_peptide_response\"][$i] = $sequence['peptide_sequence'];\n\n          // Log the failed peptide retreival in the database\n          $this->import_panorama_data->panorama_validation_sample_images_failed(\n             $lab_data[\"import_log_id\"]\n            ,$sequence['analyte_peptide_id']\n            ,$sequence['peptide_sequence']\n            ,$sequence[\"peptide_modified_sequence\"]\n            ,$sequence['laboratory_name']\n            ,$sequence['laboratory_abbreviation']\n            ,'Unable to get peptide data (no response returned)'\n            ,false\n          );\n        }\n\n        // Make sure we give Panorama enough time\n        usleep(500000);\n\n        $i++;\n        // if($i > 14) break;\n      }\n\n      return $result;\n  }\n\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":270,"column":27},"end":{"row":270,"column":27}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/models/validation_sample_images_import.class.php","digestWhenLastPersisted":"7602a5712b330f846a2815a5109fbcb8a5ef393e","preferredLineEnding":null,"nextMarkerId":349,"deserializer":"TextBuffer","version":5},{"id":"5f51c228b8347b458aa09e394daaf446","text":"{% extends layout_template_name %}\n{% block styles_head %}\n  {{ parent() }}\n  <link href=\"/assays/library/css/jquery.tagit.css\" rel=\"stylesheet\" type=\"text/css\" />\n{% endblock %}\n{% block content %}\n<div class=\"row-fluid\">\n  {% if errors %}\n    <div class=\"alert alert-block\">\n      <h4>Form Errors</h4>\n      {% for single_error in errors %}\n      <p>{{ single_error }}</p>\n      {% endfor %}\n    </div>\n  {% endif %}\n  <form method=\"POST\" enctype=\"multipart/form-data\" class=\"form-horizontal\">\n\n    <h4>Primary Investigators</h4>\n\n    <div class=\"alert alert-block alert-danger\">\n      <p><strong>* NOTE:</strong> This feature is not finished...</p>\n      <p><em>Names can be added, but they aren't inserted into the database.</em></p>\n    </div>\n\n    <div class=\"row-fluid\">\n      <div class=\"span12\">\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"primary_investigators\">Enter Full Names (First Last) <i class=\"icon-question-sign\" title=\"Hit the return/enter key to enter each Primary Investigator\"></i></label>\n          <div class=\"controls\">\n            <input id=\"select_primary_investigators\" name=\"primary_investigators\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <h4>Assay Details</h4>\n\n    <p class=\"text-info\"><i class=\"icon-info-sign\"></i> Laboratories are defined by user association</p>\n\n    <div class=\"row-fluid\">\n      <div class=\"span12\">\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"instrument\"><span class=\"color-red\">*</span>Instrument</label>\n          <div class=\"controls\">\n            <input name=\"instrument\" id=\"instrument\" type=\"text\" value=\"{{ data.instrument|e }}\" required=\"true\" >\n          </div>\n        </div>\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"matrix\"><span class=\"color-red\">*</span>Matrix</label>\n          <div class=\"controls\">\n            <input name=\"matrix\" id=\"matrix\" type=\"text\" value=\"{{ data.matrix|e }}\" required=\"true\">\n          </div>\n        </div>\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"matrix_amount_and_units\"><span class=\"color-red\">*</span>Matrix Amount (include units)</label>\n          <div class=\"controls\">\n            <input name=\"matrix_amount_and_units\" id=\"matrix_amount_and_units\" type=\"text\" value=\"{{ data.matrix_amount_and_units|e }}\" required=\"true\">\n          </div>\n        </div>\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"quantification_units\"><span class=\"color-red\">*</span>Quantification Units (e.g. fmol/ug)</label>\n          <div class=\"controls\">\n            <input name=\"quantification_units\" id=\"quantification_units\" type=\"text\" value=\"{{ data.quantification_units|e }}\" required=\"true\">\n          </div>\n        </div>\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"internal_standard\"><span class=\"color-red\">*</span>Internal Standard</label>\n          <div class=\"controls\">\n            <input name=\"internal_standard\" id=\"internal_standard\" type=\"text\" value=\"{{ data.internal_standard|e }}\" required=\"true\">\n          </div>\n        </div>\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"peptide_standard_purity\"><span class=\"color-red\">*</span>Peptide Standard Purity</label>\n          \n          <div class=\"controls\">\n            <select name=\"peptide_standard_purity_types_id\">\n              <option>Select</option>\n              {% for value in data.peptide_standard_purity_options %}\n                <option value=\"{{ value.peptide_standard_purity_types_id }}\" {{ (value.peptide_standard_purity_types_id == data.peptide_standard_purity_types_id) ? 'selected=\"selected\"' : '' }}>{{ value.type }}</option>\n              {% endfor %}\n            </select> \n        </div>\n      </div>\n      <div class=\"control-group\">\n        <label class=\"control-label\" for=\"protein_species_label\"><span class=\"color-red\">*</span>Target Organism</label>\n        <div class=\"controls\">\n          <input name=\"protein_species_label\" id=\"protein_species_label\" type=\"text\" value=\"{{ data.protein_species_label|e }}\">\n        </div>\n      </div>\n      <div class=\"control-group\">\n        <label class=\"control-label\" for=\"data_type\"><span class=\"color-red\">*</span>Data Type<br>\n          <span class=\"muted\">(e.g. MRM, PRM, SRM)</span>\n        </label>\n        <div class=\"controls\">\n          <input name=\"data_type\" id=\"data_type\" type=\"text\" value=\"{{ data.data_type|e }}\">\n        </div>\n      </div>\n    </div>\n\n    <hr>\n\n    <h4>Assay Parameters</h4>\n\n    <div class=\"row-fluid\">\n      <div class=\"span12\">\n\n        <div id=\"direct_mrm\" class=\"direct_mrm\">\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"lc\"><span class=\"color-red\">*</span>LC</label>\n            <div class=\"controls\">\n              <input name=\"lc\" id=\"lc\" type=\"text\" value=\"{{ data.lc|e }}\" required=\"true\">\n            </div>\n          </div>\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"column_packing\"><span class=\"color-red\">*</span>Column Packing</label>\n            <div class=\"controls\">\n              <input name=\"column_packing\" id=\"column_packing\" type=\"text\" value=\"{{ data.column_packing|e }}\" required=\"true\">\n            </div>\n          </div>\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"column_dimensions\"><span class=\"color-red\">*</span>Column Dimensions</label>\n            <div class=\"controls\">\n              <input name=\"column_dimensions\" id=\"column_dimensions\" type=\"text\" value=\"{{ data.column_dimensions|e }}\" required=\"true\">\n            </div>\n          </div>\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"column_temperature\"><span class=\"color-red\">*</span>Column Temperature</label>\n            <div class=\"controls\">\n              <input name=\"column_temperature\" id=\"column_temperature\" type=\"text\" value=\"{{ data.column_temperature|e }}\" required=\"true\">\n            </div>\n          </div>\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"flow_rate\"><span class=\"color-red\">*</span>Flow Rate</label>\n            <div class=\"controls\">\n              <input name=\"flow_rate\" id=\"flow_rate\" type=\"text\" value=\"{{ data.flow_rate|e }}\" required=\"true\">\n            </div>\n          </div>\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"mobile_phase_a\"><span class=\"color-red\">*</span>Mobile Phase A</label>\n            <div class=\"controls\">\n              <input name=\"mobile_phase_a\" id=\"mobile_phase_a\" type=\"text\" value=\"{{ data.mobile_phase_a|e }}\" required=\"true\">\n            </div>\n          </div>\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"mobile_phase_b\"><span class=\"color-red\">*</span>Mobile Phase B</label>\n            <div class=\"controls\">\n              <input name=\"mobile_phase_b\" id=\"mobile_phase_b\" type=\"text\" value=\"{{ data.mobile_phase_b|e }}\" required=\"true\">\n            </div>\n          </div>\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"gradient_description\"><span class=\"color-red\">*</span>Gradient Description<br>\n              <span class=\"muted\">Example:<br>\n                Time, %A, %B<br>\n                0, 95, 5<br>\n                1, 95, 5<br>\n                15, 60, 40</span>\n            </label>\n            <div class=\"controls\">\n              <textarea name=\"gradient_description\" id=\"gradient_description\" required=\"true\">{{ data.gradient_description|e }}</textarea>\n            </div>\n          </div>\n        </div>\n\n        <hr>\n\n        <h4>Assay Type</h4>\n        <p class=\"muted\">If not selected, assay will be set to 'direct'. Otherwise, select accordingly.</p>\n\n        <div class=\"control-group\">\n          <label for=\"assay_types_id\" style=\"display: none;\">Assay Type</label>\n          <select name=\"assay_types_id\" id=\"assay_type\">\n            <option value=\"3\">Select</option>\n            {% for single_assay_type in data.assay_types %}\n              {% set selected = '' %}\n              {% if data.assay_types_id == single_assay_type.assay_types_id %}\n                {% set selected = ' selected' %}\n              {% endif %}\n              <option value=\"{{ single_assay_type.assay_types_id }}\"{{ selected }}>{{ single_assay_type.label }}</option>\n            {% endfor %}\n          </select>\n        </div>\n\n        <div id=\"assay_types_controls\">\n\n          <div id=\"assay_type_1\" class=\"enrichment_mrm\" style=\"display:{{ data.assay_types_id == 1 ? 'block' : 'none' }};\">\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"enrichment_method\"><span class=\"color-red\">*</span>Enrichment Method\n                <i class=\"icon-question-sign\" title=\"Example: peptide immunoaffinity, protein immunoprecipitation, IMAC, depletion\"></i>\n              </label>\n              <div class=\"controls\">\n                <input name=\"enrichment_method\" id=\"enrichment_method\" type=\"text\" value=\"{{ data.enrichment_method|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"affinity_reagent_type\">Affinity Reagent Type\n                <i class=\"icon-question-sign\" title=\"Example: monoclonal Ab\"></i>\n              </label>\n              <div class=\"controls\">\n                <input name=\"affinity_reagent_type\" id=\"affinity_reagent_type\" type=\"text\" value=\"{{ data.affinity_reagent_type|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"antibody_vendor\"><span class=\"color-red\">*</span>Vendor\n                <i class=\"icon-question-sign\" title=\"Example: specific make/model\"></i>\n              </label>\n              <div class=\"controls\">\n                <input name=\"antibody_vendor\" id=\"antibody_vendor\" type=\"text\" value=\"{{ data.antibody_vendor|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"media\"><span class=\"color-red\">*</span>Media or Bead Type\n                <i class=\"icon-question-sign\" title=\"Example: make/model of magnetic beads, chromatography packing, etc. \"></i><br>\n                <span class=\"muted\">(include vendor)</span>\n              </label>\n              <div class=\"controls\">\n                <input name=\"media\" id=\"media\" type=\"text\" value=\"{{ data.media|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"antibody_portal_url\">Link to Antibody Portal\n                <i class=\"icon-question-sign\" title=\"Example: identifier of affinity reagent on antibody portal (if applicable)\"></i>\n              </label>\n              <div class=\"controls\">\n                <input name=\"antibody_portal_url\" id=\"antibody_portal_url\" type=\"text\" value=\"{{ data.antibody_portal_url|e }}\">\n              </div>\n            </div>\n          </div>\n\n          <div id=\"assay_type_2\" class=\"fraction_mrm\" style=\"display:{{ data.assay_types_id == 2 ? 'block' : 'none' }};\">\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"fractionation_approach\"><span class=\"color-red\">*</span>Fractionation Approach\n                <i class=\"icon-question-sign\" title=\"Example: bRP, SCX, etc.\"></i>\n              </label>\n              <div class=\"controls\">\n                <input name=\"fractionation_approach\" id=\"fractionation_approach\" type=\"text\" value=\"{{ data.fractionation_approach|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"column_material\"><span class=\"color-red\">*</span>Column Material</label>\n              <div class=\"controls\">\n                <input name=\"column_material\" id=\"column_material\" type=\"text\" value=\"{{ data.column_material|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"conditions\"><span class=\"color-red\">*</span>Conditions<br>\n                <span class=\"muted\">(e.g. Mobile Phases, Column Dimensions, Flow Rates, Gradient)</span></label>\n              <div class=\"controls\">\n                <input name=\"conditions\" id=\"conditions\" type=\"text\" value=\"{{ data.conditions|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"number_of_fractions_collected\"><span class=\"color-red\">*</span>Number of Fractions Collected</label>\n              <div class=\"controls\">\n                <input name=\"number_of_fractions_collected\" id=\"number_of_fractions_collected\" type=\"text\" value=\"{{ data.number_of_fractions_collected|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"number_of_fractions_analyzed\"><span class=\"color-red\">*</span>Number of Fractions Analyzed</label>\n              <div class=\"controls\">\n                <input name=\"number_of_fractions_analyzed\" id=\"number_of_fractions_analyzed\" type=\"text\" value=\"{{ data.number_of_fractions_analyzed|e }}\">\n              </div>\n            </div>\n            <div class=\"control-group\">\n              <label class=\"control-label\" for=\"fraction_combination_strategy\"><span class=\"color-red\">*</span>Fraction Combination Strategy\n                <i class=\"icon-question-sign\" title=\"Example: serial, concatenated, etc.\"></i>\n              </label>\n              <div class=\"controls\">\n                <input name=\"fraction_combination_strategy\" id=\"fraction_combination_strategy\" type=\"text\" value=\"{{ data.fraction_combination_strategy|e }}\">\n              </div>\n            </div>\n          </div>\n\n        </div>\n\n      </div>\n    </div>\n\n    <hr>\n\n    <h4>Panorama Directory</h4>\n\n    <div class=\"row-fluid\">\n      <div class=\"span12\">\n        <div class=\"control-group\">\n          <label class=\"control-label\" for=\"celllysate_path\"><span class=\"color-red\">*</span>Directory Name<br>\n            <span class=\"muted\">Example (in bold, no slashes):<br>\n              https://daily.panoramaweb.org/\n              labkey/project/\n              CPTAC%20Assay%20Portal/\n              FHCRC_Paulovich/\n              <strong>CellLysate_5500QTRAP_directMRM</strong>/</span>\n          </label>\n          <div class=\"controls\">\n            <input name=\"celllysate_path\" id=\"celllysate_path\" type=\"text\" value=\"{{ data.celllysate_path|e }}\" required=\"true\" >\n          </div>\n        </div>\n      </div>\n    </div>\n\n    {% if data.sop_files %}\n      <hr>\n      <h4>Existing SOP Files</h4>\n      {% for single_sop_file in data.sop_files %}\n        <div id=\"sop_file_div_{{ single_sop_file.sop_files_id }}\" class=\"sop_single_file_container\">\n          <span class=\"icon-eye-open\"></span> <strong>{{ single_sop_file.label }}:</strong> <a href=\"{{ path_to_this_module }}/download_file?file_id={{ single_sop_file.sop_files_id }}\" title=\"Download {{ single_sop_file.file_name }}\" class=\"download-file\">{{ single_sop_file.file_name }}</a> <span class=\"icon-trash\" style=\"margin-left:12px;\"></span> <a href=\"javascript:void(0);\" data-sop-id=\"{{ i }}\" data-sop-file-id=\"{{ single_sop_file.sop_files_id }}\" class=\"sop_delete_link\" title=\"Remove {{ single_sop_file.file_name }}\">remove</a>\n        </div>\n      {% endfor %}\n    {% endif %}\n\n    <hr>\n\n    <h4>Upload SOP Files</h4>\n    <p class=\"muted\">Multiple file uploads are allowed</p>\n    <p><a href=\"/sop-template/\" target=\"_blank\">Download the SOP Template</a> <span class=\"muted\">(Word Document)</span>\n\n    <div id=\"sop_files_container\" class=\"row-fluid\">\n      <input\n        type=\"file\"\n        name=\"files[]\"\n        id=\"fileupload\"\n        class=\"span6\"\n        data-url=\"{{ path_to_this_module }}/process_file_upload\"\n        multiple\n      >\n      <div id=\"uploading_notification_container\" class=\"span6\">\n        <div class=\"uploading\"><p class=\"uploading-text\">Uploading&hellip;</p>\n          <div id=\"progress\" class=\"progress progress-success\">\n            <div class=\"bar\" style=\"width: 0%;\"></div>\n          </div>\n        </div>\n      </div>\n      {% if data.uploaded_files %}\n        {% for single_uploaded_file in data.uploaded_files %}\n          <div class=\"row-fluid file-controls-wrapper\">\n            <div id=\"sop_file_type_menu_div_{{ single_uploaded_file.sop_files_id }}\" class=\"sop-file-type-menu span6\">\n              <div class=\"sop_types_menu_template\">\n                <a href=\"javascript:void(0);\" data-sop-file-id=\"{{ single_uploaded_file.sop_files_id }}\" class=\"delete_file_pre_post_link\" title=\"Remove this SOP file\"><span class=\"icon-trash\" style=\"margin-right:10px;\"></span></a>\n                <select\n                  id=\"sop_file_type_{{ single_uploaded_file.sop_files_id }}\" \n                  name=\"sop_file_types[]\" \n                  class=\"sop_type_menu\" \n                  data-sop-file-id=\"{{ single_uploaded_file.sop_files_id }}\" \n                  required=\"true\">\n                  <option value=\"\">Select SOP Category</option>\n                  {% for single in data.sop_file_types %}\n                    {% if single_uploaded_file.sop_file_type_id == single.sop_file_type_id %}\n                      {% set selected = \" selected\" %}\n                    {% else %}\n                      {% set selected = \"\" %}\n                    {% endif %}\n                    <option value=\"{{ single.sop_file_type_id }}\"{{ selected }}>{{ single.label }}</option>\n                  {% endfor %}\n                </select>\n              </div>\n            </div>\n            <div class=\"single-file-wrapper span6\">\n              <span class=\"icon-check\"></span> \n              <a href=\"{{ path_to_this_module }}/download_file?file_id={{ single_uploaded_file.sop_files_id }}\" \n                class=\"single-file download-file\" \n                title=\"View/download {{ single_uploaded_file.file_name }}\" \n                target=\"_blank\">{{ single_uploaded_file.file_name }}</a>\n              <input type=\"hidden\" name=\"uploaded_files[]\" value=\"{{ single_uploaded_file.sop_files_id }}\">\n            </div>\n          </div>\n        {% endfor %}\n      {% endif %}\n    </div>\n\n    <div id=\"duplicateSopFileTypeAlert\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"duplicateSopFileType\" aria-hidden=\"true\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n        <h3 id=\"duplicateSopFileType\">Category Already Chosen</h3>\n      </div>\n      <div class=\"modal-body\">\n        <p>This category has already been chosen. Please choose a different category.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button class=\"btn btn-primary\" data-dismiss=\"modal\" aria-hidden=\"true\">OK</button>\n      </div>\n    </div>\n\n    {% if data.publications %}\n      <hr>\n      <h4>Existing Publications</h4>\n      {% for single_publication in data.publications %}\n        <div id=\"publication_div_{{ single_publication.publications_id }}\" class=\"publication_single_container\">\n          <p>{{ single_publication.publication_citation | raw }}</p>\n          <p>\n            <span class=\"icon-eye-open\"></span> \n            <a href=\"{{ single_publication.publication_url | raw }}\" \n              title=\"View URL\"\n              target=\"_blank\">View URL</a>\n            <span class=\"icon-trash\" style=\"margin-left:12px;\"></span> \n            <a href=\"javascript:void(0);\" \n              data-publication-id=\"{{ single_publication.publications_id }}\"\n              class=\"publication_delete_link\" \n              title=\"Remove this publication\">Remove</a>\n          </p>\n        </div>\n      {% endfor %}\n    {% endif %}\n\n    <hr>\n\n    <h4>Add Publications</h4>\n\n    <div id=\"publications_container\" class=\"row-fluid\">\n      <div id=\"publication_div\" class=\"publication_container\">\n\n      </div>\n      <button\n        type=\"button\"\n        name=\"add\"\n        class=\"btn btn-small publication_button add_publication\"\n        title=\"Add a Publication\"\n        id=\"add_publication_button\"><i class=\"icon-plus-sign\"></i> Add a Publication</button>\n    </div>\n\n    <hr>\n\n    <div class=\"row-fluid\">\n      <div id=\"submit_button_container\" class=\"span12\">\n        <div class=\"control-group\">\n          <input name=\"import_log_id\" type=\"hidden\" value=\"{{ data.import_log_id|e }}\">\n          <input class=\"btn btn-primary\" type=\"submit\" value=\"Submit Import Metadata\" >\n          {% if data.assay_parameters_id %}\n            <a href=\"{{ path_to_this_module }}/execute/?import_log_id={{ data.import_log_id|e }}\" class=\"btn btn\">Manage and Execute Imports</a>\n          {% endif %}\n          <a href=\"{{ path_to_this_module }}/\" class=\"btn btn-link\">Back to Browse Imports</a>\n        </div>\n      </div>\n    </div>\n\n  </form>\n</div>\n{% endblock %}\n{% block js_bottom %}\n  {{ parent() }}\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js\"></script>\n  <script src=\"/site/library/js/jQuery-File-Upload/js/vendor/jquery.ui.widget.js\"></script>\n  <script src=\"/site/library/js/jQuery-File-Upload/js/jquery.iframe-transport.js\"></script>\n  <script src=\"/site/library/js/jQuery-File-Upload/js/jquery.fileupload.js\"></script>\n  <script src=\"//ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js\" charset=\"utf-8\"></script>\n  <script src=\"/assays/library/js/tag-it.js\"></script>\n\n  <script id=\"single_publication_template\" type=\"text/template\">\n    <div class=\"single_publication_template\">\n      <div class=\"control-group\">\n        <label class=\"control-label\" for=\"publication_citation\"><span class=\"color-red\">*</span>Publication Citation</label>\n        <div class=\"controls\">\n          <textarea\n            name=\"publication_citation[]\"\n            id=\"publication_citation_<%- publication_id %>\"\n            required=\"true\"\n            class=\"editor\"><%- publication_citation %></textarea>\n        </div>\n      </div>\n      <div class=\"control-group\">\n        <label class=\"control-label\" for=\"publication_url\"><span class=\"color-red\">*</span>Publication URL<br><span class=\"muted\">(include http://)</span></label>\n        <div class=\"controls\">\n          <input\n            type=\"text\"\n            name=\"publication_url[]\"\n            id=\"publication_url_<%- publication_id %>\"\n            class=\"publication-url\"\n            required=\"true\"\n            value=\"<%- publication_url %>\"\n          >\n        </div>\n      </div>\n      <button\n        type=\"button\"\n        name=\"remove\"\n        class=\"btn btn-small remove_publication_block\"\n        title=\"Remove Publication\"><i class=\"icon-remove\"></i>Remove</button>\n    </div>\n  </script>\n\n  <script id=\"sop_types_menu_template\" type=\"text/template\">\n    <div class=\"sop_types_menu_template\">\n      <a href=\"javascript:void(0);\" data-sop-file-id=\"<%- sop_file_id %>\" class=\"delete_file_pre_post_link\" title=\"Remove this SOP file\"><span class=\"icon-trash\" style=\"margin-right:10px;\"></span></a>\n      <select id=\"sop_file_type_<%- sop_file_id %>\" name=\"sop_file_types[]\" class=\"sop_type_menu\" data-sop-file-id=\"<%- sop_file_id %>\" required=\"true\">\n        <option value=\"\">Select SOP Category</option>\n        <% if (typeof(sop_file_types) === 'object') { %>\n          <% sop_file_types.forEach(function(single) { %>\n            <option value=\"<%- single.sop_file_type_id %>\"><%- single.label %></option>\n          <% }); %>\n        <% } %>\n      </select>\n    </div>\n  </script>\n\n  <script type=\"text/javascript\">\n\n    $(document).ready(function(){\n\n      /*\n       * Primary Investigators\n       */\n\n      $(\"#select_primary_investigators\").tagit({\n        removeConfirmation: true,\n        maxLength: 6,\n        allowSpaces: true\n        // ,\n        // afterTagAdded: function(event, ui) {\n        //   $('#browse_table').dataTable().fnDraw();\n        // },\n        // afterTagRemoved: function(event, ui) {\n        //   $('#browse_table').dataTable().fnDraw();\n        // }\n      });\n\n      /*\n       * Publications\n       */\n\n      var submitted_publications = JSON.parse('{{ data.submitted_publications|json_encode|raw }}');\n\n      // Add a new publication record block.\n      $(\"form\").on(\"click\", \"#add_publication_button\", function(event){\n        add_publication_block();\n      });\n\n      // Return submitted publications on failed validations.\n      if(submitted_publications) {\n        $.each(submitted_publications, function (index, publication_data) {\n          add_publication_block(\n              publication_data.publication_citation\n            , publication_data.publication_url\n          );\n        });\n      }\n\n      // Remove existing publication record block.\n      $(\"form\").on(\"click\", \".remove_publication_block\", function(event){\n        if( confirm('Are you sure you want to remove this Publication?') )\n        {\n          $(this).parent('.single_publication_template').fadeOut(300);\n        }\n      });\n      // Remove submitted publication record block.\n      $(\"form\").on(\"click\", \".remove_submitted_publication_block\", function(event){\n        if( confirm('Are you sure you want to remove this Publication?') )\n        {\n          $(this).parent('.publication_single_container').fadeOut(300);\n        }\n      });\n\n      // Delete one publication.\n      $(\"form\").on(\"click\", \".publication_delete_link\", function(event){\n        var publication_id = $(this).attr('data-publication-id');\n        if( confirm('Are you sure you want to remove this publication?') ) {\n          $.ajax({\n            type: \"POST\"\n            ,dataType: \"json\"\n            ,url: \"{{ path_to_this_module }}/delete_publication/\"\n            ,data: ( {publication_id: publication_id} )\n            ,success: function(ajax_return) {\n              $('#publication_div_'+publication_id).fadeOut(300);\n            }\n          });\n        }\n      });\n\n      /*\n       * Assay Types\n       */\n\n      var assay_types_id = \"{{ data.assay_types_id }}\";\n\n      // Toggle the visibility of assay type form field containers.\n      $('#assay_type').on('change', function(element) {\n        var this_assay_type_id = $(this).val();\n        if(this_assay_type_id.length) {\n          $('#assay_types_controls').css('height', '360px');\n        } else {\n          $('#assay_types_controls').removeAttr('style');\n        }\n        $('div[id^=\"assay_type_\"]').fadeOut('fast');\n        setTimeout(function(){\n          $('#assay_type_'+this_assay_type_id).fadeIn();\n        },500);\n      });\n\n      /*\n       * SOP File uploads using the jQuery-File-Upload plugin.\n       */\n\n      var file_count = 0;\n      var sop_file_types = JSON.parse('{{ data.sop_file_types|json_encode|raw }}');\n      var existing_sop_files = JSON.parse('{{ data.sop_files|json_encode|raw }}');\n      \n      $('#fileupload').fileupload({\n\n          dataType: 'json',\n          progressall: function (e, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            $('.uploading').fadeIn(100);\n            $('#progress .bar').css('width', progress + '%');\n            $('#progress').fadeIn(100);\n          },\n          done: function (e, data) {\n\n            $.each(data.result, function (index, file) {\n\n              $.ajax({\n                type:\"POST\"\n                ,dataType:\"json\"\n                ,url: \"{{ path_to_this_module }}/insert_sop_file/\"\n                ,data: ( {file_data: file} )\n                ,success: function(ajax_return){\n\n                  var row_fluid = $('<div />').attr('class', 'row-fluid file-controls-wrapper');\n\n                  if(ajax_return) {\n                    var hidden_input = $('<input />').attr('type', 'hidden').attr('name', 'uploaded_files[]').attr('value', ajax_return);\n                    var sop_file_type_menu_div = $('<div />').attr('id', 'sop_file_type_menu_div_'+ajax_return).attr('class', 'sop-file-type-menu span6');\n                    $(row_fluid).append( sop_file_type_menu_div );\n                    $(row_fluid).append('<div class=\"single-file-wrapper span6\"><span class=\"icon-eye-open\"></span> <a href=\"{{ sop_file_upload_directory }}'+file.internal_file_name+'\" class=\"single-file download-file\" title=\"View/download '+file.name+'\" target=\"_blank\">'+file.name+'</a></div>');\n                    $(row_fluid).append( hidden_input );\n                    $('#uploading_notification_container').after( row_fluid );\n\n                    add_sop_file_type_menu_block( ajax_return, sop_file_types )\n\n                  } else {\n                    $('#fileupload').after('<div class=\"single-file-wrapper\"><span class=\"icon-exclamation-sign\"></span> An error occurred. If this error persits, please <a href=\"/support/\">contact the administrator.</div>');\n                  }\n\n                }\n              });\n\n            });\n            $('.uploading-text').text('Upload completed');\n            setTimeout(function() {\n              $('.uploading').fadeOut(1000);\n              $('#progress').fadeOut(1000);\n            }, 2000 );\n            file_count = (file_count + 1);\n          }\n\n      });\n\n      // Delete one SOP file.\n      $(\"form\").on(\"click\", \".sop_delete_link\", function(event){\n        var file_id = $(this).attr('data-sop-file-id');\n        if( confirm('Are you sure you want to remove this SOP file?') ) {\n          $.ajax({\n            type: \"POST\"\n            ,dataType: \"json\"\n            ,url: \"{{ path_to_this_module }}/delete_file/\"\n            ,data: ( {file_id: file_id} )\n            ,success: function(ajax_return) {\n              $('#sop_file_div_'+file_id).fadeOut(300);\n            }\n          });\n        }\n      });\n\n      // Delete one SOP file pre-post.\n      $(\"form\").on(\"click\", \".delete_file_pre_post_link\", function(event){\n        var this_link = $(this);\n        var file_id = $(this).attr('data-sop-file-id');\n        if( confirm('Are you sure you want to remove this SOP file?') ) {\n          $.ajax({\n            type: \"POST\"\n            ,dataType: \"json\"\n            ,url: \"{{ path_to_this_module }}/delete_file_pre_post/\"\n            ,data: ( {file_id: file_id} )\n            ,success: function(ajax_return) {\n              $(this_link).parent().parent().parent().fadeOut(300);\n              $(this_link).parent().parent().parent().remove();\n            }\n          });\n        }\n      });\n\n      /*\n       * Update SOP File Type IDs in the sop_files table.\n       */\n\n      $(\"form\").on(\"change\", \".sop_type_menu\", function(event){\n        var all_selected_ids = [];\n        var sop_file_id = $(this).attr('data-sop-file-id');\n        var sop_file_type_id = $(this).val();\n        var all_selects = $('#sop_files_container .file-controls-wrapper .sop-file-type-menu .sop_types_menu_template').find('select');\n        // Place all of the selected sop_file_type_ids into an array.\n        if(all_selects.length > 0) {\n          $.each(all_selects, function (index, single_select) {\n            if($(single_select).val().length > 0) {\n              all_selected_ids.push( $(single_select).val() );\n            }\n          });\n        }\n        // Place all sop_file_type_ids which have been associated to existing uploaded files into an array.\n        if(existing_sop_files) {\n          $.each(existing_sop_files, function (index, single_sop_file) {\n            if(single_sop_file.sop_file_type_id.length) {\n              all_selected_ids.push( single_sop_file.sop_file_type_id );\n            }\n          });\n        }\n        // Check the array for duplicates, and throw an alert if a duplicate sop_file_type_id is found.\n        var duplicates_found = contains_duplicates( all_selected_ids );\n        if( duplicates_found ) {\n          $('#duplicateSopFileTypeAlert').modal();\n          $(this).val('');\n        } else {\n          $.ajax({\n            type: \"POST\"\n            ,dataType: \"json\"\n            ,url: \"{{ path_to_this_module }}/update_sop_file_type_id/\"\n            ,data: ( {sop_file_id: sop_file_id, sop_file_type_id: sop_file_type_id} )\n            ,success: function(ajax_return) {\n              // Do nothing.\n            }\n          });\n        }\n      });\n\n      /*\n       * Tooltips\n       */\n\n      $(\".icon-question-sign\").tooltip();\n      $(\".delete_file_pre_post_link\").tooltip();\n\n    });\n\n    /*\n     * Functions\n     */\n    \n    // Underscore-based add Publication block function.\n    function add_publication_block( publication_citation, publication_url ) {\n      var publication_container_id = _.uniqueId();\n      var publication_template = _.template($(\"#single_publication_template\").html());\n      var publication_markup = publication_template({\n          \"publication_id\":publication_container_id\n        , \"publication_citation\":publication_citation\n        , \"publication_url\":publication_url\n      });\n      $(\"#publication_div\").append(publication_markup);\n    }\n\n    // Underscore-based add SOP File Type Menu block function.\n    function add_sop_file_type_menu_block( sop_file_id, sop_file_types ) {\n      var sop_file_type_menu_container_id = _.uniqueId();\n      var sop_file_type_menu_template = _.template($(\"#sop_types_menu_template\").html());\n      var sop_file_type_menu_markup = sop_file_type_menu_template({\n          \"sop_file_type_menu_id\":sop_file_type_menu_container_id\n        , \"sop_file_id\":sop_file_id\n        , \"sop_file_types\":sop_file_types\n      });\n      $(\"#sop_file_type_menu_div_\"+sop_file_id).append(sop_file_type_menu_markup);\n    }\n\n    // Check an array for duplicate values.\n    function contains_duplicates( a ) {\n      var i=a.length;\n      var a2, o, j;\n      while (i--) {\n        a2 = a.slice(0,i).concat(a.slice(i+1,a.length));\n        o = {};\n        j = a2.length;\n        while (j--) {\n          o[a2[j]] = '';\n        }\n        if (a[i] in o) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n  </script>\n{% endblock %}","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":57,"column":10},"end":{"row":57,"column":10}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/templates/insert_update.php","digestWhenLastPersisted":"0481d9ddd28ce691f2ef33591973befb38603784","preferredLineEnding":null,"nextMarkerId":74,"deserializer":"TextBuffer","version":5},{"id":"0d7d810e204a829a08113dc04e23f05f","text":"{% extends layout_template_name %}\n{% block styles_head %}\n  {{ parent() }}\n  <link href=\"/site/library/css/styles.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"/assays/library/css/styles.css\" rel=\"stylesheet\" type=\"text/css\" />\n{% endblock %}\n{% block content %}\n{% include 'secondary_navigation.php' %}\n<div id=\"genSlotMainNav\">\n  {% include 'top_navigation.php' %}\n</div>\n<div class=\"row-outer row-outer-details\">\n\n  <h3>{{ page_title }}</h3>\n\n  <div class=\"row-fluid\" style=\"clear:both;\">\n    {% if flash['success'] %}\n      <div class=\"alert alert-success\">\n        {{ flash['success'] }}\n      </div>\n    {% endif %}\n\n    <div class=\"span12\">\n      <h4>Query name: Peptide</h4>\n      <hr>\n      {% for key, field in data %}\n        {% for k, f in field %}\n          <dl>\n          <dt>{{ k }}</dt>\n          <dd>{{ f }}</dd>\n        </dl>\n        {% endfor %}\n      {% endfor %}\n    </div>\n\n  </div>\n</div>\n\n{% endblock %}\n{% block js_head %}\n  {{ parent() }}\n\n{% endblock %}\n{% block js_bottom %}\n  {{ parent() }}\n\n{% endblock %}","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"4":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"5":{"range":{"start":{"row":0,"column":33},"end":{"row":0,"column":34}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/get_panorama_data.php","digestWhenLastPersisted":"bbe37f6ed5d6e10219285c0bd2f55ce4dbe373bd","preferredLineEnding":null,"nextMarkerId":6,"deserializer":"TextBuffer","version":5},{"id":"c0a5b85e94e2a0180182633391539dfb","text":"{% extends layout_template_name %}\n{% block meta_tags %}\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"title\" content=\"The CPTAC Assay Portal\">\n  <meta name=\"description\" content=\"A community web-based repository for well-characterized quantitative targeted proteomics assays.\">\n  <meta name=\"keywords\" content=\"cancer, assay, protein, gene, peptide, sequence, characterized, tumor, normal tissue, biospecimens, genomic, proteomic, data, analysis, discovery, biomarker, testing, verification, uniprot, panorama, entrez\">\n  <meta name=\"author\" content=\"ABCC's Scientific Web Programming Group, Frederick National Laboratory for Cancer Research (FNLCR)\">\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n{% endblock %}\n{% block styles_head %}\n  {{ parent() }}\n  <link href=\"//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css\" rel=\"stylesheet\">\n  <link href=\"/{{ core_type }}/javascripts/DataTables-SWPG/css/bootstrap_datatables.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"/{{ core_type }}/javascripts/DataTables-1.9.0/extras/ColVis/media/css/ColVis.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"/site/library/css/styles.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"{{ path_to_this_module }}/library/css/jquery.tagit.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"//cdnjs.cloudflare.com/ajax/libs/chosen/1.0/chosen.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"/assays/library/css/styles.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"//cdnjs.cloudflare.com/ajax/libs/bootstrap-tour/0.7.3/css/bootstrap-tour.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"{{ path_to_this_module }}/library/js/TableTools-2.1.4/media/css/TableTools.css\" rel=\"stylesheet\" type=\"text/css\" />\n{% endblock %}\n{% block content %}\n\n{% include 'secondary_navigation.php' %}\n\n<div id=\"genSlotMainNav\">\n  {% include 'top_navigation.php' %}\n</div>\n<div class=\"row-outer\">\n\n  <div class=\"contentid slot-item only-SI pull-left\">\n    <h1>Assay Portal</h1>\n  </div>\n  <div class=\"cptc-certified-logo pull-left\">\n    <img src=\"/cms/wp-content/uploads/2013/09/CPTAC_logo_101x101.gif\" width=\"101\" height=\"101\" alt=\"CPTAC logo\">\n  </div>\n  <div class=\"page-title\">\n  </div>\n  <div class=\"row-fluid\" style=\"clear:both;\">\n    {% if flash['success'] %}\n      <div class=\"alert alert-success\">\n        {{ flash['success'] }}\n      </div>\n    {% endif %}\n\n    {% for single_datatable in datatables %}\n\n  <div id=\"sidebar_nav\" class=\"span2\">\n    <h4>Search the Assay Database by:</h4>\n    <a href=\"javascript:void(0);\" id=\"clear_all\"><i class=\"icon-remove\"></i> Clear All Filters</a> \n    <div id=\"kegg_filter\" class=\"well sidebar-nav\">\n      \n      <ul class=\"nav nav-list\">\n\n        {# -------------------------\n        <li class=\"nav-header\">Gene Ontology</li>\n        <li>\n          <select class=\"multiselect single_sidebar_filter\" data-filter_handle=\"gene_ontology_filter\" multiple=\"multiple\" id=\"select_gene_ontology\">\n          {% for single_gene_ontology in gene_ontology %}\n            <option value=\"{{ single_gene_ontology.gene_ontology_id }}\">{{ single_gene_ontology.name }}</option>\n          {% endfor %}\n          </select>\n        </li>\n        <li><hr></li>\n        ------------------------- #}\n\n        <li class=\"nav-header\">KEGG Pathways</li>\n        <li>\n          <select id=\"kegg_select\" data-placeholder=\"Select\" multiple class=\"chosen-select\" style=\"width:130px;\">\n            {% for single_kegg_data in kegg_data %}\n\n              {% set parent_class = '' %}\n              {% set disabled = '' %}\n              {% if single_kegg_data.indent == '--' %}\n                {% set parent_class = ' class=parent' %}\n                {% set disabled = ' disabled' %}\n              {% endif %}\n              {% if single_kegg_data.indent == '' %}\n                {% set parent_class = ' class=parent' %}\n                {% set disabled = ' disabled' %}\n              {% endif %}\n\n              <option value=\"{{ single_kegg_data.kegg_id }}\"{{ parent_class }}{{ disabled }}>{{ single_kegg_data.indent }}{{ single_kegg_data.name }}</option>\n            {% endfor %}\n\n          </select>\n        </li>\n        <li class=\"muted\">Data Source: <a href=\"http://www.genome.jp/kegg/pathway.html\" target=\"_blank\">KEGG</a></li>\n      </ul>\n    </div>\n\n    <div id=\"cromosome_filter\" class=\"well sidebar-nav\">\n      <ul class=\"nav nav-list\">\n        <li class=\"nav-header\">Find assays to proteins encoded in a specific chromosomal region</li>\n        <li class=\"nav-header\">Chromosome Number</li>\n        <li>\n          <select class=\"multiselect single_sidebar_filter\" data-filter_handle=\"cromosome_filter\" multiple=\"multiple\" id=\"select_cromosome\">\n             <!-- <option value=\"0\">None</option> -->\n            {% for single_chromosome_number in chromosome_numbers %}\n              <option value=\"{{ single_chromosome_number }}\">{{ single_chromosome_number }}</option>\n            {% endfor %}\n          </select>\n          <i class=\"icon-question-sign\" title=\"e.g. 1-22\"></i>\n        </li>\n\n        <li class=\"nav-header\">Chromosomal Location</li>\n        <li>\n          <input type=\"text\" class=\"single_sidebar_filter select_cromosomal_location\" data-filter_handle=\"cromosomal_location_start_filter\" placeholder=\"Start\" id=\"cromosomal_location_start\">\n          <i class=\"icon-question-sign\" title=\"e.g. 8768444\"></i>\n        </li>\n        <li>\n          <input type=\"text\" class=\"single_sidebar_filter select_cromosomal_location\" data-filter_handle=\"cromosomal_location_stop_filter\" placeholder=\"Stop\" id=\"cromosomal_location_stop\">\n          <i class=\"icon-question-sign\" title=\"e.g. 8878432\"></i>\n        </li>\n        <li class=\"muted\">Data Source: CPTAC Assay Database</li>\n      </ul>\n    </div>\n\n    <div id=\"protein_interaction_filter\" class=\"well sidebar-nav\">\n      <ul class=\"nav nav-list\">\n        <li class=\"nav-header\">Find assays to quantify proteins that interact with the following protein(s):</li>\n        <li>\n          <input data-filter_handle=\"protein_interactions_filter\" id=\"select_protein_interactions\" name=\"protein_interactions\">\n        </li>\n        <li class=\"muted\">Data Source: <a href=\"http://thebiogrid.org/\" target=\"_blank\">BioGRID</a></li>\n      </ul>\n    </div>\n\n    <div class=\"well sidebar-nav\">\n      <ul class=\"nav nav-list\">\n        <li class=\"nav-header\">Find assays that work in a particular species</li>\n        <li>\n          <select class=\"multiselect single_sidebar_filter\" data-filter_handle=\"species_filter\" multiple=\"multiple\" id=\"select_species\">\n          {% for single_protein_species in protein_species %}\n            <option value=\"{{ single_protein_species.protein_species_id }}\">{{ single_protein_species.protein_species_label }}</option>\n          {% endfor %}\n          </select>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"well sidebar-nav\">\n      <ul class=\"nav nav-list\">\n        <li class=\"nav-header\">Assay Type</li>\n        <li>\n          <select class=\"multiselect single_sidebar_filter\" data-filter_handle=\"assay_type_filter\" multiple=\"multiple\" id=\"select_assay_type\">\n          {% for single_assay_type in assay_types %}\n            <option value=\"{{ single_assay_type.assay_type }}\">{{ single_assay_type.assay_type }}</option>\n          {% endfor %}\n          </select>\n        </li>\n      </ul>\n    </div>\n\n    <div id=\"tour_button_container\" class=\"well sidebar-nav\">\n      <ul class=\"nav nav-list\">\n        <li class=\"nav-header\">Guided Tour</li>\n        <li>Need help? Take a guided tour.</li>\n        <li><button class=\"btn btn-inverse\"><i class=\"icon-hand-right\"></i> Start Tour</button></li>\n      </ul>\n    </div>\n\n  </div><!--/span-->\n\n      <div id=\"browse_table_wrapper\" class=\"span10\">\n        <table id=\"browse_table\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"table table-bordered\">\n          <thead>\n            <tr>\n              {% for key, field in single_datatable.fields %}\n                <th><div class=\"th_header_text\">{{ field.label }}</div>\n                  {% if field.filter %}\n                    <div class=\"filter_wrapper {% if field.filter_type == 'select' %} filter_wrapper_select {% endif %}\">\n                      {% if field.filter_type == 'select' %}\n                        <select name=\"{{ key }}_value\" class=\"filter_value\">\n                        <option value=\"\">Select..</option>\n                        {% for single_option in field.filter_type_options %}\n                          <option value=\"{{ single_option.reagent_types_id }}\">{{ single_option.label }}</option>\n                        {% endfor %}\n                      </select>\n                    {% else %}\n                      <input type=\"text\" name=\"{{ key }}_value\" class=\"filter_value\">\n                      {% endif %}\n                      <div class=\"filter_image\" data-data_type=\"{{ field.data_type }}\" id=\"{{ key }}\"></div>\n                      <input type=\"hidden\" class=\"comparison_value\" id=\"{{ key }}_filter_value\" value=\"{{ field.comparison_default }}\">\n                    </div>\n                {% endif %}\n              </th>\n                {% endfor %}\n            </tr>\n          </thead>\n        </table>\n      </div>\n    {% endfor %}\n  </div>\n</div>\n{% endblock %}\n{% block js_bottom %}\n  {{ parent() }}\n  <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/datatables/1.9.4/jquery.dataTables.min.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/javascripts/DataTables-SWPG/js/datatables_bootstrap.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/javascripts/DataTables-SWPG/js/context_menu.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/javascripts/DataTables-1.9.0/extras/ColVis-1.0.8/media/js/ColVis.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/javascripts/DataTables-SWPG/js/fnGetTds.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/javascripts/DataTables-SWPG/js/fnFilterClear.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/javascripts/jquery-cookie/jquery.cookie.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/slim_framework/plugins/bootstrap-multiselect/bootstrap-multiselect/js/bootstrap-multiselect.js\"></script>\n  <script type=\"text/javascript\" src=\"/{{ core_type }}/javascripts/DataTables-SWPG/js/jquery.dataTables.rowGrouping.js\"></script>\n  <script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js\" charset=\"utf-8\"></script>\n  <script type=\"text/javascript\" src=\"{{ path_to_this_module }}/library/js/tag-it.js\"></script>\n  <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/chosen/1.0/chosen.jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/bootstrap-tour/0.7.3/js/bootstrap-tour.min.js\"></script>\n  <script type=\"text/javascript\" src=\"{{ path_to_this_module }}/library/js/TableTools-2.1.4/media/js/TableTools.min.js\"></script>\n\n  <script type=\"text/javascript\">\n      $(document).ready(function() {\n\n        $('#show_side_nav').remove();\n\n        var datatables_data = JSON.parse('{{ datatables|json_encode|raw }}');\n\n        $.each(datatables_data, function(index, single_datatable){\n          var sortable_fields = single_datatable.fields;\n          var total_columns = new Array();\n          var hidden_columns = new Array();\n          var exclude_columns_for_hiding = new Array();\n\n          var user_updated_visible_columns = $.cookie(\"browse_table_column_cookie\");\n          if(typeof user_updated_visible_columns === \"undefined\" || user_updated_visible_columns === null){\n            user_updated_visible_columns = {};\n          }else{\n            user_updated_visible_columns = JSON.parse(user_updated_visible_columns);\n          }\n          var counter = 0;\n          $.each(sortable_fields, function(index, field_data){\n\n            total_columns.push( {\"mDataProp\":index} );\n            if(field_data.initially_hidden == true){\n              if(user_updated_visible_columns[counter] !== true){\n                hidden_columns.push(counter);\n              }\n            } else {\n              if(user_updated_visible_columns[counter] === false){\n                hidden_columns.push(counter);\n              }\n            }\n            if(field_data.show_column_toggle == false){\n              exclude_columns_for_hiding.push(counter);\n            }\n            counter++;\n\n          });\n\n          $('.filter_value, .filter_image').bind('click', function(event){\n            event.stopPropagation();\n          });\n\n          $('#browse_table th .filter_value').bind('keyup change', function(event){\n            page_datatable.fnDraw();\n          });\n\n            $('.filter_image').each(function() {\n              var filter_options = [\n              //{text: '> greater than', value: 'gt'}\n              //,{text: '>= (greater than OR equal to)', value: 'gt_or_eq'}\n              //,{text: '< less than', value: 'lt'}\n              //,{text: '<= (less than OR equal to)', value: 'lt_or_eq'}\n               {text: '= (equal to)', value: 'equals'}\n              ,{text: 'Contains', value: 'contains'}\n              ,{text: 'Does not contain', value: 'not_contain'}\n              ,{text: 'Starts with', value: 'start_with'}\n              ,{text: 'Ends With', value: 'end_with'}\n              ];\n              var column_data_type = $(this).data(\"data_type\");\n              switch(column_data_type) {\n                case \"text\":\n                  filter_options = [\n                  {text: '= (equal to)', value: 'equals'}\n                  ,{text: 'Contains', value: 'contains'}\n                  ,{text: 'Does not contain', value: 'not_contain'}\n                  ,{text: 'Starts with', value: 'start_with'}\n                  ,{text: 'Ends With', value: 'end_with'}\n                  ];\n                break;\n              }\n\n              $(this).dynamicContextMenu({\n                  id: this.id\n                  ,style:{\n                    containerCssClass: \"DynamicContextMenuContainer\",\n                    subLevelHolderItemCssClass: \"DynamicContextMenuSubLevelHolderItem\",\n                    itemIconCssClass: \"DynamicContextMenuItemIcon\"\n                  }\n                  ,items: filter_options\n                  ,openMode: \"click\"\n                  ,onItemClick: function (sender, item) {\n                    $('#'+sender._id+'_filter_value').attr('value', item.value);\n                    page_datatable.fnDraw();\n                  }\n                  ,waitTime: 1\n              });\n            });\n\n            var lastSequence;\n\n            var page_datatable = $('#' + single_datatable.dom_table_id).dataTable({\n\n              // Groups genes begins\n              \"fnDrawCallback\": function ( oSettings ) {\n                  var trs = $(\"#\" + single_datatable.dom_table_id + \" tbody tr\");\n                  $.each(trs, function(index, tr){\n                    var td = $(tr).find('td.group');\n                    if( td.length ) {\n                      $(td).addClass('no_row_click');\n                    }\n                  });\n              }\n              // Groups genes ends\n\n              // BEGIN - Comment-out if we switch back over to groupings\n              // ,\"aoColumnDefs\": [\n              //   { \"bVisible\": false, \"aTargets\": [ 0 ] }\n              // ]\n              // ,\"aaSortingFixed\": [[ 0, 'asc' ]]\n              // ,\"aaSorting\": [[ 1, 'asc' ]]\n              // ,\"sDom\": 'lfr<\"giveHeight\"t>ip'\n              // END - Comment-out if we switch back over to groupings\n\n              // Remember the user's settings\n              ,\"bStateSave\": true\n              //show processing throbber\n              ,\"bProcessing\": true\n              //move the info to the top instead of the bottom\n              //,\"sDom\":'C<\"clear\"><\"top\"flip>rt<\"bottom\"p<\"clear\">>'\n              ,\"sDom\": \"<'row'C><<'span4'f><'span4'i><'span4'l>><<'span3 datatables_bulk_actions'><'span3'r><'span5 pull-right'p>>t<'row'<'span6 pull-right'p>>\"\n              //all data management will be done on the server side\n              ,\"bServerSide\": true\n              //path to the file that is going to handle the queries\n              ,\"sAjaxSource\": \"{{ path_to_this_module }}/datatables_browse_assays\"\n              //,\"sAjaxSource\": single_datatable.path_to_datatables_controller\n              //method type\n              ,\"sServerMethod\": \"POST\"\n              //match the html table columns with the fields returned from the query\n              ,\"aoColumns\": total_columns\n              //THIS IS JUST FOR THE WIREFRAME - UNCOMMENT THE sServerMethod, sAjaxSource, aoColumns and bServerSide keys AND THE PATH TO DETAILS PAGE\n              // ,\"aaData\" : single_datatable.data\n              //values in the length dropdown\n              ,\"aLengthMenu\":[[10, 25, 50, 100, 1000000], [10, 25, 50, 100, \"All\"]]\n              //default length\n              ,\"iDisplayLength\": 50\n              //default sort\n              ,\"aaSorting\":[[1,\"asc\"]]\n              //needed for bootstrap\n              ,\"sWrapper\": \"dataTables_wrapper form-inline\"\n              ,\"sPaginationType\":\"bootstrap\"\n              ,\"bAutoWidth\": false\n              //set some widths\n              ,\"aoColumnDefs\":[\n                {\"sWidth\":\"50px\",\"aTargets\":[1]}\n                ,{\"bSortable\":false,\"aTargets\":[0]}\n                ,{\"bVisible\":false,\"aTargets\":hidden_columns}\n              ]\n              ,\"fnServerParams\": function ( aoData ) {\n\n                  var filter_array = $.map($(\"#\" + single_datatable.dom_table_id + \" th\"), function(e, i){\n                      var single_filter = {};\n                      single_filter.column = $(e).find('div.filter_image').attr('id');\n                      single_filter.value = $(e).find('.filter_value').val();\n                      single_filter.comparison = $(e).find('input.comparison_value').val();\n                      return single_filter;\n                  });\n                  var newObj = {name: \"column_filter\", value:JSON.stringify(filter_array)};\n                  aoData.push(newObj);\n\n                  // Multiselect values\n                  var sidebar_filter = {};\n                  $(\".single_sidebar_filter\").each(function(){\n                    if($(this).val()) {\n                      sidebar_filter[$(this).data(\"filter_handle\")] = $(this).val();\n                    }\n                  });\n                  // Protein interactions\n                  var protein_interactions_filter = [];\n                  var filter = {};\n                  $(\".tagit-label\").each(function(){\n                    if($(this).text()){\n                      protein_interactions_filter.push( $(this).text() );\n                    }\n                    sidebar_filter['protein_interactions_filter'] = protein_interactions_filter;\n                  });\n                  // KEGG Pathways\n                  var kegg_pathways_filter = [];\n                  kegg_pathways_filter.push( $(\"#kegg_select\").val() );\n                  sidebar_filter['kegg_pathways_filter'] = kegg_pathways_filter;\n\n                  var sidebar_filter_obj = {name: \"sidebar_filter\", value:JSON.stringify(sidebar_filter)};\n                  aoData.push(sidebar_filter_obj);\n\n              }\n              ,\"fnRowCallback\":function(nRow, aData, iDisplayIndex){\n                // Remove the peptide sequence \"repeats\"\n                if(lastSequence == aData.peptide_sequence) {\n                  $(this.fnGetTds(nRow)[2]).text('');\n                }\n                // Set the last sequence\n                lastSequence = aData.peptide_sequence;\n              }\n              ,\"oColVis\":{\n                \"fnLabel\":function(index, title, th){\n                  return $(th).find(\".th_header_text\").text();\n                }\n                ,\"aiExclude\" : exclude_columns_for_hiding\n                ,\"fnStateChange\" : function(iColumn, bVisible){\n                  var previous_values = $.cookie(\"browse_table_column_cookie\");\n                  if(typeof previous_values === \"undefined\" || previous_values === null) {\n                    previous_values = {};\n                  } else {\n                    previous_values = JSON.parse(previous_values);\n                  }\n                  previous_values[iColumn] = bVisible;\n                  $.cookie('browse_table_column_cookie', JSON.stringify(previous_values), { expires: 365 });\n                }\n              }\n\n            }).rowGrouping({\n              iGroupingColumnIndex: 1\n              ,bHideGroupingColumn: true\n              ,bExpandableGrouping: true\n            });\n\n\n            //send to details page when clicked\n            $('#' + single_datatable.dom_table_id + ' tbody').on('click','td',function(event) {\n                if(!$(this).hasClass(\"no_row_click\") && !$(event.target).is(\"a\") && !$(this).hasClass(\"dataTables_empty\")) {\n                  var id = $(this).closest(\"tr\").attr('id');\n                  window.location.href = single_datatable.path_to_details_page + 'CPTAC-' + id;\n                }\n            });\n        });\n\n        // Multiselects\n        $('.multiselect').multiselect({\n          buttonClass: 'btn',\n          buttonWidth: '100%',\n          buttonContainer: '<div class=\"btn-group\" />',\n          maxHeight: false,\n          buttonText: function(options) {\n            if (options.length == 0) {\n              return 'Include All <b class=\"caret\"></b>';\n            }\n            else if (options.length > 3) {\n              return options.length + ' selected  <b class=\"caret\"></b>';\n            }\n            else {\n              var selected = '';\n              options.each(function() {\n                selected += $(this).text() + ', ';\n              });\n              return '<span class=\"filter-button-text\">' + selected.substr(0, selected.length -2) + '</span> <b class=\"caret\"></b>';\n            }\n          }\n          ,onChange: function(element, checked) {\n            $('#browse_table').dataTable().fnDraw();\n          }\n        });\n\n        // Protein interactions\n        $(\"#select_protein_interactions\").tagit({\n          removeConfirmation: true,\n          maxLength: 6,\n          afterTagAdded: function(event, ui) {\n            $('#browse_table').dataTable().fnDraw();\n          },\n          afterTagRemoved: function(event, ui) {\n            $('#browse_table').dataTable().fnDraw();\n          }\n        });\n\n        $(\"#cromosomal_location_start, #cromosomal_location_stop\").on('keyup',function() {\n          $('#browse_table').dataTable().fnDraw();\n        });\n\n        $('.ui-autocomplete-input').after(' <i class=\"icon-question-sign\" title=\"Hit the return/enter key to enter each protein\"></i>');\n\n        // KEGG\n        $(\"#kegg_select\").chosen();\n        // Strip the leading indent dashed before displaying in the DOM\n        $('#kegg_select').on('change', function(evt, params) {\n          $(\".search-choice span\").each(function () {\n            var kegg_string = $(this).text();\n            var kegg_string_stripped = kegg_string.replace(/-+/, '');\n            $(this).text(kegg_string_stripped);\n            $('#browse_table').dataTable().fnDraw();\n          });\n        });\n\n        // Clear all filter selections\n        $('#clear_all').on('click', function() {\n          // KEGG pathways\n          $(\"#kegg_select\").val('').trigger(\"chosen:updated\");\n          // All multiselects\n          multiselect_deselectAll($(\"#select_cromosome, #select_species, #select_assay_type, #select_reagent_type\"), $(this));\n          // Protein interactions\n          $(\"#select_protein_interactions\").tagit(\"removeAll\");\n          // Chromosomal location\n          $('#cromosomal_location_start, #cromosomal_location_stop').val('');\n          // Clear the main search\n          $('#browse_table').dataTable().fnFilterClear();\n        });\n\n        // Download CSV button\n        var csv_datestamp = '{{ now|date(\"Y-m-d-H-i\") }}';\n        var oTable = $('#browse_table').dataTable();\n        var oTableTools = new TableTools( oTable, {\n          \"sSwfPath\": \"{{ path_to_this_module }}/library/js/TableTools-2.1.4/media/swf/copy_csv_xls_pdf.swf\"\n          ,\"aButtons\": [\n            {\n              \"sExtends\": \"csv\"\n              ,\"sButtonText\": \"Download CSV\"\n              ,\"sFileName\": \"CPTAC_Assays_export_\"+csv_datestamp+\".csv\"\n              ,\"sButtonClass\": \"ColVis_Button TableTools_Button ColVis_MasterButton custom_csv_button_styles\"\n            }\n            // ,{\n            //   \"sExtends\": \"copy\"\n            //   ,\"sButtonText\": \"Copy Table\"\n            // }\n          ]\n        });\n\n        $('#browse_table_wrapper').prepend( oTableTools.dom.container );\n\n        // Remove the onclick on table headers\n        $('#browse_table thead tr th').unbind('click');\n\n        // Modify the width of the pagination container\n        $('#browse_table_wrapper').find('div.span5').removeClass('span5').addClass('span12');\n\n        // Modify the width of the KEGG input\n        $('#kegg_select_chosen').removeAttr('style').attr('style','width:125px;');\n        $('#kegg_select_chosen ul li input').removeAttr('style').attr('style','width:125px;');\n\n        /* TOUR STUFF */\n        $('#tour_button_container').on('click', 'button', function() {\n          // Instance the tour\n          var tour = new Tour({\n            storage: false\n          });\n\n          // Add steps\n          tour.addSteps([\n            {\n              element: \"#kegg_filter\",\n              title: \"KEGG Pathways\",\n              content: \"Select one or more KEGG pathways from the menu. Each selected pathway is added above the menu as a removable item. To remove a selected pathway, click the 'x' in the upper right corner.\"\n            },\n            {\n              element: \"#cromosome_filter\",\n              title: \"Chromosomal Regions\",\n              content: \"Filter by chromosome numbers and specific chromosomal locations. Select and deselect cromosome numbers (1-22) from the menu. Enter chromosomal location values in the start and stop input fields.\"\n            },\n            {\n              element: \"#protein_interaction_filter\",\n              title: \"Protein Interactions\",\n              content: \"Enter a protein name and press enter. Multiple protein names are allowed. Each entered protein name is added above the menu as a removable item. To remove an entered protein name, click the 'x'.\"\n            },\n            {\n              element: \".ColVis\",\n              title: \"Show / hide columns\",\n              content: \"Toggle the visibility of table columns.\",\n              placement: \"left\"\n            },\n            {\n              element: \"#browse_table_length label select\",\n              title: \"Change Amount Viewable\",\n              content: \"Change the number of viewable records per page.\",\n              placement: \"left\"\n            },\n            {\n              element: \".dataTables_paginate\",\n              title: \"Navigate Pages\",\n              content: \"Navigate the paginated results.\",\n              placement: \"bottom\"\n            },\n            {\n              element: \"#browse_table_filter label input\",\n              title: \"Free Text Search\",\n              content: \"Search across all fields in the table, including hidden fields. Searchable fields include: Gene Symbol, Peptide Sequence, UniProt Accession ID, CPTAC ID, Modification Type, and Laboratory Name.\",\n              placement: \"top\"\n            },\n            {\n              element: \"#clear_all\",\n              title: \"Clear All Filters\",\n              content: \"Reset all filter settings, including the search field, and return the table view to the default state.\"\n            },\n            {\n              element: \"#browse_table tbody\",\n              title: \"View Records\",\n              content: \"Click on a row to navigate to the details page.\",\n              placement: \"top\"\n            }\n          ]);\n          // Initialize the tour\n          tour.init();\n          // Start the tour\n          tour.start();\n        });\n\n        // Tooltips\n        $(\".icon-question-sign\").tooltip();\n        $(\"#browse_table_wrapper .DTTT_container a\").attr('title',\"Download a CSV of all records displayed on this page. If all records are desired, select 'All' from the 'Show' dropdown menu below.\");\n        $(\"#browse_table_wrapper .DTTT_container a\").tooltip();\n\n    });\n\n    function multiselect_deselectAll($el) {\n      $('option', $el).each(function(element) {\n        $el.multiselect('deselect', $(this).val());\n      });\n    }\n  </script>\n{% endblock %}","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"28":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"29":{"range":{"start":{"row":0,"column":33},"end":{"row":0,"column":34}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/browse_assays.php","digestWhenLastPersisted":"787db1176a768f0a1dde7c804a5cfc379caf7c14","preferredLineEnding":null,"nextMarkerId":30,"deserializer":"TextBuffer","version":5},{"id":"d49a9f7c18ad132a41482b04ce1e1e0f","text":"<?php\n/**\n * @desc Import Assays: controller for inserting and updating data\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 1.0\n * @package cptac\n *\n */\nfunction insert_update( $import_log_id = false ) {\n  $app = \\Slim\\Slim::getInstance();\n  $env = $app->environment();\n  global $final_global_template_vars;\n  require_once $final_global_template_vars[\"absolute_path_to_this_module\"] . \"/models/assays_import.class.php\";\n  require_once $_SERVER[\"DOCUMENT_ROOT\"].\"/assays/models/assays.class.php\";\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n  $import = new AssaysImport( $db_resource, $final_global_template_vars[\"session_key\"] );\n  $assay = new Assay( $db_resource );\n\n  $data = array();\n  $current_values = array();\n  $laboratory_name = \"\";\n  $data[\"session\"] = $_SESSION[$final_global_template_vars[\"session_key\"]];\n\n  if( $app->request()->post() ) {\n    $current_values = $app->request()->post();\n\n    $data['sop_files'] = $import->get_sop_files( $current_values['import_log_id'] );\n    $data['uploaded_files'] = isset($current_values['uploaded_files']) ? $import->get_sop_files_by_id( $current_values['uploaded_files'] ) : false;\n\n    // $data['uploaded_sop_file_types'] = isset($current_values['sop_file_types']) ? $current_values['sop_file_types'] : false;\n    $data['publications'] = $import->get_publications( $current_values['import_log_id'] );\n    // Posted Publications\n    if( isset($current_values['import_log_id']) && isset($current_values[\"publication_citation\"]) ) {\n      for($i = 0; $i < count($current_values[\"publication_citation\"]); $i++) {\n        $data['submitted_publications'][] = array(\n            \"publication_citation\" => $current_values[\"publication_citation\"][$i]\n          , \"publication_url\" => $current_values[\"publication_url\"][$i]\n        );\n      }\n    }\n  } elseif ( $import_log_id ){\n    $current_values = $import->get_assay_import_record( $import_log_id );\n    $data['sop_files'] = $import->get_sop_files( $import_log_id );\n    $data['publications'] = $import->get_publications( $import_log_id );\n\n    // Get the user's roles.\n    $user_role_ids = isset($data[\"session\"][\"user_role_list\"]) \n      ? $data[\"session\"][\"user_role_list\"] : array();\n    // Get the laboratory metadata via the import_log_id GET variable.\n    $data[\"laboratory_data\"] = $assay->get_laboratory_by_import_log_id( $import_log_id );\n    // Get the laboratory name for the page title (superadmin only).\n    $laboratory_name = in_array(4, $user_role_ids) ? \": \".$data[\"laboratory_data\"][\"laboratory_name\"] : \"\";\n  }\n\n  // Get all SOP File types.\n  $data['sop_file_types'] = $import->get_sop_file_types();\n\n  // Throw a 404 if no values are returned. (This means either user is not in a privileged group or an incorrect id was supplied.)\n  if((!$current_values && $app->request()->post()) || (!$current_values && $import_log_id)) $app->notFound();\n\n  // Get assay types\n  $data[\"assay_types\"] = $import->get_assay_types();\n\n  // Get peptide_standard_purity_types\n  $data['peptide_standard_purity_options'] = $import->get_peptide_standard_purity_types();\n\n\n\n\n  $data = array_merge( $current_values, $data );\n\n  // Render\n  $app->render(\n    \"insert_update.php\"\n    ,array(\n      \"page_title\" => \"Add Import Metadata\".$laboratory_name\n      ,\"hide_side_nav\" => false\n      ,\"data\" => $data\n      ,\"errors\" => isset($env[\"swpg_validation_errors\"]) ? $env[\"swpg_validation_errors\"] : false\n    )\n  );\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_update.php","digestWhenLastPersisted":"005e4f9d819ea4451baaea9febb7bc6189024bdb","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"a8f1596b4db975f29bd5c0b7a8e269e7","text":"<?php\n/**\n * @desc Import Assays: controller for validating data\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 1.0\n * @package cptac\n *\n */\nfunction insert_update_assays_import(){\n  $app = \\Slim\\Slim::getInstance();\n  global $final_global_template_vars;\n  require_once $final_global_template_vars[\"absolute_path_to_this_module\"] . \"/models/assays_import.class.php\";\n  require_once $_SERVER[\"PATH_TO_CORE\"] . \"slim_framework/GUMP/gump.class.php\";\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n  $import = new AssaysImport( $db_resource, $final_global_template_vars[\"session_key\"] );\n  $gump = new GUMP();\n  $post = $app->request()->post();\n  $import_log_id = !empty($post[\"import_log_id\"]) ? $post[\"import_log_id\"] : false;\n\n  // Default rules\n  $rules = array();\n\n  $rules = array(\n    \"instrument\" => \"required\"\n    ,\"matrix\" => \"required\"\n    ,\"matrix_amount_and_units\" => \"required\"\n    ,\"quantification_units\" => \"required\"\n    ,\"internal_standard\" => \"required\"\n    //,\"peptide_standard_purity\" => \"required\"\n    ,\"peptide_standard_purity_types_id\" => \"required\"\n    ,\"protein_species_label\" => \"required\"\n    ,\"data_type\" => \"required\"\n    ,\"lc\" => \"required\"\n    ,\"column_packing\" => \"required\"\n    ,\"column_dimensions\" => \"required\"\n    ,\"column_temperature\" => \"required\"\n    ,\"flow_rate\" => \"required\"\n    ,\"mobile_phase_a\" => \"required\"\n    ,\"mobile_phase_b\" => \"required\"\n    ,\"celllysate_path\" => \"required\"\n  );\n\n  // Assay types rules\n  $rules_assay_types = array();\n\n  if(isset($post[\"assay_types_id\"])) {\n    switch ( $post[\"assay_types_id\"] ) {\n      case \"1\":\n        $rules_assay_types = array(\n          \"enrichment_method\" => \"required\"\n          // ,\"affinity_reagent_type\" => \"required\"\n          ,\"antibody_vendor\" => \"required\"\n          ,\"media\" => \"required\"\n          // ,\"antibody_portal_url\" => \"required\"\n        );\n        break;\n      case \"2\":\n        $rules_assay_types = array(\n          \"fractionation_approach\" => \"required\"\n          ,\"column_material\" => \"required\"\n          ,\"conditions\" => \"required\"\n          ,\"number_of_fractions_collected\" => \"required\"\n          ,\"number_of_fractions_analyzed\" => \"required\"\n          ,\"fraction_combination_strategy\" => \"required\"\n        );\n        break;\n    }\n  }\n\n  // // Validate the files\n  // $errors_files = array();\n\n  // if( isset($posted_files) ) {\n\n  //   $allowed_mime_types = $final_global_template_vars['file_validation']['allowed_mime_types'];\n  //   $max_size = $final_global_template_vars['file_validation']['max_size'];\n\n  //   // Validate the sop files\n  //   foreach( $posted_files as $file_key => $file_value ) {\n  //     if( !empty($file_value['tmp_name']) ) {\n  //       for($i = 0; $i < count($file_value['tmp_name']); $i++) {\n  //         if( !empty( $file_value['type'][$i] ) && !in_array( $file_value['type'][$i], $allowed_mime_types ) ) {\n  //           // Invalid file type\n  //           $errors_files[$file_key.\"_\".($i+1)] = $file_key.\" \".($i+1).' file is an invalid file type';\n  //         }\n  //         if( !empty($file_value['size'][$i]) && ($file_value['size'][$i] > $max_size) ) {\n  //           // Invalid file size\n  //           $errors_files[$file_key.\"_\".($i+1)] = $file_key.\" \".($i+1).' file is too large';\n  //         }\n\n  //       }\n  //     }\n  //   }\n\n  // }\n\n\n\n  // Merge the default rules and the assay types rules\n  $rules = array_merge( $rules, $rules_assay_types );\n  $validated = $gump->validate($post, $rules);\n  $errors = array();\n  if($validated !== TRUE){\n    $errors = \\swpg\\models\\utility::gump_parse_errors($validated);\n  }\n  // // Merge the default errors and the file validation errors\n  // $errors = array_merge($errors, $errors_files);\n  \n  if(!$errors ){\n    $import->insert_update_assays_import( $post, $import_log_id );\n    $message = $import_log_id \n      ? 'updated.' \n      : 'entered into the database.';\n    $app->flash('success', 'Assay parameters successfully '.$message);\n    $app->redirect($final_global_template_vars[\"path_to_this_module\"]);\n  } else {\n    $current_values = $app->request()->post();\n    $env = $app->environment();\n    $env[\"swpg_validation_errors\"] = $errors;\n  }\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_update_assays_import.php","digestWhenLastPersisted":"0c6da3515720e2033f3c9dc1bcce50f07eab1400","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"b55f38e83b3d56f3280bd8ce288b6293","text":"<?php\n/**\n * @desc Import Assays: controller for inserting SOP file data into the database\n *\n * @author The Advanced Biomedical Computing Center (ABCC) - SWPG - halusagn\n * @version 1.0\n * @package cptac\n *\n */\nfunction insert_sop_file() {\n  $app = \\Slim\\Slim::getInstance();\n  $env = $app->environment();\n  global $final_global_template_vars;\n  require_once ($final_global_template_vars[\"absolute_path_to_this_module\"] . \"/models/assays_import.class.php\");\n  $db_conn = new \\swpg\\models\\db( $final_global_template_vars[\"db_connection\"] );\n  $db_resource = $db_conn->get_resource();\n  $import = new AssaysImport( $db_resource, $final_global_template_vars[\"session_key\"] );\n\n  $data = $import->insert_sop_file( $app->request()->post('file_data') );\n\n  echo json_encode($data);\n}","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_sop_file.php","digestWhenLastPersisted":"d317db167b6c13b21a1f17c6d49a63bee9c2c4e3","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"89ceee89b8b5a7bf334a83a86ecab33b","text":"<?php\nclass ImportEntrezGenomicContext\n{\n  public $db;\n\n  public function __construct($db_connection=false) {\n    if($db_connection && is_object($db_connection)) {\n      $this->db = $db_connection;\n    }\n    global $final_global_template_vars;\n    $this->final_global_template_vars = $final_global_template_vars;\n  }\n\n  public function import_entrez_gene_data( $gene_symbol, $entrez_api_url, $xml2array, $user_email = false ) {\n\n    // References\n    // http://www.ncbi.nlm.nih.gov/gene/2064\n    // http://www.ncbi.nlm.nih.gov/books/NBK25500/#chapter1.ESearch\n\n    // Get the gene record\n    // http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=gene&term=ERBB2[gene]+AND+Homo+sapiens[Organism]\n\n    // Use the returned id to query for the full info of the target gene\n    // http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=gene&id=2064&retmode=xml\n\n    $data = false;\n    $entrez_gene_id = false;\n    $entrez_gene_query = '';\n    $entrez_url = $entrez_api_url.'esearch.fcgi?db=gene&term='.$gene_symbol.'[gene]+AND+Homo+sapiens[Organism]';\n\n\n\n    // Error handling.\n\n    set_error_handler(\n        create_function(\n            '$severity, $message, $file, $line',\n            'throw new ErrorException($message, $severity, $severity, $file, $line);'\n        )\n    );\n\n    try {\n      $entrez_gene_query = file_get_contents( $entrez_url );\n    } catch (Exception $e) {\n      // Send an email to the super admin.\n      mail(\n          $this->final_global_template_vars[\"superadmin_email_address\"].\", \".$user_email\n        , \"CPTAC Import: Entrez Import Failed for gene symbol: \".$gene_symbol\n        , \"Entrez URL for gene symbol \".$gene_symbol.\":\\n\\n\".$entrez_url\n      );\n    }\n\n    restore_error_handler();\n\n    //Force no Entrez update rg\n    //$entrez_gene_query = false;\n    \n    \n    if( !empty($entrez_gene_query) ) \n    {\n\n      $entrez_gene_query_array = $xml2array->createArray($entrez_gene_query);\n\n     \n\n      // Added 2014-11-07 due to no result returned by Entrez Gene.\n      if($entrez_gene_query_array[\"eSearchResult\"][\"Count\"] > \"0\") {\n\n        // If an array of \"Id\"s is returned, match the returned gene name with the intended local target gene name\n        if( is_array($entrez_gene_query_array[\"eSearchResult\"][\"IdList\"][\"Id\"]) )\n        {          \n          foreach($entrez_gene_query_array[\"eSearchResult\"][\"IdList\"][\"Id\"] as $entrez_gene_id)\n          {\n           \n            $gene_data = file_get_contents($entrez_api_url.'esummary.fcgi?db=gene&id='.$entrez_gene_id.'&retmode=xml');\n            $current_id = false;\n  \n            if( !empty($gene_data) )\n            {\n              $gene_data_array = $xml2array->createArray( $gene_data );\n\n              if( $gene_data_array )\n              {\n                \n                if( isset($gene_data_array[\"eSummaryResult\"][\"DocumentSummary\"]) )\n                {\n                  $returned_gene_symbol = $gene_data_array[\"eSummaryResult\"][\"DocumentSummary\"][\"Name\"];\n                  $current_id = $gene_data_array[\"eSummaryResult\"][\"DocumentSummary\"][\"CurrentID\"];\n                }\n                elseif( isset($gene_data_array[\"eSummaryResult\"][\"DocumentSummarySet\"]) )\n                {\n                  $returned_gene_symbol = $gene_data_array[\"eSummaryResult\"][\"DocumentSummarySet\"][\"DocumentSummary\"][\"Name\"];\n                  $current_id = $gene_data_array[\"eSummaryResult\"][\"DocumentSummarySet\"][\"DocumentSummary\"][\"CurrentID\"];\n                }                \n                \n                if( $returned_gene_symbol == $gene_symbol )\n                {\n                  $entrez_gene_id = $current_id;\n                }\n\n              }\n            }\n          }\n        }\n        else\n        {\n          // If an array of IDs is not returned, then just use the \"Id\"\n          $entrez_gene_id = $entrez_gene_query_array[\"eSearchResult\"][\"IdList\"][\"Id\"];\n        }\n\n       \n        $all_gene_data = file_get_contents($entrez_api_url.'esummary.fcgi?db=gene&id='.$entrez_gene_id.'&retmode=xml');\n\n        if(!empty($all_gene_data))\n        {\n          $gene_data_array = $xml2array->createArray( $all_gene_data );\n          \n          //$data = $this->get_entrez_genomic_context( $gene_data_array[\"eSummaryResult\"][\"DocumentSummarySet\"] );\n          \n          if( isset($gene_data_array['eSummaryResult']['DocumentSummarySet']['DocumentSummary']))\n          {\n            $gene_array = @$gene_data_array['eSummaryResult']['DocumentSummarySet']['DocumentSummary'];\n            $data['chromosome_start'] = @$gene_array['GenomicInfo']['GenomicInfoType']['ChrStart'];\n            $data['chromosome_stop'] = @$gene_array['GenomicInfo']['GenomicInfoType']['ChrStop'];\n            $data['chromosome_number'] = @$gene_array['Chromosome'];\n          }\n        }\n\n        // Update the data in the database\n        if( $data['chromosome_start'] && $data['chromosome_stop'] && $data['chromosome_number'] ) {\n          $statement = $this->db->prepare(\"\n            UPDATE protein\n            SET chromosome_start = \".$data['chromosome_start'].\"\n              ,chromosome_stop = \".$data['chromosome_stop'].\"\n              ,chromosome_number = \".$data['chromosome_number'].\"\n            WHERE gene_symbol = '\".$gene_symbol.\"'\n          \");\n          $statement->execute();\n        }\n\n      } else {\n        // Send an email to the super admin.\n        mail(\n            $this->final_global_template_vars[\"superadmin_email_address\"].\", \".$user_email\n          , \"CPTAC Import: Entrez Import Failed for gene symbol: \".$gene_symbol\n          , \"Entrez URL for gene symbol \".$gene_symbol.\":\\n\\n\".$entrez_url\n        );\n      }\n\n    }\n\n    return $data;\n  }\n\n  public function get_entrez_genomic_context( $entrez_gene_data_array ) {\n\n    $data[\"chromosome_number\"] = false;\n    $data[\"chromosome_start\"] = $this->get_entrez_chromosomal_coordinates( $entrez_gene_data_array, 'ChrStart' );\n    $data[\"chromosome_stop\"] = $this->get_entrez_chromosomal_coordinates( $entrez_gene_data_array, 'ChrStop' );\n\n    for($i = 0; $i < count($entrez_gene_data_array); $i++) {\n      $isarray1 = array_key_exists(\"DocumentSummary\", $entrez_gene_data_array[$i]);\n      if($isarray1) {\n        $isarray2 = array_key_exists(\"DocumentSummary\", $entrez_gene_data_array[$i][\"DocumentSummary\"]);\n        if($isarray2) {\n          foreach($entrez_gene_data_array[$i][\"DocumentSummary\"][\"DocumentSummary\"] as $set) {\n            $isarray3 = array_key_exists(\"@attributes\", $set);\n            if($isarray3) {\n              $name_attribute = $this->search_array( $set, 'Name', 'ChrLoc' );\n              if($name_attribute) {\n                $data[\"chromosome_number\"] = (int)$set[\"@value\"];\n              }\n            }\n          }\n        }\n      }\n    }\n    return $data;\n  }\n\n  public function get_entrez_chromosomal_coordinates( $entrez_gene_data_array, $start_or_end ) {\n\n    $data = false;\n\n    for($i = 0; $i < count($entrez_gene_data_array); $i++) {\n      \n      $isarray1 = array_key_exists(\"DocumentSummary\", $entrez_gene_data_array[$i]);\n      if($isarray1) {\n        $isarray2 = array_key_exists(\"DocumentSummary\", $entrez_gene_data_array[$i][\"DocumentSummary\"]);\n        if($isarray2) {\n          foreach($entrez_gene_data_array[$i][\"DocumentSummary\"][\"DocumentSummary\"] as $set) {\n            $isarray3 = array_key_exists(\"@attributes\", $set);\n            if($isarray3) {\n              $name_attribute = $this->search_array( $set, 'Name', $start_or_end );\n              if($name_attribute) {\n                $data = ($set[\"@value\"]+1);\n              }\n            }\n          }\n        }\n      }\n    }\n    return $data;\n  }\n\n  public function search_array($array, $key, $value)\n  {\n    $results = array();\n    if (is_array($array))\n    {\n      if (isset($array[$key]) && $array[$key] == $value)\n        $results[] = $array;\n      foreach ($array as $subarray)\n        $results = array_merge($results, $this->search_array($subarray, $key, $value));\n    }\n    return $results;\n  }\n\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_entrez_genomic_context.class.php","digestWhenLastPersisted":"7912ab3126df426cbd4de848f1f5a5c99a7de0c3","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"c47bb549a3ebbfb2d99e1278d02ef1f2","text":"<?php\nclass ImportUniprotData\n{\n  private $session_key = \"\";\n  public $db;\n\n  public function __construct( $db_connection=false, $session_key=false ) {\n    if( $db_connection && is_object($db_connection) ) {\n      $this->db = $db_connection;\n    }\n    global $final_global_template_vars;\n    $this->final_global_template_vars = $final_global_template_vars;\n  }\n\n  public function import_uniprot_data( $data = false ) {\n    if($data) {\n\n      $gene_synonyms = (!empty($data[\"gene_synonym\"])) ? implode(\",\", $data[\"gene_synonym\"]) : NULL;\n      $hgnc_gene_id = (!empty($data[\"hgnc_gene_id\"])) ? $data[\"hgnc_gene_id\"] : NULL;\n      $protein_name = is_array($data[\"protein_name\"]) ? $data[\"protein_name\"][\"@value\"] : $data[\"protein_name\"];\n\n      // Update the protein table.\n      $statement = $this->db->prepare(\"\n        UPDATE protein\n        SET uniprot_gene_synonym = :gene_synonyms\n            ,uniprot_hgnc_gene_id = :hgnc_gene_id\n            ,uniprot_kb = :uniprot_kb\n            ,uniprot_protein_name = :protein_name\n            ,uniprot_source_taxon_id = :source_taxon_id\n            ,uniprot_sequence = :sequence\n            ,uniprot_sequence_raw = :sequence_raw\n            ,uniprot_sequence_length = :sequence_length\n            ,protein_molecular_weight = :protein_molecular_weight\n        WHERE uniprot_accession_id = :uniprot_accession_id\");\n      $statement->bindValue(\":uniprot_accession_id\", $data[\"uniprot_ac\"], PDO::PARAM_STR);\n      $statement->bindValue(\":gene_synonyms\", $gene_synonyms, PDO::PARAM_STR);\n      $statement->bindValue(\":hgnc_gene_id\", $hgnc_gene_id, PDO::PARAM_STR);\n      $statement->bindValue(\":uniprot_kb\", $data[\"uniprot_kb\"], PDO::PARAM_STR);\n      $statement->bindValue(\":protein_name\", $protein_name, PDO::PARAM_STR);\n      $statement->bindValue(\":source_taxon_id\", $data[\"source_taxon_id\"], PDO::PARAM_STR);\n      $statement->bindValue(\":sequence\", $data[\"sequence\"], PDO::PARAM_STR);\n      $statement->bindValue(\":sequence_raw\", $data[\"sequence_raw\"], PDO::PARAM_STR);\n      $statement->bindValue(\":sequence_length\", $data[\"sequence_length\"], PDO::PARAM_INT);\n      $statement->bindValue(\":protein_molecular_weight\", $data[\"mass\"], PDO::PARAM_INT);\n      $statement->execute();\n\n      // Update the peptide_start and peptide_end in the analyte_peptide table.\n      $statement = $this->db->prepare(\"\n        UPDATE analyte_peptide\n        SET\n          peptide_start = :peptide_start\n         ,peptide_end = :peptide_end\n        WHERE peptide_sequence = :peptide_sequence\n      \");\n      $statement->bindValue(\":peptide_sequence\", $data[\"peptide_sequence\"], PDO::PARAM_STR);\n      $statement->bindValue(\":peptide_start\", $data[\"peptide_start\"], PDO::PARAM_INT);\n      $statement->bindValue(\":peptide_end\", $data[\"peptide_end\"], PDO::PARAM_INT);\n      $statement->execute();\n    }\n  }\n\n  public function truncate_uniprot_splice_junctions() {\n    $statement = $this->db->prepare(\"\n      TRUNCATE TABLE uniprot_splice_junctions\");\n    $statement->execute();\n  }\n\n  public function import_uniprot_splice_junctions( $data = false, $uniprot_accession_id = false ) {\n\n    if($data && $uniprot_accession_id) {\n      foreach($data as $value) {\n\n        $status = $value[\"status\"] ? $value[\"status\"] : NULL;\n\n        // Query the table to see if the record exists, which will determine if we're updating or inserting.\n        $statement = $this->db->prepare(\"\n          SELECT uniprot_accession_id, start, stop, type, description, status\n          FROM uniprot_splice_junctions\n          WHERE uniprot_accession_id = :uniprot_accession_id\n          AND start = :start\n          AND stop = :stop\n          AND type = :type\n          AND description = :description\n          \");\n        $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n        $statement->bindValue(\":start\", $value[\"start\"], PDO::PARAM_STR);\n        $statement->bindValue(\":stop\", $value[\"stop\"], PDO::PARAM_STR);\n        $statement->bindValue(\":type\", $value[\"type\"], PDO::PARAM_STR);\n        $statement->bindValue(\":description\", $value[\"description\"], PDO::PARAM_STR);\n        $statement->execute();\n        $existing_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n        if(!$existing_data) {\n          // Insert a new record.\n          $statement = $this->db->prepare(\"\n            INSERT INTO uniprot_splice_junctions\n            (uniprot_accession_id, start, stop, type, description, status)\n            VALUES(:uniprot_accession_id, :start, :stop, :type, :description, :status)\");\n          $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n          $statement->bindValue(\":start\", $value[\"start\"], PDO::PARAM_INT);\n          $statement->bindValue(\":stop\", $value[\"stop\"], PDO::PARAM_INT);\n          $statement->bindValue(\":type\", $value[\"type\"], PDO::PARAM_STR);\n          $statement->bindValue(\":description\", $value[\"description\"], PDO::PARAM_STR);\n          $statement->bindValue(\":status\", $status, PDO::PARAM_STR);\n          $statement->execute();\n        } else {\n          // Update the record.\n          $statement = $this->db->prepare(\"\n            UPDATE uniprot_splice_junctions\n            SET start = :start\n                ,stop = :stop\n                ,type = :type\n                ,description = :description\n                ,status = :status\n            WHERE uniprot_accession_id = :uniprot_accession_id\n            AND start = :start\n            AND stop = :stop\n            AND type = :type\n            AND description = :description\n          \");\n          $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n          $statement->bindValue(\":start\", $value[\"start\"], PDO::PARAM_INT);\n          $statement->bindValue(\":stop\", $value[\"stop\"], PDO::PARAM_INT);\n          $statement->bindValue(\":type\", $value[\"type\"], PDO::PARAM_STR);\n          $statement->bindValue(\":description\", $value[\"description\"], PDO::PARAM_STR);\n          $statement->bindValue(\":status\", $status, PDO::PARAM_STR);\n          $statement->execute();\n        }\n      }\n    }\n  }\n\n  // Remove duplicate uniprot_splice_junctions\n  // CREATE TABLE `uniprot_splice_junctions_new` as\n  // SELECT * FROM `uniprot_splice_junctions` WHERE 1 GROUP BY `uniprot_accession_id`, `start`, `stop`\n\n  public function truncate_uniprot_snps() {\n    $statement = $this->db->prepare(\"\n      TRUNCATE TABLE uniprot_snps\");\n    $statement->execute();\n  }\n\n  public function import_uniprot_snps( $data = false, $uniprot_accession_id = false ) {\n    if($data && $uniprot_accession_id) {\n      foreach($data as $value) {\n\n        // Query the table to see if the record exists, which will determine if we're updating or inserting.\n        $statement = $this->db->prepare(\"\n          SELECT uniprot_accession_id, position, original, variation\n          FROM uniprot_snps\n          WHERE uniprot_accession_id = :uniprot_accession_id\n          AND position = :position\n          AND original = :original\n          AND variation = :variation\n          \");\n        $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n        $statement->bindValue(\":position\", $value[\"position\"], PDO::PARAM_INT);\n        $statement->bindValue(\":original\", $value[\"original\"], PDO::PARAM_STR);\n        $statement->bindValue(\":variation\", $value[\"variation\"], PDO::PARAM_STR);\n        $statement->execute();\n        $existing_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n        if(!$existing_data) {\n          // Insert a new record.\n          $statement = $this->db->prepare(\"\n            INSERT INTO uniprot_snps\n            (uniprot_accession_id, position, original, variation)\n            VALUES(:uniprot_accession_id, :position, :original, :variation)\");\n          $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n          $statement->bindValue(\":position\", $value[\"position\"], PDO::PARAM_INT);\n          $statement->bindValue(\":original\", $value[\"original\"], PDO::PARAM_STR);\n          $statement->bindValue(\":variation\", $value[\"variation\"], PDO::PARAM_STR);\n          $statement->execute();\n        } else {\n          // Update the record.\n          $statement = $this->db->prepare(\"\n            UPDATE uniprot_snps\n            SET position = :position\n                ,original = :original\n                ,variation = :variation\n            WHERE uniprot_accession_id = :uniprot_accession_id\n            AND position = :position\n            AND original = :original\n            AND variation = :variation\n          \");\n          $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n          $statement->bindValue(\":position\", $value[\"position\"], PDO::PARAM_INT);\n          $statement->bindValue(\":original\", $value[\"original\"], PDO::PARAM_STR);\n          $statement->bindValue(\":variation\", $value[\"variation\"], PDO::PARAM_STR);\n          $statement->execute();\n        }\n      }\n    }\n  }\n\n  // Remove duplicate uniprot_snps\n  // CREATE TABLE `uniprot_snps_new` as\n  // SELECT * FROM `uniprot_snps` WHERE 1 GROUP BY `uniprot_accession_id`, `position`, `original`, `variation`\n\n  public function truncate_uniprot_isoforms() {\n    $statement = $this->db->prepare(\"\n      TRUNCATE TABLE uniprot_isoforms\");\n    $statement->execute();\n  }\n\n  public function import_uniprot_isoforms( $data = false, $uniprot_accession_id = false ) {\n    if($data && $uniprot_accession_id) {\n      foreach($data as $value) {\n\n        $note = ( isset($value[\"note\"]) && !empty($value[\"note\"]) && !is_array($value[\"note\"]) ) ? $value[\"note\"] : NULL;\n        $name = is_array($value[\"name\"]) ? json_encode($value[\"name\"]) : $value[\"name\"];\n        $id = is_array($value[\"id\"]) ? json_encode($value[\"id\"]) : $value[\"id\"];\n        $sequence = is_array($value[\"sequence\"]) ? json_encode($value[\"sequence\"]) : $value[\"sequence\"];\n        $sequence_length = ( isset($value[\"sequence_length\"]) && !empty($value[\"sequence_length\"]) ) ? $value[\"sequence_length\"] : NULL;\n\n        if($sequence_length !== NULL) {\n\n          // Query the table to see if the record exists, which will determine if we're updating or inserting.\n          $statement = $this->db->prepare(\"\n            SELECT uniprot_accession_id, id, name, sequence, note, sequence_length\n            FROM uniprot_isoforms\n            WHERE uniprot_accession_id = :uniprot_accession_id\n            AND id = :id\n            AND name = :name\n            AND sequence = :sequence\n            AND sequence_length = :sequence_length\n            \");\n          $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n          $statement->bindValue(\":id\", $value[\"id\"], PDO::PARAM_STR);\n          $statement->bindValue(\":name\", $name, PDO::PARAM_STR);\n          $statement->bindValue(\":sequence\", $sequence, PDO::PARAM_STR);\n          $statement->bindValue(\":sequence_length\", $sequence_length, PDO::PARAM_INT);\n          $statement->execute();\n          $existing_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n          if(!$existing_data) {\n            // Insert into the database\n            $statement = $this->db->prepare(\"\n              INSERT INTO uniprot_isoforms\n              (uniprot_accession_id, id, name, sequence, note, sequence_length)\n              VALUES(:uniprot_accession_id, :id, :name, :sequence, :note, :sequence_length)\");\n            $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n            $statement->bindValue(\":id\", $value[\"id\"], PDO::PARAM_STR);\n            $statement->bindValue(\":name\", $name, PDO::PARAM_STR);\n            $statement->bindValue(\":sequence\", $sequence, PDO::PARAM_STR);\n            $statement->bindValue(\":note\", $note, PDO::PARAM_STR);\n            $statement->bindValue(\":sequence_length\", $sequence_length, PDO::PARAM_INT);\n            $statement->execute();\n          } else {\n            // Update the record.\n            $statement = $this->db->prepare(\"\n              UPDATE uniprot_isoforms\n              SET id = :id\n                  ,name = :name\n                  ,sequence = :sequence\n                  ,note = :note\n                  ,sequence_length = :sequence_length\n              WHERE uniprot_accession_id = :uniprot_accession_id\n              AND id = :id\n              AND name = :name\n              AND sequence = :sequence\n              AND note = :note\n              AND sequence_length = :sequence_length\n            \");\n            $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n            $statement->bindValue(\":id\", $value[\"id\"], PDO::PARAM_STR);\n            $statement->bindValue(\":name\", $name, PDO::PARAM_STR);\n            $statement->bindValue(\":sequence\", $sequence, PDO::PARAM_STR);\n            $statement->bindValue(\":note\", $note, PDO::PARAM_STR);\n            $statement->bindValue(\":sequence_length\", $sequence_length, PDO::PARAM_INT);\n            $statement->execute();\n          }\n        }\n      }\n    }\n  }\n\n  // Remove duplicate uniprot_isoforms\n  // CREATE TABLE `uniprot_isoforms_new` as\n  // SELECT * FROM `uniprot_isoforms` WHERE 1 GROUP BY `uniprot_accession_id`, `id`, `name`, `sequence`, `note`, `uniprot_sequence_length`\n\n  public function get_incomplete_protein_records( $import_log_id = false ) {\n    $statement = $this->db->prepare(\"\n      SELECT DISTINCT uniprot_accession_id\n      FROM protein \n      WHERE import_log_id = :import_log_id\n      AND uniprot_kb IS NULL\n      AND uniprot_sequence IS NULL\n      AND uniprot_source_taxon_id IS NULL\n    \");\n    $statement->bindValue(\":import_log_id\", $import_log_id, PDO::PARAM_INT);\n    $statement->execute();\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n    return $data;\n  }\n\n  public function import_missed_uniprot_data( $uniprot_accession_id = false, $uniprot_data = false ) {\n    $data[\"uniprot_kb\"] = isset($uniprot_data[\"uniprot_kb\"]) ? $uniprot_data[\"uniprot_kb\"] : NULL;\n    $data[\"uniprot_protein_name\"] = isset($uniprot_data[\"protein_name\"][\"@value\"]) \n      ? $uniprot_data[\"protein_name\"][\"@value\"]\n      : NULL;\n    $data[\"uniprot_source_taxon_id\"] = isset($uniprot_data[\"source_taxon_id\"]) ? $uniprot_data[\"source_taxon_id\"] : NULL;\n    $data[\"uniprot_sequence\"] = isset($uniprot_data[\"sequence\"]) ? $uniprot_data[\"sequence\"] : NULL;\n    $data[\"uniprot_sequence_raw\"] = isset($uniprot_data[\"sequence_raw\"]) ? $uniprot_data[\"sequence_raw\"] : NULL;\n    $data[\"uniprot_sequence_length\"] = isset($uniprot_data[\"sequence_length\"]) ? $uniprot_data[\"sequence_length\"] : NULL;\n    $data[\"protein_molecular_weight\"] = isset($uniprot_data[\"mass\"]) ? $uniprot_data[\"mass\"] : NULL;\n\n    // Update the database\n    $statement = $this->db->prepare(\"\n      UPDATE protein\n      SET uniprot_kb = :uniprot_kb\n          ,uniprot_protein_name = :uniprot_protein_name\n          ,uniprot_source_taxon_id = :uniprot_source_taxon_id\n          ,uniprot_sequence = :uniprot_sequence\n          ,uniprot_sequence_raw = :uniprot_sequence_raw\n          ,uniprot_sequence_length = :uniprot_sequence_length\n          ,protein_molecular_weight = :protein_molecular_weight\n      WHERE uniprot_accession_id = :uniprot_accession_id\");\n    $statement->bindValue(\":uniprot_accession_id\", $uniprot_accession_id, PDO::PARAM_STR);\n    $statement->bindValue(\":uniprot_kb\", $data[\"uniprot_kb\"], PDO::PARAM_STR);\n    $statement->bindValue(\":uniprot_protein_name\", $data[\"uniprot_protein_name\"], PDO::PARAM_STR);\n    $statement->bindValue(\":uniprot_source_taxon_id\", $data[\"uniprot_source_taxon_id\"], PDO::PARAM_STR);\n    $statement->bindValue(\":uniprot_sequence\", $data[\"uniprot_sequence\"], PDO::PARAM_STR);\n    $statement->bindValue(\":uniprot_sequence_raw\", $data[\"uniprot_sequence_raw\"], PDO::PARAM_STR);\n    $statement->bindValue(\":uniprot_sequence_length\", $data[\"uniprot_sequence_length\"], PDO::PARAM_INT);\n    $statement->bindValue(\":protein_molecular_weight\", $data[\"protein_molecular_weight\"], PDO::PARAM_INT);\n    $statement->execute();\n  }\n\n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_uniprot_data.class.php","digestWhenLastPersisted":"fd0cda9020d28e99083ad6ba7c9152934601b863","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"a3bb9ec25e7ee5f7e8daf91e8f3529e7","text":"<?php\nclass importPlotsData {\n\n  public $db;\n\n  public function __construct( $db_connection = false ) {\n    if( $db_connection && is_object($db_connection) ) {\n      $this->db = $db_connection;\n    }\n  }\n  \n  public function import_lod_loq_comparison_data( $row = false ) {\n    \n    if($row) {\n\n      // $row array looks like this:\n      // \n      // [0] transition\n      // [1] transition_id\n      // [2] blank_low_conc_LOD,\n      // [3] blank_only_LOD,\n      // [4] rsd_limit_LOD,\n      // [5] blank_low_conc_LOQ,\n      // [6] blank_only_LOQ,\n      // [7] rsd_limit_LOQ\n      // [8] peptide\n      // [9] analyte_peptide_id\n      // [10] laboratory_id\n      // [11] import_log_id\n      // [12] lod_loq_units\n\n      // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n      $statement = $this->db->prepare(\"\n        SELECT lod_loq_comparison_id\n        FROM lod_loq_comparison\n        WHERE transition = :transition\n        AND peptide = :peptide\n        AND analyte_peptide_id = :analyte_peptide_id\n        AND laboratory_id = :laboratory_id\n      \");\n      $statement->bindValue(\":analyte_peptide_id\", $row[9], PDO::PARAM_INT);\n      $statement->bindValue(\":laboratory_id\", $row[10], PDO::PARAM_INT);\n      $statement->bindValue(\":peptide\", $row[8], PDO::PARAM_STR);\n      $statement->bindValue(\":transition\", trim(str_replace(array('\\'', '\"'), '', $row[0])), PDO::PARAM_INT);\n      $statement->execute();\n      $existing_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n      if(!$existing_data) {\n        // Insert the record into the database.\n        $statement = $this->db->prepare(\"\n          INSERT INTO lod_loq_comparison\n          (\n              import_log_id\n            , analyte_peptide_id\n            , laboratory_id\n            , peptide\n            , transition\n            , transition_id\n            , lod_loq_units\n            , blank_low_conc_LOD\n            , blank_low_conc_LOQ\n            , blank_only_LOD\n            , blank_only_LOQ\n            , rsd_limit_LOD\n            , rsd_limit_LOQ\n            , created_date\n          )\n          VALUES (\n              :import_log_id\n            , :analyte_peptide_id\n            , :laboratory_id\n            , :peptide\n            , :transition\n            , :transition_id\n            , :lod_loq_units\n            , :blank_low_conc_LOD\n            , :blank_low_conc_LOQ\n            , :blank_only_LOD\n            , :blank_only_LOQ\n            , :rsd_limit_LOD\n            , :rsd_limit_LOQ\n            , NOW()\n          )\");\n        $statement->bindValue(\":lod_loq_units\", $row[12], PDO::PARAM_STR); // (quantification_units)\n        $statement->bindValue(\":import_log_id\", $row[11], PDO::PARAM_INT);\n        $statement->bindValue(\":analyte_peptide_id\", $row[9], PDO::PARAM_INT);\n        $statement->bindValue(\":laboratory_id\", $row[10], PDO::PARAM_INT);\n        $statement->bindValue(\":peptide\", $row[8], PDO::PARAM_STR);\n        $statement->bindValue(\":transition\", trim(str_replace(array('\\'', '\"'), '', $row[0])), PDO::PARAM_INT);\n        $statement->bindValue(\":transition_id\", trim(str_replace(array('\\'', '\"'), '', $row[1])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_low_conc_LOD\", trim(str_replace(array('\\'', '\"'), '', $row[2])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_only_LOD\", trim(str_replace(array('\\'', '\"'), '', $row[3])), PDO::PARAM_STR);\n        $statement->bindValue(\":rsd_limit_LOD\", trim(str_replace(array('\\'', '\"'), '', $row[4])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_low_conc_LOQ\", trim(str_replace(array('\\'', '\"'), '', $row[5])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_only_LOQ\", trim(str_replace(array('\\'', '\"'), '', $row[6])), PDO::PARAM_STR);\n        $statement->bindValue(\":rsd_limit_LOQ\", trim(str_replace(array('\\'', '\"'), '', $row[7])), PDO::PARAM_STR);\n        $statement->execute();\n      } else {\n        // Update the table.\n        $statement = $this->db->prepare(\"\n          UPDATE lod_loq_comparison\n          SET\n              transition_id = :transition_id\n            , blank_low_conc_LOD = :blank_low_conc_LOD\n            , blank_low_conc_LOQ = :blank_low_conc_LOQ\n            , blank_only_LOD = :blank_only_LOD\n            , blank_only_LOQ = :blank_only_LOQ\n            , rsd_limit_LOD = :rsd_limit_LOD\n            , rsd_limit_LOQ = :rsd_limit_LOQ\n          WHERE lod_loq_comparison_id = \".$existing_data[\"lod_loq_comparison_id\"]);\n        $statement->bindValue(\":transition_id\", trim(str_replace(array('\\'', '\"'), '', $row[1])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_low_conc_LOD\", trim(str_replace(array('\\'', '\"'), '', $row[2])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_only_LOD\", trim(str_replace(array('\\'', '\"'), '', $row[3])), PDO::PARAM_STR);\n        $statement->bindValue(\":rsd_limit_LOD\", trim(str_replace(array('\\'', '\"'), '', $row[4])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_low_conc_LOQ\", trim(str_replace(array('\\'', '\"'), '', $row[5])), PDO::PARAM_STR);\n        $statement->bindValue(\":blank_only_LOQ\", trim(str_replace(array('\\'', '\"'), '', $row[6])), PDO::PARAM_STR);\n        $statement->bindValue(\":rsd_limit_LOQ\", trim(str_replace(array('\\'', '\"'), '', $row[7])), PDO::PARAM_STR);\n        $statement->execute();\n      }\n\n    }\n  }\n\n  // Not being used anymore (may need to use again, not sure) 2014-05-10.\n  public function insert_lod_loq_method_type( $lod_loq_method_type_label = false ) {\n    // Check to see if it's already in the database\n    $statement = $this->db->prepare(\"\n      SELECT lod_loq_method_type_id\n      FROM lod_loq_method_type\n      WHERE lod_loq_method_type_label = :lod_loq_method_type_label\");\n    $statement->bindValue(\":lod_loq_method_type_label\", $lod_loq_method_type_label, PDO::PARAM_STR);\n    $statement->execute();\n    $data = $statement->fetch(PDO::FETCH_ASSOC);\n    // If it's in the database, set the $lod_loq_method_type_id variable\n    // If not, insert it set the $lod_loq_method_type_id variable to the last insert id\n    if($data) {\n      $lod_loq_method_type_id = $data[\"lod_loq_method_type_id\"];\n    } else {\n      $statement = $this->db->prepare(\"\n        INSERT INTO lod_loq_method_type\n        (lod_loq_method_type_label)\n        VALUES ( :lod_loq_method_type_label )\");\n      $statement->bindValue(\":lod_loq_method_type_label\", $lod_loq_method_type_label, PDO::PARAM_STR);\n      $statement->execute();\n      $lod_loq_method_type_id = $this->db->lastInsertId();\n    }\n    return (int)$lod_loq_method_type_id;\n  }\n\n  // Original method name = import_response_curves_data\n  public function import_curve_fit_data( $row = false ) {\n\n    // Query the Portal database to see if the record exists, which will determine if we're updating or inserting.\n    $statement = $this->db->prepare(\"\n      SELECT response_curves_data_id\n      FROM response_curves_data\n      WHERE transition = :transition\n      AND peptide = :peptide\n      AND analyte_peptide_id = :analyte_peptide_id\n      AND laboratory_id = :laboratory_id\n    \");\n    $statement->bindValue(\":analyte_peptide_id\", $row[8], PDO::PARAM_INT);\n    $statement->bindValue(\":laboratory_id\", $row[9], PDO::PARAM_INT);\n    $statement->bindValue(\":peptide\", $row[7], PDO::PARAM_STR);\n    $statement->bindValue(\":transition\", trim(str_replace(array('\\'', '\"'), '', $row[0])), PDO::PARAM_INT);\n    $statement->execute();\n    $existing_data = $statement->fetch(PDO::FETCH_ASSOC);\n\n    if(!$existing_data) {\n      // Insert the record into the database.\n      $statement = $this->db->prepare(\"\n        INSERT INTO response_curves_data\n        (\n            import_log_id\n          , analyte_peptide_id\n          , laboratory_id\n          , peptide\n          , transition\n          , transition_id\n          , Slope\n          , SlopeStdErr\n          , Intercept\n          , InterceptStdErr\n          , RSquare\n          , created_date\n        )\n        VALUES (\n            :import_log_id\n          , :analyte_peptide_id\n          , :laboratory_id\n          , :peptide\n          , :transition\n          , :transition_id\n          , :Slope\n          , :SlopeStdErr\n          , :Intercept\n          , :InterceptStdErr\n          , :RSquare\n          , NOW()\n        )\");\n      $statement->bindValue(\":import_log_id\", $row[10], PDO::PARAM_INT);\n      $statement->bindValue(\":analyte_peptide_id\", $row[8], PDO::PARAM_INT);\n      $statement->bindValue(\":laboratory_id\", $row[9], PDO::PARAM_INT);\n      $statement->bindValue(\":peptide\", $row[7], PDO::PARAM_STR);\n      $statement->bindValue(\":transition\", trim(str_replace(array('\\'', '\"'), '', $row[0])), PDO::PARAM_INT);\n      $statement->bindValue(\":transition_id\", trim(str_replace(array('\\'', '\"'), '', $row[1])), PDO::PARAM_STR);\n      $statement->bindValue(\":Slope\", trim(str_replace(array('\\'', '\"'), '', $row[2])), PDO::PARAM_STR);\n      $statement->bindValue(\":SlopeStdErr\", trim(str_replace(array('\\'', '\"'), '', $row[3])), PDO::PARAM_STR);\n      $statement->bindValue(\":Intercept\", trim(str_replace(array('\\'', '\"'), '', $row[4])), PDO::PARAM_STR);\n      $statement->bindValue(\":InterceptStdErr\", trim(str_replace(array('\\'', '\"'), '', $row[5])), PDO::PARAM_STR);\n      $statement->bindValue(\":RSquare\", trim(str_replace(array('\\'', '\"'), '', $row[6])), PDO::PARAM_STR);\n      $statement->execute();\n    } else {\n      // Update the table.\n      $statement = $this->db->prepare(\"\n        UPDATE response_curves_data\n        SET\n            transition_id = :transition_id\n          , Slope = :Slope\n          , SlopeStdErr = :SlopeStdErr\n          , Intercept = :Intercept\n          , InterceptStdErr = :InterceptStdErr\n          , RSquare = :RSquare\n        WHERE response_curves_data_id = \".$existing_data[\"response_curves_data_id\"]);\n      $statement->bindValue(\":transition_id\", trim(str_replace(array('\\'', '\"'), '', $row[1])), PDO::PARAM_STR);\n      $statement->bindValue(\":Slope\", trim(str_replace(array('\\'', '\"'), '', $row[2])), PDO::PARAM_STR);\n      $statement->bindValue(\":SlopeStdErr\", trim(str_replace(array('\\'', '\"'), '', $row[3])), PDO::PARAM_STR);\n      $statement->bindValue(\":Intercept\", trim(str_replace(array('\\'', '\"'), '', $row[4])), PDO::PARAM_STR);\n      $statement->bindValue(\":InterceptStdErr\", trim(str_replace(array('\\'', '\"'), '', $row[5])), PDO::PARAM_STR);\n      $statement->bindValue(\":RSquare\", trim(str_replace(array('\\'', '\"'), '', $row[6])), PDO::PARAM_STR);\n      $statement->execute();\n    }\n  }\n    \n}\n?>","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_plots_data.class.php","digestWhenLastPersisted":"4f9d1a7388a0af9fc01a340aadb14974ae5a83e1","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":40,"softTabs":true,"firstVisibleScreenRow":1143,"firstVisibleScreenColumn":4,"displayBuffer":{"deserializer":"DisplayBuffer","id":41,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/assays.class.php","bufferId":"c61ba360121454fb3acc0789b04e878c","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":124,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":125,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_entrez_genomic_context.class.php","bufferId":"89ceee89b8b5a7bf334a83a86ecab33b","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":104,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":105,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/get_panorama_data.php","bufferId":"0d7d810e204a829a08113dc04e23f05f","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":108,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":109,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/browse_assays.php","bufferId":"c0a5b85e94e2a0180182633391539dfb","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":112,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":113,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_update.php","bufferId":"d49a9f7c18ad132a41482b04ce1e1e0f","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":116,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":117,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_update_assays_import.php","bufferId":"a8f1596b4db975f29bd5c0b7a8e269e7","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":100,"softTabs":true,"firstVisibleScreenRow":34,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":101,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/templates/insert_update.php","bufferId":"5f51c228b8347b458aa09e394daaf446","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":96,"softTabs":true,"firstVisibleScreenRow":254,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":97,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/models/validation_sample_images_import.class.php","bufferId":"69089c551c2ad5414225ba3202c8ae7e","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":92,"softTabs":true,"firstVisibleScreenRow":339,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":93,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_data.php","bufferId":"dee27659db48e1dec9e2cd06b0b14b7e","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":88,"softTabs":true,"firstVisibleScreenRow":146,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":89,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/controllers/assay_details.php","bufferId":"ce68f4490c515bf1473338f0ddffc9cf","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":84,"softTabs":true,"firstVisibleScreenRow":985,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":85,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/show_assay_details.php","bufferId":"aa95bdd48443c7fd1e2628d980777527","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":80,"softTabs":true,"firstVisibleScreenRow":127,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":81,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/execute_import.php","bufferId":"00f32275b9cdb21752f45e4313609f3f","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":76,"softTabs":true,"firstVisibleScreenRow":91,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":77,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/config/settings.php","bufferId":"1f5c16aebeda7f19a2fbb7a7eb974e31","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":72,"softTabs":true,"firstVisibleScreenRow":75,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":73,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/core/slim_framework/SWPG/models/XML2Array.php","bufferId":"742116fcd21d9ce7348e0a50bae49249","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":32,"softTabs":true,"firstVisibleScreenRow":739,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":33,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_panorama_data.class.php","bufferId":"46d8ee603f87292aaa24fa75970cc54d","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":128,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":129,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_uniprot_data.class.php","bufferId":"c47bb549a3ebbfb2d99e1278d02ef1f2","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":132,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":133,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_plots_data.class.php","bufferId":"a3bb9ec25e7ee5f7e8daf91e8f3529e7","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":36,"softTabs":true,"firstVisibleScreenRow":113,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":37,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/swpg_global_settings.php","bufferId":"561e02cb5503f7983ee814627d89a2ee","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":28,"softTabs":true,"firstVisibleScreenRow":16,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":29,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/labkey.class.php","bufferId":"5f8956a0150200b09c32d9abd17cac22","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":24,"softTabs":true,"firstVisibleScreenRow":478,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":25,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_protein_peptide.php","bufferId":"4cdb11d3fcdcee4c8a01c0d403e29003","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":120,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":121,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_sop_file.php","bufferId":"b55f38e83b3d56f3280bd8ce288b6293","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/labkey.class.php","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-php","language-html","language-javascript","language-sql","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"run_import","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["@value","get_assay_by_uniprot_api","checkUrl","uniprot","uniprot_api","all_in_one_graph","Validation images","Validation ","ValidationSampleImagesImport","ValidationSample","getPeptideValidationSampleImage","&amp","assay details","assay_details","get_validation_sample_image","$gene['analyte_peptide_id']","$gene","'panorama_images_path']","'panorama_images_path","validation images","save file","save Validation","saving","run_import","run import"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/kristennice/Desktop/cptac-docker/src/assays/models/assays.class.php":1459303745253,"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_entrez_genomic_context.class.php":1459303746195,"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/get_panorama_data.php":1458941243104,"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/browse_assays.php":1459303739535,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_update.php":1458941253185,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_update_assays_import.php":1458941254286,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/templates/insert_update.php":1458934037880,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/models/validation_sample_images_import.class.php":1458941366321,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_data.php":1458941259668,"/Users/kristennice/Desktop/cptac-docker/src/assays/controllers/assay_details.php":1458936921922,"/Users/kristennice/Desktop/cptac-docker/src/assays/templates/show_assay_details.php":1458838411890,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/execute_import.php":1458654410401,"/Users/kristennice/Desktop/cptac-docker/src/assays/config/settings.php":1458936890020,"/Users/kristennice/Desktop/cptac-docker/src/core/slim_framework/SWPG/models/XML2Array.php":1458751780255,"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_panorama_data.class.php":1459303747120,"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_uniprot_data.class.php":1459303748150,"/Users/kristennice/Desktop/cptac-docker/src/assays/models/import_plots_data.class.php":1459303748861,"/Users/kristennice/Desktop/cptac-docker/src/swpg_global_settings.php":1458936969231,"/Users/kristennice/Desktop/cptac-docker/src/assays/models/labkey.class.php":1459303749903,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/import_panorama_protein_peptide.php":1458941258208,"/Users/kristennice/Desktop/cptac-docker/src/assays_import/controllers/insert_sop_file.php":1458941256957},"metrics":{"sessionLength":848455735},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/kristennice/Desktop/cptac-docker/src":{"isExpanded":true,"entries":{"assays":{"isExpanded":true,"entries":{"config":{"isExpanded":false,"entries":{}},"controllers":{"isExpanded":false,"entries":{}},"library":{"isExpanded":false,"entries":{}},"models":{"isExpanded":true,"entries":{}},"templates":{"isExpanded":false,"entries":{}}}},"assays_import":{"isExpanded":true,"entries":{"config":{"isExpanded":false,"entries":{}},"controllers":{"isExpanded":true,"entries":{}},"library":{"isExpanded":false,"entries":{}},"models":{"isExpanded":true,"entries":{}},"templates":{"isExpanded":true,"entries":{}}}},"assays_manage":{"isExpanded":false,"entries":{}},"assays_preview":{"isExpanded":false,"entries":{}},"authenticate":{"isExpanded":false,"entries":{}},"cms":{"isExpanded":false,"entries":{}},"core":{"isExpanded":false,"entries":{}},"group":{"isExpanded":false,"entries":{}},"modules":{"isExpanded":false,"entries":{}},"site":{"isExpanded":false,"entries":{}},"support":{"isExpanded":false,"entries":{}},"swpg_files":{"isExpanded":false,"entries":{}},"tutorials":{"isExpanded":false,"entries":{}},"user_account":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/kristennice/Desktop/cptac-docker/src/assays/models/labkey.class.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":22,"width":368}},"fullScreen":false}